
/home/ziya/huangtan/lab/os/os_leenux/diy-x86os/code/huangtan/build/source/loader/loader.elf：     文件格式 elf32-i386
/home/ziya/huangtan/lab/os/os_leenux/diy-x86os/code/huangtan/build/source/loader/loader.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00008000

程序头：
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000657 memsz 0x00000657 flags r-x
    LOAD off    0x00001658 vaddr 0x00009658 paddr 0x00009658 align 2**12
         filesz 0x00000018 memsz 0x0000007c flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061d  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000003a  0000861d  0000861d  0000161d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00009658  00009658  00001658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  00009680  00009680  00001670  2**5
                  ALLOC
  4 .comment      00000035  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000016a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000900  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000305  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ae  00000000  00000000  0000230d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000026bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000435  00000000  00000000  00002924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002d59  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
0000861d l    d  .rodata	00000000 .rodata
00009658 l    d  .data	00000000 .data
00009680 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000002a inb
00008042 l     F .text	0000002d outb
0000806f l     F .text	0000000b cli
0000807a l     F .text	0000003a lgdt
000080b4 l     F .text	0000001a read_cr0
000080ce l     F .text	00000012 write_cr0
000080e0 l     F .text	0000002b far_jump
0000810b l     F .text	0000003e show_msg
00008149 l     F .text	00000139 detece_momery
00008282 l     F .text	00000092 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008337 l     F .text	0000001d inb
00008354 l     F .text	0000001f inw
00008373 l     F .text	0000001f outb
00008392 l     F .text	0000011f read_disk
000084b1 l     F .text	0000011a reload_elf_file
000085cb l     F .text	00000005 die
00008314 g     F .text	00000023 loader_entry
00009658 g     O .data	00000018 gdt_table
000085d0 g     F .text	0000004d load_kernel
00009680 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
00009670 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
00009670 g       .data	00000000 _edata
000096d4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
    .text
    .extern loader_entry
_start:
    //0x8000 存放在0x8000的第一条指令
    //沿用之前的寄存器状态
    jmp loader_entry
    8000:	e9 11 03             	jmp    8314 <loader_entry>

00008003 <protect_mode_entry>:
    .code32
    .text
    .global protect_mode_entry
    .extern load_kernel
protect_mode_entry:
    mov $16,%ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
    mov %ax,%ds 
    mov %ax,%es
    8009:	8e c0                	mov    %ax,%es
    mov %ax,%fs
    800b:	8e e0                	mov    %ax,%fs
    mov %ax,%gs
    800d:	8e e8                	mov    %ax,%gs
    mov %ax,%ss
    800f:	8e d0                	mov    %ax,%ss
    //长跳转进入内核加载
    8011:	ea d0 85 00 00       	ljmp   $0x0,$0x85d0
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <inb>:
//一些简单汇编的封装
#ifndef CPU_INSTR_H
#define CPU_INSTR_H
#include"types.h"
static inline uint8_t inb(uint16_t port){
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    801d:	66 83 ec 14          	sub    $0x14,%esp
    8021:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8026:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t ret;
    __asm__ __volatile__("inb %[p], %[v]" : [v]"=a"(ret) : [p]"d"(port));
    802a:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8030:	66 89 c2             	mov    %eax,%edx
    8033:	ec                   	in     (%dx),%al
    8034:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    //"d"表示使用通用寄存器EDX来传递输入操作数
    //"a"表示将结果存储在寄存器EAX
    return ret;
    8038:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    803e:	66 c9                	leavel 
    8040:	66 c3                	retl   

00008042 <outb>:
static inline uint16_t inw(uint16_t port){
    uint16_t ret;
    __asm__ __volatile__("in %1, %0" : "=a" (ret) : "dN" (port));
    return ret;
}
static inline void outb(uint16_t port, uint8_t val){
    8042:	66 55                	push   %ebp
    8044:	66 89 e5             	mov    %esp,%ebp
    8047:	66 83 ec 08          	sub    $0x8,%esp
    804b:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    8050:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8055:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8059:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" : : [v]"a"(val), [p]"d"(port));
    805d:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8063:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8069:	ee                   	out    %al,(%dx)
}
    806a:	90                   	nop
    806b:	66 c9                	leavel 
    806d:	66 c3                	retl   

0000806f <cli>:
static inline void cli(){
    806f:	66 55                	push   %ebp
    8071:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli");
    8074:	fa                   	cli    
}
    8075:	90                   	nop
    8076:	66 5d                	pop    %ebp
    8078:	66 c3                	retl   

0000807a <lgdt>:
static inline uint32_t rdtsc(){
    uint32_t ret;
    __asm__ __volatile__("rdtsc" : "=a"(ret));
    return ret;
}
static inline void lgdt(uint32_t start,uint32_t size){
    807a:	66 55                	push   %ebp
    807c:	66 89 e5             	mov    %esp,%ebp
    807f:	66 83 ec 10          	sub    $0x10,%esp
    {
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    }gdt;
    gdt.limit=size-1;   
    8083:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8088:	66 83 e8 01          	sub    $0x1,%eax
    808c:	67 89 45 fa          	mov    %ax,-0x6(%ebp)
    gdt.start15_0=start&0xffff;
    8090:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8095:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.start31_16=(start>>16)&0xff;
    8099:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    809e:	66 c1 e8 10          	shr    $0x10,%eax
    80a2:	66 0f b6 c0          	movzbl %al,%eax
    80a6:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    __asm__ __volatile__("lgdt %[g]" : : [g]"m"(gdt));
    80aa:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
    
}
    80af:	90                   	nop
    80b0:	66 c9                	leavel 
    80b2:	66 c3                	retl   

000080b4 <read_cr0>:
    idt.limit=size-1;   
    idt.start15_0=start&0xffff;
    idt.start31_16=(start>>16)&0xff;
    __asm__ __volatile__("lidt %0"::"m"(idt));
}
static inline uint32_t read_cr0(){
    80b4:	66 55                	push   %ebp
    80b6:	66 89 e5             	mov    %esp,%ebp
    80b9:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t ret;
    __asm__ __volatile__("mov %%cr0, %[v]" : [v]"=r"(ret));
    80bd:	0f 20 c0             	mov    %cr0,%eax
    80c0:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    return ret;
    80c5:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80ca:	66 c9                	leavel 
    80cc:	66 c3                	retl   

000080ce <write_cr0>:
static inline void write_cr0(uint32_t val){
    80ce:	66 55                	push   %ebp
    80d0:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr0" : : [v]"r"(val));
    80d3:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d8:	0f 22 c0             	mov    %eax,%cr0
}
    80db:	90                   	nop
    80dc:	66 5d                	pop    %ebp
    80de:	66 c3                	retl   

000080e0 <far_jump>:
    return ret;
}
static inline void write_eflags(uint32_t val){
    __asm__ __volatile__("pushl %%eax; popfl" : : "a"(val));
}
static inline void far_jump(uint32_t selector,uint32_t offset){
    80e0:	66 55                	push   %ebp
    80e2:	66 89 e5             	mov    %esp,%ebp
    80e5:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t addr[]={offset,selector};
    80e9:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ee:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80f3:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f8:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    //*(%[a])：这是一个间接寻址（indirect addressing）表达式。*表示要跳转到寻址结果指向的地址。(%[a])表示使用变量 a 的值作为内存地址进行间接寻址
    __asm__ __volatile__("ljmpl *(%[a])" : : [a]"r"(addr));
    80fd:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    8102:	67 66 ff 28          	ljmpl  *(%eax)
}
    8106:	90                   	nop
    8107:	66 c9                	leavel 
    8109:	66 c3                	retl   

0000810b <show_msg>:
        inc si           ; 增加指针，以便读取下一个字符
        jmp print_string ; 继续输出字符
    finished:
        ret
        */
static void show_msg(const char*msg){
    810b:	66 55                	push   %ebp
    810d:	66 89 e5             	mov    %esp,%ebp
    8110:	66 83 ec 10          	sub    $0x10,%esp
    
    const char *c=msg;
    8114:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8119:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    while(*c){
    811e:	eb 16                	jmp    8136 <show_msg+0x2b>
        __asm__ __volatile__("mov $0xe, %%ah\n\t"
                             "mov %[ch], %%al\n\t"
                             "int $0x10"::[ch]"r"(*c));
    8120:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
    8125:	67 66 0f b6 00       	movzbl (%eax),%eax
        */
static void show_msg(const char*msg){
    
    const char *c=msg;
    while(*c){
        __asm__ __volatile__("mov $0xe, %%ah\n\t"
    812a:	b4 0e                	mov    $0xe,%ah
    812c:	88 c0                	mov    %al,%al
    812e:	cd 10                	int    $0x10
                             "mov %[ch], %%al\n\t"
                             "int $0x10"::[ch]"r"(*c));
        c++;
    8130:	67 66 83 45 fc 01    	addl   $0x1,-0x4(%ebp)
        ret
        */
static void show_msg(const char*msg){
    
    const char *c=msg;
    while(*c){
    8136:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
    813b:	67 66 0f b6 00       	movzbl (%eax),%eax
    8140:	84 c0                	test   %al,%al
    8142:	75 dc                	jne    8120 <show_msg+0x15>
        __asm__ __volatile__("mov $0xe, %%ah\n\t"
                             "mov %[ch], %%al\n\t"
                             "int $0x10"::[ch]"r"(*c));
        c++;
    }
}
    8144:	90                   	nop
    8145:	66 c9                	leavel 
    8147:	66 c3                	retl   

00008149 <detece_momery>:
		// process memory map
		[...]
	}
}
*/
static void detece_momery(void){
    8149:	66 55                	push   %ebp
    814b:	66 89 e5             	mov    %esp,%ebp
    814e:	66 57                	push   %edi
    8150:	66 56                	push   %esi
    8152:	66 53                	push   %ebx
    8154:	66 83 ec 30          	sub    $0x30,%esp
    uint32_t contID=0;
    8158:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    815f:	00 00 
    SAMP_entry_t smap_entry;
    int signature, bytes;
    show_msg("Detecting memory map...");
    8161:	66 68 1d 86 00 00    	pushl  $0x861d
    8167:	66 e8 9e ff ff ff    	calll  810b <show_msg>
    816d:	66 83 c4 04          	add    $0x4,%esp
    boot_info.ram_region_count=0;
    8171:	66 c7 06 d0 96 00 00 	movl   $0x0,-0x6930
    8178:	00 00 
    for(int i=0;i<BOOT_RAM_REGION_MAX;i++){
    817a:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    8181:	00 00 
    8183:	e9 d0 00             	jmp    8256 <detece_momery+0x10d>
        SAMP_entry_t* entry=&smap_entry;
    8186:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    818b:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)
        __asm__ __volatile__ ("int  $0x15" 
    8190:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8196:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    819b:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    81a1:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a7:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81ac:	66 89 f7             	mov    %esi,%edi
    81af:	cd 15                	int    $0x15
    81b1:	66 89 da             	mov    %ebx,%edx
    81b4:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81b9:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81be:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
				: "=a"(signature), "=c"(bytes), "=b"(contID)
				: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));

        if (signature != 0x534D4150){
    81c3:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81ca:	4d 53 
    81cc:	74 13                	je     81e1 <detece_momery+0x98>
            show_msg("failed.\r\n");
    81ce:	66 68 35 86 00 00    	pushl  $0x8635
    81d4:	66 e8 31 ff ff ff    	calll  810b <show_msg>
    81da:	66 83 c4 04          	add    $0x4,%esp
            return ;
    81de:	e9 92 00             	jmp    8273 <detece_momery+0x12a>
        }

        if(bytes>20&&(entry->ACPI&0x01)==0){
    81e1:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e7:	7e 13                	jle    81fc <detece_momery+0xb3>
    81e9:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81ee:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81f3:	66 83 e0 01          	and    $0x1,%eax
    81f7:	66 85 c0             	test   %eax,%eax
    81fa:	74 53                	je     824f <detece_momery+0x106>
            continue;
        }
        if(entry->Type==1){
    81fc:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8201:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8206:	66 83 f8 01          	cmp    $0x1,%eax
    820a:	75 39                	jne    8245 <detece_momery+0xfc>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start=entry->BaseL;
    820c:	66 a1 d0 96          	mov    0x96d0,%eax
    8210:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8215:	67 66 8b 12          	mov    (%edx),%edx
    8219:	67 66 89 14 c5 80 96 	mov    %edx,0x9680(,%eax,8)
    8220:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].start=entry->LengthL;
    8222:	66 a1 d0 96          	mov    0x96d0,%eax
    8226:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    822b:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8230:	67 66 89 14 c5 80 96 	mov    %edx,0x9680(,%eax,8)
    8237:	00 00 
            boot_info.ram_region_count++;
    8239:	66 a1 d0 96          	mov    0x96d0,%eax
    823d:	66 83 c0 01          	add    $0x1,%eax
    8241:	66 a3 d0 96          	mov    %eax,0x96d0
            
        }
        if(contID==0){
    8245:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    824b:	74 15                	je     8262 <detece_momery+0x119>
    824d:	eb 01                	jmp    8250 <detece_momery+0x107>
            show_msg("failed.\r\n");
            return ;
        }

        if(bytes>20&&(entry->ACPI&0x01)==0){
            continue;
    824f:	90                   	nop
    uint32_t contID=0;
    SAMP_entry_t smap_entry;
    int signature, bytes;
    show_msg("Detecting memory map...");
    boot_info.ram_region_count=0;
    for(int i=0;i<BOOT_RAM_REGION_MAX;i++){
    8250:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    8256:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    825c:	0f 8e 26 ff          	jle    8186 <detece_momery+0x3d>
    8260:	eb 01                	jmp    8263 <detece_momery+0x11a>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start=entry->LengthL;
            boot_info.ram_region_count++;
            
        }
        if(contID==0){
            break;
    8262:	90                   	nop
        }
    }
    show_msg("done.\r\n");
    8263:	66 68 3f 86 00 00    	pushl  $0x863f
    8269:	66 e8 9c fe ff ff    	calll  810b <show_msg>
    826f:	66 83 c4 04          	add    $0x4,%esp
    //show_msg("RAM regions: %d\r\n",boot_info.ram_region_count);
}
    8273:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8278:	66 5b                	pop    %ebx
    827a:	66 5e                	pop    %esi
    827c:	66 5f                	pop    %edi
    827e:	66 5d                	pop    %ebp
    8280:	66 c3                	retl   

00008282 <enter_protect_mode>:
    {0,0,0,0},
    {0xFFFF,0,0x9A00,0x00CF},
    {0xFFFF,0,0x9200,0x00CF},
};
static void enter_protect_mode()
{   
    8282:	66 55                	push   %ebp
    8284:	66 89 e5             	mov    %esp,%ebp
    8287:	66 83 ec 10          	sub    $0x10,%esp
    cli();
    828b:	66 e8 de fd ff ff    	calll  806f <cli>
    //开启A20中线使得可以访问1M以上的地址
    uint8_t v=inb(0x92);
    8291:	66 68 92 00 00 00    	pushl  $0x92
    8297:	66 e8 7b fd ff ff    	calll  8018 <inb>
    829d:	66 83 c4 04          	add    $0x4,%esp
    82a1:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92,v|2);
    82a5:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82ab:	66 83 c8 02          	or     $0x2,%eax
    82af:	66 0f b6 c0          	movzbl %al,%eax
    82b3:	66 50                	push   %eax
    82b5:	66 68 92 00 00 00    	pushl  $0x92
    82bb:	66 e8 81 fd ff ff    	calll  8042 <outb>
    82c1:	66 83 c4 08          	add    $0x8,%esp
    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
    82c5:	66 b8 58 96 00 00    	mov    $0x9658,%eax
    82cb:	66 6a 18             	pushl  $0x18
    82ce:	66 50                	push   %eax
    82d0:	66 e8 a4 fd ff ff    	calll  807a <lgdt>
    82d6:	66 83 c4 08          	add    $0x8,%esp
    //打开保护模式
    uint32_t cr0=read_cr0();
    82da:	66 e8 d4 fd ff ff    	calll  80b4 <read_cr0>
    82e0:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(cr0|1<<0);
    82e5:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82ea:	66 83 c8 01          	or     $0x1,%eax
    82ee:	66 50                	push   %eax
    82f0:	66 e8 d8 fd ff ff    	calll  80ce <write_cr0>
    82f6:	66 83 c4 04          	add    $0x4,%esp
    //长跳转进入保护模式，使用长跳转清空流水线
    far_jump(8,(uint32_t)protect_mode_entry);
    82fa:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    8300:	66 50                	push   %eax
    8302:	66 6a 08             	pushl  $0x8
    8305:	66 e8 d5 fd ff ff    	calll  80e0 <far_jump>
    830b:	66 83 c4 08          	add    $0x8,%esp
}
    830f:	90                   	nop
    8310:	66 c9                	leavel 
    8312:	66 c3                	retl   

00008314 <loader_entry>:
void loader_entry(void){
    8314:	66 55                	push   %ebp
    8316:	66 89 e5             	mov    %esp,%ebp
    show_msg("Hello, World!\r\n");
    8319:	66 68 47 86 00 00    	pushl  $0x8647
    831f:	66 e8 e6 fd ff ff    	calll  810b <show_msg>
    8325:	66 83 c4 04          	add    $0x4,%esp
    detece_momery();
    8329:	66 e8 1a fe ff ff    	calll  8149 <detece_momery>
    enter_protect_mode();
    832f:	66 e8 4d ff ff ff    	calll  8282 <enter_protect_mode>
    for(;;){}
    8335:	eb fe                	jmp    8335 <loader_entry+0x21>

00008337 <inb>:
//一些简单汇编的封装
#ifndef CPU_INSTR_H
#define CPU_INSTR_H
#include"types.h"
static inline uint8_t inb(uint16_t port){
    8337:	55                   	push   %bp
    8338:	89 e5                	mov    %sp,%bp
    833a:	83 ec 14             	sub    $0x14,%sp
    833d:	8b 45 08             	mov    0x8(%di),%ax
    8340:	66 89 45 ec          	mov    %eax,-0x14(%di)
    uint8_t ret;
    __asm__ __volatile__("inb %[p], %[v]" : [v]"=a"(ret) : [p]"d"(port));
    8344:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8348:	89 c2                	mov    %ax,%dx
    834a:	ec                   	in     (%dx),%al
    834b:	88 45 ff             	mov    %al,-0x1(%di)
    //"d"表示使用通用寄存器EDX来传递输入操作数
    //"a"表示将结果存储在寄存器EAX
    return ret;
    834e:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    8352:	c9                   	leave  
    8353:	c3                   	ret    

00008354 <inw>:
static inline uint16_t inw(uint16_t port){
    8354:	55                   	push   %bp
    8355:	89 e5                	mov    %sp,%bp
    8357:	83 ec 14             	sub    $0x14,%sp
    835a:	8b 45 08             	mov    0x8(%di),%ax
    835d:	66 89 45 ec          	mov    %eax,-0x14(%di)
    uint16_t ret;
    __asm__ __volatile__("in %1, %0" : "=a" (ret) : "dN" (port));
    8361:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8365:	89 c2                	mov    %ax,%dx
    8367:	66 ed                	in     (%dx),%eax
    8369:	66 89 45 fe          	mov    %eax,-0x2(%di)
    return ret;
    836d:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    8371:	c9                   	leave  
    8372:	c3                   	ret    

00008373 <outb>:
static inline void outb(uint16_t port, uint8_t val){
    8373:	55                   	push   %bp
    8374:	89 e5                	mov    %sp,%bp
    8376:	83 ec 08             	sub    $0x8,%sp
    8379:	8b 55 08             	mov    0x8(%di),%dx
    837c:	8b 45 0c             	mov    0xc(%di),%ax
    837f:	66 89 55 fc          	mov    %edx,-0x4(%di)
    8383:	88 45 f8             	mov    %al,-0x8(%di)
    __asm__ __volatile__("outb %[v],%[p]" : : [v]"a"(val), [p]"d"(port));
    8386:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    838a:	0f b7 55 fc          	movzww -0x4(%di),%dx
    838e:	ee                   	out    %al,(%dx)
}
    838f:	90                   	nop
    8390:	c9                   	leave  
    8391:	c3                   	ret    

00008392 <read_disk>:
并将其写入缓冲区。
与中断方式相比，直接使用IO端口读取磁盘数据的方式更加底层，不依赖于中断处理程序。
这使得它可以更加精确地控制和管理磁盘读取过程。但同时，这种方式需要直接操作硬件资源和IO端口，
对于不同的操作系统和硬件环境可能会有所不同，并且需要更多的注意和适配。
*/
static void read_disk(int sector,int sector_count,uint8_t*buffer){
    8392:	55                   	push   %bp
    8393:	89 e5                	mov    %sp,%bp
    8395:	53                   	push   %bx
    8396:	83 ec 10             	sub    $0x10,%sp
    outb(0x1F6,0xE0);
    8399:	68 e0 00             	push   $0xe0
    839c:	00 00                	add    %al,(%bx,%si)
    839e:	68 f6 01             	push   $0x1f6
    83a1:	00 00                	add    %al,(%bx,%si)
    83a3:	e8 cb ff             	call   8371 <inw+0x1d>
    83a6:	ff                   	(bad)  
    83a7:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F2,(uint8_t)(sector_count>>8));
    83ab:	8b 45 0c             	mov    0xc(%di),%ax
    83ae:	c1 f8 08             	sar    $0x8,%ax
    83b1:	0f b6 c0             	movzbw %al,%ax
    83b4:	50                   	push   %ax
    83b5:	68 f2 01             	push   $0x1f2
    83b8:	00 00                	add    %al,(%bx,%si)
    83ba:	e8 b4 ff             	call   8371 <inw+0x1d>
    83bd:	ff                   	(bad)  
    83be:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3,(uint8_t)(sector>>24));
    83c2:	8b 45 08             	mov    0x8(%di),%ax
    83c5:	c1 e8 18             	shr    $0x18,%ax
    83c8:	50                   	push   %ax
    83c9:	68 f3 01             	push   $0x1f3
    83cc:	00 00                	add    %al,(%bx,%si)
    83ce:	e8 a0 ff             	call   8371 <inw+0x1d>
    83d1:	ff                   	(bad)  
    83d2:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4,0);
    83d6:	6a 00                	push   $0x0
    83d8:	68 f4 01             	push   $0x1f4
    83db:	00 00                	add    %al,(%bx,%si)
    83dd:	e8 91 ff             	call   8371 <inw+0x1d>
    83e0:	ff                   	(bad)  
    83e1:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5,(uint8_t)0);
    83e5:	6a 00                	push   $0x0
    83e7:	68 f5 01             	push   $0x1f5
    83ea:	00 00                	add    %al,(%bx,%si)
    83ec:	e8 82 ff             	call   8371 <inw+0x1d>
    83ef:	ff                   	(bad)  
    83f0:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F2,(uint8_t)(sector_count));
    83f4:	8b 45 0c             	mov    0xc(%di),%ax
    83f7:	0f b6 c0             	movzbw %al,%ax
    83fa:	50                   	push   %ax
    83fb:	68 f2 01             	push   $0x1f2
    83fe:	00 00                	add    %al,(%bx,%si)
    8400:	e8 6e ff             	call   8371 <inw+0x1d>
    8403:	ff                   	(bad)  
    8404:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3,(uint8_t)(sector));
    8408:	8b 45 08             	mov    0x8(%di),%ax
    840b:	0f b6 c0             	movzbw %al,%ax
    840e:	50                   	push   %ax
    840f:	68 f3 01             	push   $0x1f3
    8412:	00 00                	add    %al,(%bx,%si)
    8414:	e8 5a ff             	call   8371 <inw+0x1d>
    8417:	ff                   	(bad)  
    8418:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4,(uint8_t)(sector>>8));
    841c:	8b 45 08             	mov    0x8(%di),%ax
    841f:	c1 f8 08             	sar    $0x8,%ax
    8422:	0f b6 c0             	movzbw %al,%ax
    8425:	50                   	push   %ax
    8426:	68 f4 01             	push   $0x1f4
    8429:	00 00                	add    %al,(%bx,%si)
    842b:	e8 43 ff             	call   8371 <inw+0x1d>
    842e:	ff                   	(bad)  
    842f:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5,(uint8_t)(sector>>16));
    8433:	8b 45 08             	mov    0x8(%di),%ax
    8436:	c1 f8 10             	sar    $0x10,%ax
    8439:	0f b6 c0             	movzbw %al,%ax
    843c:	50                   	push   %ax
    843d:	68 f5 01             	push   $0x1f5
    8440:	00 00                	add    %al,(%bx,%si)
    8442:	e8 2c ff             	call   8371 <inw+0x1d>
    8445:	ff                   	(bad)  
    8446:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F7,(uint8_t)0x24);
    844a:	6a 24                	push   $0x24
    844c:	68 f7 01             	push   $0x1f7
    844f:	00 00                	add    %al,(%bx,%si)
    8451:	e8 1d ff             	call   8371 <inw+0x1d>
    8454:	ff                   	(bad)  
    8455:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    uint16_t*data_buffer=(uint16_t*)buffer;
    8459:	8b 45 10             	mov    0x10(%di),%ax
    845c:	89 45 f8             	mov    %ax,-0x8(%di)
    while(sector_count-->0){
    845f:	eb 3d                	jmp    849e <read_disk+0x10c>
        while((inb(0x1F7)&0x80==0)){}
    8461:	90                   	nop
    8462:	68 f7 01             	push   $0x1f7
    8465:	00 00                	add    %al,(%bx,%si)
    8467:	e8 cb fe             	call   8335 <loader_entry+0x21>
    846a:	ff                   	(bad)  
    846b:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
        for(int i=0;i<SECTOR_SIZE/2;i++){
    846f:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    8474:	00 00                	add    %al,(%bx,%si)
    8476:	eb 1d                	jmp    8495 <read_disk+0x103>
            *data_buffer++=inw(0x1F0);
    8478:	8b 5d f8             	mov    -0x8(%di),%bx
    847b:	8d 43 02             	lea    0x2(%bp,%di),%ax
    847e:	89 45 f8             	mov    %ax,-0x8(%di)
    8481:	68 f0 01             	push   $0x1f0
    8484:	00 00                	add    %al,(%bx,%si)
    8486:	e8 c9 fe             	call   8352 <inb+0x1b>
    8489:	ff                   	(bad)  
    848a:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    848e:	66 89 03             	mov    %eax,(%bp,%di)
    outb(0x1F7,(uint8_t)0x24);

    uint16_t*data_buffer=(uint16_t*)buffer;
    while(sector_count-->0){
        while((inb(0x1F7)&0x80==0)){}
        for(int i=0;i<SECTOR_SIZE/2;i++){
    8491:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    8495:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    849a:	00 00                	add    %al,(%bx,%si)
    849c:	7e da                	jle    8478 <read_disk+0xe6>
    outb(0x1F4,(uint8_t)(sector>>8));
    outb(0x1F5,(uint8_t)(sector>>16));
    outb(0x1F7,(uint8_t)0x24);

    uint16_t*data_buffer=(uint16_t*)buffer;
    while(sector_count-->0){
    849e:	8b 45 0c             	mov    0xc(%di),%ax
    84a1:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    84a4:	89 55 0c             	mov    %dx,0xc(%di)
    84a7:	85 c0                	test   %ax,%ax
    84a9:	7f b6                	jg     8461 <read_disk+0xcf>
        while((inb(0x1F7)&0x80==0)){}
        for(int i=0;i<SECTOR_SIZE/2;i++){
            *data_buffer++=inw(0x1F0);
        }
    }
}
    84ab:	90                   	nop
    84ac:	8b 5d fc             	mov    -0x4(%di),%bx
    84af:	c9                   	leave  
    84b0:	c3                   	ret    

000084b1 <reload_elf_file>:
static uint32_t reload_elf_file(uint8_t*file_buffer){
    84b1:	55                   	push   %bp
    84b2:	89 e5                	mov    %sp,%bp
    84b4:	83 ec 20             	sub    $0x20,%sp
    Elf32_Ehdr*elf_hdr=(Elf32_Ehdr*)file_buffer;
    84b7:	8b 45 08             	mov    0x8(%di),%ax
    84ba:	89 45 e8             	mov    %ax,-0x18(%di)
    if(elf_hdr->e_ident[0]!=0x7f || elf_hdr->e_ident[1]!='E' || elf_hdr->e_ident[2]!='L' 
    84bd:	8b 45 e8             	mov    -0x18(%di),%ax
    84c0:	0f b6 00             	movzbw (%bx,%si),%ax
    84c3:	3c 7f                	cmp    $0x7f,%al
    84c5:	75 21                	jne    84e8 <reload_elf_file+0x37>
    84c7:	8b 45 e8             	mov    -0x18(%di),%ax
    84ca:	0f b6 40 01          	movzbw 0x1(%bx,%si),%ax
    84ce:	3c 45                	cmp    $0x45,%al
    84d0:	75 16                	jne    84e8 <reload_elf_file+0x37>
    84d2:	8b 45 e8             	mov    -0x18(%di),%ax
    84d5:	0f b6 40 02          	movzbw 0x2(%bx,%si),%ax
    84d9:	3c 4c                	cmp    $0x4c,%al
    84db:	75 0b                	jne    84e8 <reload_elf_file+0x37>
    || elf_hdr->e_ident[3]!='F'){
    84dd:	8b 45 e8             	mov    -0x18(%di),%ax
    84e0:	0f b6 40 03          	movzbw 0x3(%bx,%si),%ax
    84e4:	3c 46                	cmp    $0x46,%al
    84e6:	74 0a                	je     84f2 <reload_elf_file+0x41>
        return 0;
    84e8:	b8 00 00             	mov    $0x0,%ax
    84eb:	00 00                	add    %al,(%bx,%si)
    84ed:	e9 d7 00             	jmp    85c7 <reload_elf_file+0x116>
    84f0:	00 00                	add    %al,(%bx,%si)
    }
    for(int i=0;i<elf_hdr->e_phnum;i++){
    84f2:	c7 45 fc 00 00       	movw   $0x0,-0x4(%di)
    84f7:	00 00                	add    %al,(%bx,%si)
    84f9:	e9 b2 00             	jmp    85ae <reload_elf_file+0xfd>
    84fc:	00 00                	add    %al,(%bx,%si)
        Elf32_Phdr*phdr=(Elf32_Phdr*)(file_buffer+elf_hdr->e_phoff)+i;
    84fe:	8b 45 e8             	mov    -0x18(%di),%ax
    8501:	8b 40 1c             	mov    0x1c(%bx,%si),%ax
    8504:	8b 55 fc             	mov    -0x4(%di),%dx
    8507:	c1 e2 05             	shl    $0x5,%dx
    850a:	01 c2                	add    %ax,%dx
    850c:	8b 45 08             	mov    0x8(%di),%ax
    850f:	01 d0                	add    %dx,%ax
    8511:	89 45 e4             	mov    %ax,-0x1c(%di)
        if(phdr->p_type!=PT_LOAD){
    8514:	8b 45 e4             	mov    -0x1c(%di),%ax
    8517:	8b 00                	mov    (%bx,%si),%ax
    8519:	83 f8 01             	cmp    $0x1,%ax
    851c:	0f 85 89 00          	jne    85a9 <reload_elf_file+0xf8>
    8520:	00 00                	add    %al,(%bx,%si)
            continue;
        }
        uint8_t *dest_addr=(uint8_t*)phdr->p_paddr;
    8522:	8b 45 e4             	mov    -0x1c(%di),%ax
    8525:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8528:	89 45 f8             	mov    %ax,-0x8(%di)
        uint8_t *src_addr=phdr->p_offset+file_buffer;
    852b:	8b 45 e4             	mov    -0x1c(%di),%ax
    852e:	8b 50 04             	mov    0x4(%bx,%si),%dx
    8531:	8b 45 08             	mov    0x8(%di),%ax
    8534:	01 d0                	add    %dx,%ax
    8536:	89 45 f4             	mov    %ax,-0xc(%di)
        for(int j=0;j<phdr->p_filesz;j++){
    8539:	c7 45 f0 00 00       	movw   $0x0,-0x10(%di)
    853e:	00 00                	add    %al,(%bx,%si)
    8540:	eb 1b                	jmp    855d <reload_elf_file+0xac>
            *dest_addr++=*src_addr++;
    8542:	8b 45 f8             	mov    -0x8(%di),%ax
    8545:	8d 50 01             	lea    0x1(%bx,%si),%dx
    8548:	89 55 f8             	mov    %dx,-0x8(%di)
    854b:	8b 55 f4             	mov    -0xc(%di),%dx
    854e:	8d 4a 01             	lea    0x1(%bp,%si),%cx
    8551:	89 4d f4             	mov    %cx,-0xc(%di)
    8554:	0f b6 12             	movzbw (%bp,%si),%dx
    8557:	88 10                	mov    %dl,(%bx,%si)
        if(phdr->p_type!=PT_LOAD){
            continue;
        }
        uint8_t *dest_addr=(uint8_t*)phdr->p_paddr;
        uint8_t *src_addr=phdr->p_offset+file_buffer;
        for(int j=0;j<phdr->p_filesz;j++){
    8559:	83 45 f0 01          	addw   $0x1,-0x10(%di)
    855d:	8b 45 e4             	mov    -0x1c(%di),%ax
    8560:	8b 50 10             	mov    0x10(%bx,%si),%dx
    8563:	8b 45 f0             	mov    -0x10(%di),%ax
    8566:	39 c2                	cmp    %ax,%dx
    8568:	77 d8                	ja     8542 <reload_elf_file+0x91>
            *dest_addr++=*src_addr++;
        }
        dest_addr=(uint8_t*)phdr->p_paddr+phdr->p_filesz;
    856a:	8b 45 e4             	mov    -0x1c(%di),%ax
    856d:	8b 50 10             	mov    0x10(%bx,%si),%dx
    8570:	8b 45 e4             	mov    -0x1c(%di),%ax
    8573:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8576:	01 d0                	add    %dx,%ax
    8578:	89 45 f8             	mov    %ax,-0x8(%di)
        for(int j=0;j<phdr->p_memsz-phdr->p_filesz;j++){
    857b:	c7 45 ec 00 00       	movw   $0x0,-0x14(%di)
    8580:	00 00                	add    %al,(%bx,%si)
    8582:	eb 10                	jmp    8594 <reload_elf_file+0xe3>
            *dest_addr++=0;
    8584:	8b 45 f8             	mov    -0x8(%di),%ax
    8587:	8d 50 01             	lea    0x1(%bx,%si),%dx
    858a:	89 55 f8             	mov    %dx,-0x8(%di)
    858d:	c6 00 00             	movb   $0x0,(%bx,%si)
        uint8_t *src_addr=phdr->p_offset+file_buffer;
        for(int j=0;j<phdr->p_filesz;j++){
            *dest_addr++=*src_addr++;
        }
        dest_addr=(uint8_t*)phdr->p_paddr+phdr->p_filesz;
        for(int j=0;j<phdr->p_memsz-phdr->p_filesz;j++){
    8590:	83 45 ec 01          	addw   $0x1,-0x14(%di)
    8594:	8b 45 e4             	mov    -0x1c(%di),%ax
    8597:	8b 50 14             	mov    0x14(%bx,%si),%dx
    859a:	8b 45 e4             	mov    -0x1c(%di),%ax
    859d:	8b 40 10             	mov    0x10(%bx,%si),%ax
    85a0:	29 c2                	sub    %ax,%dx
    85a2:	8b 45 ec             	mov    -0x14(%di),%ax
    85a5:	39 c2                	cmp    %ax,%dx
    85a7:	77 db                	ja     8584 <reload_elf_file+0xd3>
    85a9:	eb 01                	jmp    85ac <reload_elf_file+0xfb>
        return 0;
    }
    for(int i=0;i<elf_hdr->e_phnum;i++){
        Elf32_Phdr*phdr=(Elf32_Phdr*)(file_buffer+elf_hdr->e_phoff)+i;
        if(phdr->p_type!=PT_LOAD){
            continue;
    85ab:	90                   	nop
    Elf32_Ehdr*elf_hdr=(Elf32_Ehdr*)file_buffer;
    if(elf_hdr->e_ident[0]!=0x7f || elf_hdr->e_ident[1]!='E' || elf_hdr->e_ident[2]!='L' 
    || elf_hdr->e_ident[3]!='F'){
        return 0;
    }
    for(int i=0;i<elf_hdr->e_phnum;i++){
    85ac:	83 45 fc 01          	addw   $0x1,-0x4(%di)
    85b0:	8b 45 e8             	mov    -0x18(%di),%ax
    85b3:	0f b7 40 2c          	movzww 0x2c(%bx,%si),%ax
    85b7:	0f b7 c0             	movzww %ax,%ax
    85ba:	3b 45 fc             	cmp    -0x4(%di),%ax
    85bd:	0f 8f 3b ff          	jg     84fc <reload_elf_file+0x4b>
    85c1:	ff                   	(bad)  
    85c2:	ff 8b 45 e8          	decw   -0x17bb(%bp,%di)
        for(int j=0;j<phdr->p_memsz-phdr->p_filesz;j++){
            *dest_addr++=0;
        }
        
    }
    return elf_hdr->e_entry;
    85c6:	8b 40 18             	mov    0x18(%bx,%si),%ax
}
    85c9:	c9                   	leave  
    85ca:	c3                   	ret    

000085cb <die>:
static void die(){
    85cb:	55                   	push   %bp
    85cc:	89 e5                	mov    %sp,%bp
    for(;;){}
    85ce:	eb fe                	jmp    85ce <die+0x3>

000085d0 <load_kernel>:
}
void load_kernel(void){
    85d0:	55                   	push   %bp
    85d1:	89 e5                	mov    %sp,%bp
    85d3:	83 ec 18             	sub    $0x18,%sp
    //读取磁盘
    read_disk(100,500,(uint8_t*)SYS_KERNEL_LOAD_ADDR);
    85d6:	68 00 00             	push   $0x0
    85d9:	10 00                	adc    %al,(%bx,%si)
    85db:	68 f4 01             	push   $0x1f4
    85de:	00 00                	add    %al,(%bx,%si)
    85e0:	6a 64                	push   $0x64
    85e2:	e8 ab fd             	call   8390 <outb+0x1d>
    85e5:	ff                   	(bad)  
    85e6:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)
    uint32_t kernel_entry=reload_elf_file((uint8_t*)SYS_KERNEL_LOAD_ADDR);
    85ea:	68 00 00             	push   $0x0
    85ed:	10 00                	adc    %al,(%bx,%si)
    85ef:	e8 bd fe             	call   84af <read_disk+0x11d>
    85f2:	ff                   	(bad)  
    85f3:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    85f7:	89 45 f4             	mov    %ax,-0xc(%di)
    if(kernel_entry==0){
    85fa:	83 7d f4 00          	cmpw   $0x0,-0xc(%di)
    85fe:	75 0a                	jne    860a <load_kernel+0x3a>
        die(-1);
    8600:	6a ff                	push   $0xffff
    8602:	e8 c4 ff             	call   85c9 <reload_elf_file+0x118>
    8605:	ff                   	(bad)  
    8606:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    }
    ((void(*)(boot_info_t*))kernel_entry)(&boot_info);
    860a:	8b 45 f4             	mov    -0xc(%di),%ax
    860d:	83 ec 0c             	sub    $0xc,%sp
    8610:	68 80 96             	push   $0x9680
    8613:	00 00                	add    %al,(%bx,%si)
    8615:	ff d0                	call   *%ax
    8617:	83 c4 10             	add    $0x10,%sp
    861a:	90                   	nop
    861b:	c9                   	leave  
    861c:	c3                   	ret    
