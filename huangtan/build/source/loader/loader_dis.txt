
/home/ziya/huangtan/lab/os/os_leenux/diy-x86os/code/huangtan/build/source/loader/loader.elf：     文件格式 elf32-i386
/home/ziya/huangtan/lab/os/os_leenux/diy-x86os/code/huangtan/build/source/loader/loader.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00008000

程序头：
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000660 memsz 0x00000660 flags r-x
    LOAD off    0x00001660 vaddr 0x00009660 paddr 0x00009660 align 2**12
         filesz 0x00000018 memsz 0x00000074 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000619  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000047  00008619  00008619  00001619  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00009660  00009660  00001660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  00009680  00009680  00001678  2**5
                  ALLOC
  4 .comment      00000035  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000016b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000900  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000305  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ad  00000000  00000000  00002315  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000026c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000435  00000000  00000000  0000292c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002d61  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
00008619 l    d  .rodata	00000000 .rodata
00009660 l    d  .data	00000000 .data
00009680 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000002a inb
00008042 l     F .text	0000002d outb
0000806f l     F .text	0000000b cli
0000807a l     F .text	00000036 lgdt
000080b0 l     F .text	0000001a read_cr0
000080ca l     F .text	00000012 write_cr0
000080dc l     F .text	0000002b far_jump
00008107 l     F .text	0000003e show_msg
00008145 l     F .text	00000139 detece_momery
0000827e l     F .text	00000092 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008333 l     F .text	0000001d inb
00008350 l     F .text	0000001f inw
0000836f l     F .text	0000001f outb
0000838e l     F .text	0000011f read_disk
000084ad l     F .text	0000011a reload_elf_file
000085c7 l     F .text	00000005 die
00008310 g     F .text	00000023 loader_entry
00009660 g     O .data	00000018 gdt_table
000085cc g     F .text	0000004d load_kernel
00009680 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
00009678 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
00009678 g       .data	00000000 _edata
000096d4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
    .text
    .extern loader_entry
_start:
    //0x8000 存放在0x8000的第一条指令
    //沿用之前的寄存器状态
    jmp loader_entry
    8000:	e9 0d 03             	jmp    8310 <loader_entry>

00008003 <protect_mode_entry>:
    .code32
    .text
    .global protect_mode_entry
    .extern load_kernel
protect_mode_entry:
    mov $16,%ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
    mov %ax,%ds 
    mov %ax,%es
    8009:	8e c0                	mov    %ax,%es
    mov %ax,%fs
    800b:	8e e0                	mov    %ax,%fs
    mov %ax,%gs
    800d:	8e e8                	mov    %ax,%gs
    mov %ax,%ss
    800f:	8e d0                	mov    %ax,%ss
    //长跳转进入内核加载
    8011:	ea cc 85 00 00       	ljmp   $0x0,$0x85cc
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <inb>:
//一些简单汇编的封装
#ifndef CPU_INSTR_H
#define CPU_INSTR_H
#include"types.h"
static inline uint8_t inb(uint16_t port){
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    801d:	66 83 ec 14          	sub    $0x14,%esp
    8021:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8026:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t ret;
    __asm__ __volatile__("inb %[p], %[v]" : [v]"=a"(ret) : [p]"d"(port));
    802a:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8030:	66 89 c2             	mov    %eax,%edx
    8033:	ec                   	in     (%dx),%al
    8034:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    //"d"表示使用通用寄存器EDX来传递输入操作数
    //"a"表示将结果存储在寄存器EAX
    return ret;
    8038:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    803e:	66 c9                	leavel 
    8040:	66 c3                	retl   

00008042 <outb>:
static inline uint16_t inw(uint16_t port){
    uint16_t ret;
    __asm__ __volatile__("in %1, %0" : "=a" (ret) : "dN" (port));
    return ret;
}
static inline void outb(uint16_t port, uint8_t val){
    8042:	66 55                	push   %ebp
    8044:	66 89 e5             	mov    %esp,%ebp
    8047:	66 83 ec 08          	sub    $0x8,%esp
    804b:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    8050:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8055:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8059:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" : : [v]"a"(val), [p]"d"(port));
    805d:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8063:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8069:	ee                   	out    %al,(%dx)
}
    806a:	90                   	nop
    806b:	66 c9                	leavel 
    806d:	66 c3                	retl   

0000806f <cli>:
static inline void cli(){
    806f:	66 55                	push   %ebp
    8071:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli");
    8074:	fa                   	cli    
}
    8075:	90                   	nop
    8076:	66 5d                	pop    %ebp
    8078:	66 c3                	retl   

0000807a <lgdt>:
static inline uint32_t rdtsc(){
    uint32_t ret;
    __asm__ __volatile__("rdtsc" : "=a"(ret));
    return ret;
}
static inline void lgdt(uint32_t start,uint32_t size){
    807a:	66 55                	push   %ebp
    807c:	66 89 e5             	mov    %esp,%ebp
    807f:	66 83 ec 10          	sub    $0x10,%esp
    {
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    }gdt;
    gdt.limit=size-1;   
    8083:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8088:	66 83 e8 01          	sub    $0x1,%eax
    808c:	67 89 45 fa          	mov    %ax,-0x6(%ebp)
    gdt.start15_0=start&0xffff;
    8090:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8095:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.start31_16=(start>>16);
    8099:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    809e:	66 c1 e8 10          	shr    $0x10,%eax
    80a2:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    __asm__ __volatile__("lgdt %[g]" : : [g]"m"(gdt));
    80a6:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
    
}
    80ab:	90                   	nop
    80ac:	66 c9                	leavel 
    80ae:	66 c3                	retl   

000080b0 <read_cr0>:
    idt.limit=size-1;   
    idt.start15_0=start&0xffff;
    idt.start31_16=(start>>16);
    __asm__ __volatile__("lidt %0"::"m"(idt));
}
static inline uint32_t read_cr0(){
    80b0:	66 55                	push   %ebp
    80b2:	66 89 e5             	mov    %esp,%ebp
    80b5:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t ret;
    __asm__ __volatile__("mov %%cr0, %[v]" : [v]"=r"(ret));
    80b9:	0f 20 c0             	mov    %cr0,%eax
    80bc:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    return ret;
    80c1:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c6:	66 c9                	leavel 
    80c8:	66 c3                	retl   

000080ca <write_cr0>:
static inline void write_cr0(uint32_t val){
    80ca:	66 55                	push   %ebp
    80cc:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr0" : : [v]"r"(val));
    80cf:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d4:	0f 22 c0             	mov    %eax,%cr0
}
    80d7:	90                   	nop
    80d8:	66 5d                	pop    %ebp
    80da:	66 c3                	retl   

000080dc <far_jump>:
    return ret;
}
static inline void write_eflags(uint32_t val){
    __asm__ __volatile__("pushl %%eax; popfl" : : "a"(val));
}
static inline void far_jump(uint32_t selector,uint32_t offset){
    80dc:	66 55                	push   %ebp
    80de:	66 89 e5             	mov    %esp,%ebp
    80e1:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t addr[]={offset,selector};
    80e5:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ea:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80ef:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f4:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    //*(%[a])：这是一个间接寻址（indirect addressing）表达式。*表示要跳转到寻址结果指向的地址。(%[a])表示使用变量 a 的值作为内存地址进行间接寻址
    __asm__ __volatile__("ljmpl *(%[a])" : : [a]"r"(addr));
    80f9:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    80fe:	67 66 ff 28          	ljmpl  *(%eax)
}
    8102:	90                   	nop
    8103:	66 c9                	leavel 
    8105:	66 c3                	retl   

00008107 <show_msg>:
        inc si           ; 增加指针，以便读取下一个字符
        jmp print_string ; 继续输出字符
    finished:
        ret
        */
static void show_msg(const char*msg){
    8107:	66 55                	push   %ebp
    8109:	66 89 e5             	mov    %esp,%ebp
    810c:	66 83 ec 10          	sub    $0x10,%esp
    
    const char *c=msg;
    8110:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8115:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    while(*c){
    811a:	eb 16                	jmp    8132 <show_msg+0x2b>
        __asm__ __volatile__("mov $0xe, %%ah\n\t"
                             "mov %[ch], %%al\n\t"
                             "int $0x10"::[ch]"r"(*c));
    811c:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
    8121:	67 66 0f b6 00       	movzbl (%eax),%eax
        */
static void show_msg(const char*msg){
    
    const char *c=msg;
    while(*c){
        __asm__ __volatile__("mov $0xe, %%ah\n\t"
    8126:	b4 0e                	mov    $0xe,%ah
    8128:	88 c0                	mov    %al,%al
    812a:	cd 10                	int    $0x10
                             "mov %[ch], %%al\n\t"
                             "int $0x10"::[ch]"r"(*c));
        c++;
    812c:	67 66 83 45 fc 01    	addl   $0x1,-0x4(%ebp)
        ret
        */
static void show_msg(const char*msg){
    
    const char *c=msg;
    while(*c){
    8132:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
    8137:	67 66 0f b6 00       	movzbl (%eax),%eax
    813c:	84 c0                	test   %al,%al
    813e:	75 dc                	jne    811c <show_msg+0x15>
        __asm__ __volatile__("mov $0xe, %%ah\n\t"
                             "mov %[ch], %%al\n\t"
                             "int $0x10"::[ch]"r"(*c));
        c++;
    }
}
    8140:	90                   	nop
    8141:	66 c9                	leavel 
    8143:	66 c3                	retl   

00008145 <detece_momery>:
		// process memory map
		[...]
	}
}
*/
static void detece_momery(void){
    8145:	66 55                	push   %ebp
    8147:	66 89 e5             	mov    %esp,%ebp
    814a:	66 57                	push   %edi
    814c:	66 56                	push   %esi
    814e:	66 53                	push   %ebx
    8150:	66 83 ec 30          	sub    $0x30,%esp
    uint32_t contID=0;
    8154:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    815b:	00 00 
    SAMP_entry_t smap_entry;
    int signature, bytes;
    show_msg("Detecting memory map...");
    815d:	66 68 19 86 00 00    	pushl  $0x8619
    8163:	66 e8 9e ff ff ff    	calll  8107 <show_msg>
    8169:	66 83 c4 04          	add    $0x4,%esp
    boot_info.ram_region_count=0;
    816d:	66 c7 06 d0 96 00 00 	movl   $0x0,-0x6930
    8174:	00 00 
    for(int i=0;i<BOOT_RAM_REGION_MAX;i++){
    8176:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    817d:	00 00 
    817f:	e9 d0 00             	jmp    8252 <detece_momery+0x10d>
        SAMP_entry_t* entry=&smap_entry;
    8182:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8187:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)
        __asm__ __volatile__ ("int  $0x15" 
    818c:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8192:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    8197:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    819d:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a3:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81a8:	66 89 f7             	mov    %esi,%edi
    81ab:	cd 15                	int    $0x15
    81ad:	66 89 da             	mov    %ebx,%edx
    81b0:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81b5:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81ba:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
				: "=a"(signature), "=c"(bytes), "=b"(contID)
				: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));

        if (signature != 0x534D4150){
    81bf:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81c6:	4d 53 
    81c8:	74 13                	je     81dd <detece_momery+0x98>
            show_msg("failed.\r\n");
    81ca:	66 68 31 86 00 00    	pushl  $0x8631
    81d0:	66 e8 31 ff ff ff    	calll  8107 <show_msg>
    81d6:	66 83 c4 04          	add    $0x4,%esp
            return ;
    81da:	e9 92 00             	jmp    826f <detece_momery+0x12a>
        }

        if(bytes>20&&(entry->ACPI&0x01)==0){
    81dd:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e3:	7e 13                	jle    81f8 <detece_momery+0xb3>
    81e5:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81ea:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81ef:	66 83 e0 01          	and    $0x1,%eax
    81f3:	66 85 c0             	test   %eax,%eax
    81f6:	74 53                	je     824b <detece_momery+0x106>
            continue;
        }
        if(entry->Type==1){
    81f8:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81fd:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8202:	66 83 f8 01          	cmp    $0x1,%eax
    8206:	75 39                	jne    8241 <detece_momery+0xfc>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start=entry->BaseL;
    8208:	66 a1 d0 96          	mov    0x96d0,%eax
    820c:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8211:	67 66 8b 12          	mov    (%edx),%edx
    8215:	67 66 89 14 c5 80 96 	mov    %edx,0x9680(,%eax,8)
    821c:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].start=entry->LengthL;
    821e:	66 a1 d0 96          	mov    0x96d0,%eax
    8222:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8227:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    822c:	67 66 89 14 c5 80 96 	mov    %edx,0x9680(,%eax,8)
    8233:	00 00 
            boot_info.ram_region_count++;
    8235:	66 a1 d0 96          	mov    0x96d0,%eax
    8239:	66 83 c0 01          	add    $0x1,%eax
    823d:	66 a3 d0 96          	mov    %eax,0x96d0
            
        }
        if(contID==0){
    8241:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8247:	74 15                	je     825e <detece_momery+0x119>
    8249:	eb 01                	jmp    824c <detece_momery+0x107>
            show_msg("failed.\r\n");
            return ;
        }

        if(bytes>20&&(entry->ACPI&0x01)==0){
            continue;
    824b:	90                   	nop
    uint32_t contID=0;
    SAMP_entry_t smap_entry;
    int signature, bytes;
    show_msg("Detecting memory map...");
    boot_info.ram_region_count=0;
    for(int i=0;i<BOOT_RAM_REGION_MAX;i++){
    824c:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    8252:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8258:	0f 8e 26 ff          	jle    8182 <detece_momery+0x3d>
    825c:	eb 01                	jmp    825f <detece_momery+0x11a>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start=entry->LengthL;
            boot_info.ram_region_count++;
            
        }
        if(contID==0){
            break;
    825e:	90                   	nop
        }
    }
    show_msg("huang tan OS done.\r\n");
    825f:	66 68 3b 86 00 00    	pushl  $0x863b
    8265:	66 e8 9c fe ff ff    	calll  8107 <show_msg>
    826b:	66 83 c4 04          	add    $0x4,%esp
    //show_msg("RAM regions: %d\r\n",boot_info.ram_region_count);
}
    826f:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8274:	66 5b                	pop    %ebx
    8276:	66 5e                	pop    %esi
    8278:	66 5f                	pop    %edi
    827a:	66 5d                	pop    %ebp
    827c:	66 c3                	retl   

0000827e <enter_protect_mode>:
    {0,0,0,0},
    {0xFFFF,0,0x9A00,0x00CF},
    {0xFFFF,0,0x9200,0x00CF},
};
static void enter_protect_mode()
{   
    827e:	66 55                	push   %ebp
    8280:	66 89 e5             	mov    %esp,%ebp
    8283:	66 83 ec 10          	sub    $0x10,%esp
    cli();
    8287:	66 e8 e2 fd ff ff    	calll  806f <cli>
    //开启A20中线使得可以访问1M以上的地址
    uint8_t v=inb(0x92);
    828d:	66 68 92 00 00 00    	pushl  $0x92
    8293:	66 e8 7f fd ff ff    	calll  8018 <inb>
    8299:	66 83 c4 04          	add    $0x4,%esp
    829d:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92,v|2);
    82a1:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82a7:	66 83 c8 02          	or     $0x2,%eax
    82ab:	66 0f b6 c0          	movzbl %al,%eax
    82af:	66 50                	push   %eax
    82b1:	66 68 92 00 00 00    	pushl  $0x92
    82b7:	66 e8 85 fd ff ff    	calll  8042 <outb>
    82bd:	66 83 c4 08          	add    $0x8,%esp
    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
    82c1:	66 b8 60 96 00 00    	mov    $0x9660,%eax
    82c7:	66 6a 18             	pushl  $0x18
    82ca:	66 50                	push   %eax
    82cc:	66 e8 a8 fd ff ff    	calll  807a <lgdt>
    82d2:	66 83 c4 08          	add    $0x8,%esp
    //打开保护模式
    uint32_t cr0=read_cr0();
    82d6:	66 e8 d4 fd ff ff    	calll  80b0 <read_cr0>
    82dc:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(cr0|1<<0);
    82e1:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82e6:	66 83 c8 01          	or     $0x1,%eax
    82ea:	66 50                	push   %eax
    82ec:	66 e8 d8 fd ff ff    	calll  80ca <write_cr0>
    82f2:	66 83 c4 04          	add    $0x4,%esp
    //长跳转进入保护模式，使用长跳转清空流水线
    far_jump(8,(uint32_t)protect_mode_entry);
    82f6:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    82fc:	66 50                	push   %eax
    82fe:	66 6a 08             	pushl  $0x8
    8301:	66 e8 d5 fd ff ff    	calll  80dc <far_jump>
    8307:	66 83 c4 08          	add    $0x8,%esp
}
    830b:	90                   	nop
    830c:	66 c9                	leavel 
    830e:	66 c3                	retl   

00008310 <loader_entry>:
void loader_entry(void){
    8310:	66 55                	push   %ebp
    8312:	66 89 e5             	mov    %esp,%ebp
    show_msg("Hello, World!\r\n");
    8315:	66 68 50 86 00 00    	pushl  $0x8650
    831b:	66 e8 e6 fd ff ff    	calll  8107 <show_msg>
    8321:	66 83 c4 04          	add    $0x4,%esp
    detece_momery();
    8325:	66 e8 1a fe ff ff    	calll  8145 <detece_momery>
    enter_protect_mode();
    832b:	66 e8 4d ff ff ff    	calll  827e <enter_protect_mode>
    for(;;){}
    8331:	eb fe                	jmp    8331 <loader_entry+0x21>

00008333 <inb>:
//一些简单汇编的封装
#ifndef CPU_INSTR_H
#define CPU_INSTR_H
#include"types.h"
static inline uint8_t inb(uint16_t port){
    8333:	55                   	push   %bp
    8334:	89 e5                	mov    %sp,%bp
    8336:	83 ec 14             	sub    $0x14,%sp
    8339:	8b 45 08             	mov    0x8(%di),%ax
    833c:	66 89 45 ec          	mov    %eax,-0x14(%di)
    uint8_t ret;
    __asm__ __volatile__("inb %[p], %[v]" : [v]"=a"(ret) : [p]"d"(port));
    8340:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8344:	89 c2                	mov    %ax,%dx
    8346:	ec                   	in     (%dx),%al
    8347:	88 45 ff             	mov    %al,-0x1(%di)
    //"d"表示使用通用寄存器EDX来传递输入操作数
    //"a"表示将结果存储在寄存器EAX
    return ret;
    834a:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    834e:	c9                   	leave  
    834f:	c3                   	ret    

00008350 <inw>:
static inline uint16_t inw(uint16_t port){
    8350:	55                   	push   %bp
    8351:	89 e5                	mov    %sp,%bp
    8353:	83 ec 14             	sub    $0x14,%sp
    8356:	8b 45 08             	mov    0x8(%di),%ax
    8359:	66 89 45 ec          	mov    %eax,-0x14(%di)
    uint16_t ret;
    __asm__ __volatile__("in %1, %0" : "=a" (ret) : "dN" (port));
    835d:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8361:	89 c2                	mov    %ax,%dx
    8363:	66 ed                	in     (%dx),%eax
    8365:	66 89 45 fe          	mov    %eax,-0x2(%di)
    return ret;
    8369:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    836d:	c9                   	leave  
    836e:	c3                   	ret    

0000836f <outb>:
static inline void outb(uint16_t port, uint8_t val){
    836f:	55                   	push   %bp
    8370:	89 e5                	mov    %sp,%bp
    8372:	83 ec 08             	sub    $0x8,%sp
    8375:	8b 55 08             	mov    0x8(%di),%dx
    8378:	8b 45 0c             	mov    0xc(%di),%ax
    837b:	66 89 55 fc          	mov    %edx,-0x4(%di)
    837f:	88 45 f8             	mov    %al,-0x8(%di)
    __asm__ __volatile__("outb %[v],%[p]" : : [v]"a"(val), [p]"d"(port));
    8382:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    8386:	0f b7 55 fc          	movzww -0x4(%di),%dx
    838a:	ee                   	out    %al,(%dx)
}
    838b:	90                   	nop
    838c:	c9                   	leave  
    838d:	c3                   	ret    

0000838e <read_disk>:
并将其写入缓冲区。
与中断方式相比，直接使用IO端口读取磁盘数据的方式更加底层，不依赖于中断处理程序。
这使得它可以更加精确地控制和管理磁盘读取过程。但同时，这种方式需要直接操作硬件资源和IO端口，
对于不同的操作系统和硬件环境可能会有所不同，并且需要更多的注意和适配。
*/
static void read_disk(int sector,int sector_count,uint8_t*buffer){
    838e:	55                   	push   %bp
    838f:	89 e5                	mov    %sp,%bp
    8391:	53                   	push   %bx
    8392:	83 ec 10             	sub    $0x10,%sp
    outb(0x1F6,0xE0);
    8395:	68 e0 00             	push   $0xe0
    8398:	00 00                	add    %al,(%bx,%si)
    839a:	68 f6 01             	push   $0x1f6
    839d:	00 00                	add    %al,(%bx,%si)
    839f:	e8 cb ff             	call   836d <inw+0x1d>
    83a2:	ff                   	(bad)  
    83a3:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F2,(uint8_t)(sector_count>>8));
    83a7:	8b 45 0c             	mov    0xc(%di),%ax
    83aa:	c1 f8 08             	sar    $0x8,%ax
    83ad:	0f b6 c0             	movzbw %al,%ax
    83b0:	50                   	push   %ax
    83b1:	68 f2 01             	push   $0x1f2
    83b4:	00 00                	add    %al,(%bx,%si)
    83b6:	e8 b4 ff             	call   836d <inw+0x1d>
    83b9:	ff                   	(bad)  
    83ba:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3,(uint8_t)(sector>>24));
    83be:	8b 45 08             	mov    0x8(%di),%ax
    83c1:	c1 e8 18             	shr    $0x18,%ax
    83c4:	50                   	push   %ax
    83c5:	68 f3 01             	push   $0x1f3
    83c8:	00 00                	add    %al,(%bx,%si)
    83ca:	e8 a0 ff             	call   836d <inw+0x1d>
    83cd:	ff                   	(bad)  
    83ce:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4,0);
    83d2:	6a 00                	push   $0x0
    83d4:	68 f4 01             	push   $0x1f4
    83d7:	00 00                	add    %al,(%bx,%si)
    83d9:	e8 91 ff             	call   836d <inw+0x1d>
    83dc:	ff                   	(bad)  
    83dd:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5,(uint8_t)0);
    83e1:	6a 00                	push   $0x0
    83e3:	68 f5 01             	push   $0x1f5
    83e6:	00 00                	add    %al,(%bx,%si)
    83e8:	e8 82 ff             	call   836d <inw+0x1d>
    83eb:	ff                   	(bad)  
    83ec:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F2,(uint8_t)(sector_count));
    83f0:	8b 45 0c             	mov    0xc(%di),%ax
    83f3:	0f b6 c0             	movzbw %al,%ax
    83f6:	50                   	push   %ax
    83f7:	68 f2 01             	push   $0x1f2
    83fa:	00 00                	add    %al,(%bx,%si)
    83fc:	e8 6e ff             	call   836d <inw+0x1d>
    83ff:	ff                   	(bad)  
    8400:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3,(uint8_t)(sector));
    8404:	8b 45 08             	mov    0x8(%di),%ax
    8407:	0f b6 c0             	movzbw %al,%ax
    840a:	50                   	push   %ax
    840b:	68 f3 01             	push   $0x1f3
    840e:	00 00                	add    %al,(%bx,%si)
    8410:	e8 5a ff             	call   836d <inw+0x1d>
    8413:	ff                   	(bad)  
    8414:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4,(uint8_t)(sector>>8));
    8418:	8b 45 08             	mov    0x8(%di),%ax
    841b:	c1 f8 08             	sar    $0x8,%ax
    841e:	0f b6 c0             	movzbw %al,%ax
    8421:	50                   	push   %ax
    8422:	68 f4 01             	push   $0x1f4
    8425:	00 00                	add    %al,(%bx,%si)
    8427:	e8 43 ff             	call   836d <inw+0x1d>
    842a:	ff                   	(bad)  
    842b:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5,(uint8_t)(sector>>16));
    842f:	8b 45 08             	mov    0x8(%di),%ax
    8432:	c1 f8 10             	sar    $0x10,%ax
    8435:	0f b6 c0             	movzbw %al,%ax
    8438:	50                   	push   %ax
    8439:	68 f5 01             	push   $0x1f5
    843c:	00 00                	add    %al,(%bx,%si)
    843e:	e8 2c ff             	call   836d <inw+0x1d>
    8441:	ff                   	(bad)  
    8442:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F7,(uint8_t)0x24);
    8446:	6a 24                	push   $0x24
    8448:	68 f7 01             	push   $0x1f7
    844b:	00 00                	add    %al,(%bx,%si)
    844d:	e8 1d ff             	call   836d <inw+0x1d>
    8450:	ff                   	(bad)  
    8451:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    uint16_t*data_buffer=(uint16_t*)buffer;
    8455:	8b 45 10             	mov    0x10(%di),%ax
    8458:	89 45 f8             	mov    %ax,-0x8(%di)
    while(sector_count-->0){
    845b:	eb 3d                	jmp    849a <read_disk+0x10c>
        while((inb(0x1F7)&0x80==0)){}
    845d:	90                   	nop
    845e:	68 f7 01             	push   $0x1f7
    8461:	00 00                	add    %al,(%bx,%si)
    8463:	e8 cb fe             	call   8331 <loader_entry+0x21>
    8466:	ff                   	(bad)  
    8467:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
        for(int i=0;i<SECTOR_SIZE/2;i++){
    846b:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    8470:	00 00                	add    %al,(%bx,%si)
    8472:	eb 1d                	jmp    8491 <read_disk+0x103>
            *data_buffer++=inw(0x1F0);
    8474:	8b 5d f8             	mov    -0x8(%di),%bx
    8477:	8d 43 02             	lea    0x2(%bp,%di),%ax
    847a:	89 45 f8             	mov    %ax,-0x8(%di)
    847d:	68 f0 01             	push   $0x1f0
    8480:	00 00                	add    %al,(%bx,%si)
    8482:	e8 c9 fe             	call   834e <inb+0x1b>
    8485:	ff                   	(bad)  
    8486:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    848a:	66 89 03             	mov    %eax,(%bp,%di)
    outb(0x1F7,(uint8_t)0x24);

    uint16_t*data_buffer=(uint16_t*)buffer;
    while(sector_count-->0){
        while((inb(0x1F7)&0x80==0)){}
        for(int i=0;i<SECTOR_SIZE/2;i++){
    848d:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    8491:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    8496:	00 00                	add    %al,(%bx,%si)
    8498:	7e da                	jle    8474 <read_disk+0xe6>
    outb(0x1F4,(uint8_t)(sector>>8));
    outb(0x1F5,(uint8_t)(sector>>16));
    outb(0x1F7,(uint8_t)0x24);

    uint16_t*data_buffer=(uint16_t*)buffer;
    while(sector_count-->0){
    849a:	8b 45 0c             	mov    0xc(%di),%ax
    849d:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    84a0:	89 55 0c             	mov    %dx,0xc(%di)
    84a3:	85 c0                	test   %ax,%ax
    84a5:	7f b6                	jg     845d <read_disk+0xcf>
        while((inb(0x1F7)&0x80==0)){}
        for(int i=0;i<SECTOR_SIZE/2;i++){
            *data_buffer++=inw(0x1F0);
        }
    }
}
    84a7:	90                   	nop
    84a8:	8b 5d fc             	mov    -0x4(%di),%bx
    84ab:	c9                   	leave  
    84ac:	c3                   	ret    

000084ad <reload_elf_file>:
static uint32_t reload_elf_file(uint8_t*file_buffer){
    84ad:	55                   	push   %bp
    84ae:	89 e5                	mov    %sp,%bp
    84b0:	83 ec 20             	sub    $0x20,%sp
    Elf32_Ehdr*elf_hdr=(Elf32_Ehdr*)file_buffer;
    84b3:	8b 45 08             	mov    0x8(%di),%ax
    84b6:	89 45 e8             	mov    %ax,-0x18(%di)
    if(elf_hdr->e_ident[0]!=0x7f || elf_hdr->e_ident[1]!='E' || elf_hdr->e_ident[2]!='L' 
    84b9:	8b 45 e8             	mov    -0x18(%di),%ax
    84bc:	0f b6 00             	movzbw (%bx,%si),%ax
    84bf:	3c 7f                	cmp    $0x7f,%al
    84c1:	75 21                	jne    84e4 <reload_elf_file+0x37>
    84c3:	8b 45 e8             	mov    -0x18(%di),%ax
    84c6:	0f b6 40 01          	movzbw 0x1(%bx,%si),%ax
    84ca:	3c 45                	cmp    $0x45,%al
    84cc:	75 16                	jne    84e4 <reload_elf_file+0x37>
    84ce:	8b 45 e8             	mov    -0x18(%di),%ax
    84d1:	0f b6 40 02          	movzbw 0x2(%bx,%si),%ax
    84d5:	3c 4c                	cmp    $0x4c,%al
    84d7:	75 0b                	jne    84e4 <reload_elf_file+0x37>
    || elf_hdr->e_ident[3]!='F'){
    84d9:	8b 45 e8             	mov    -0x18(%di),%ax
    84dc:	0f b6 40 03          	movzbw 0x3(%bx,%si),%ax
    84e0:	3c 46                	cmp    $0x46,%al
    84e2:	74 0a                	je     84ee <reload_elf_file+0x41>
        return 0;
    84e4:	b8 00 00             	mov    $0x0,%ax
    84e7:	00 00                	add    %al,(%bx,%si)
    84e9:	e9 d7 00             	jmp    85c3 <reload_elf_file+0x116>
    84ec:	00 00                	add    %al,(%bx,%si)
    }
    for(int i=0;i<elf_hdr->e_phnum;i++){
    84ee:	c7 45 fc 00 00       	movw   $0x0,-0x4(%di)
    84f3:	00 00                	add    %al,(%bx,%si)
    84f5:	e9 b2 00             	jmp    85aa <reload_elf_file+0xfd>
    84f8:	00 00                	add    %al,(%bx,%si)
        Elf32_Phdr*phdr=(Elf32_Phdr*)(file_buffer+elf_hdr->e_phoff)+i;
    84fa:	8b 45 e8             	mov    -0x18(%di),%ax
    84fd:	8b 40 1c             	mov    0x1c(%bx,%si),%ax
    8500:	8b 55 fc             	mov    -0x4(%di),%dx
    8503:	c1 e2 05             	shl    $0x5,%dx
    8506:	01 c2                	add    %ax,%dx
    8508:	8b 45 08             	mov    0x8(%di),%ax
    850b:	01 d0                	add    %dx,%ax
    850d:	89 45 e4             	mov    %ax,-0x1c(%di)
        if(phdr->p_type!=PT_LOAD){
    8510:	8b 45 e4             	mov    -0x1c(%di),%ax
    8513:	8b 00                	mov    (%bx,%si),%ax
    8515:	83 f8 01             	cmp    $0x1,%ax
    8518:	0f 85 89 00          	jne    85a5 <reload_elf_file+0xf8>
    851c:	00 00                	add    %al,(%bx,%si)
            continue;
        }
        uint8_t *dest_addr=(uint8_t*)phdr->p_paddr;
    851e:	8b 45 e4             	mov    -0x1c(%di),%ax
    8521:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8524:	89 45 f8             	mov    %ax,-0x8(%di)
        uint8_t *src_addr=phdr->p_offset+file_buffer;
    8527:	8b 45 e4             	mov    -0x1c(%di),%ax
    852a:	8b 50 04             	mov    0x4(%bx,%si),%dx
    852d:	8b 45 08             	mov    0x8(%di),%ax
    8530:	01 d0                	add    %dx,%ax
    8532:	89 45 f4             	mov    %ax,-0xc(%di)
        for(int j=0;j<phdr->p_filesz;j++){
    8535:	c7 45 f0 00 00       	movw   $0x0,-0x10(%di)
    853a:	00 00                	add    %al,(%bx,%si)
    853c:	eb 1b                	jmp    8559 <reload_elf_file+0xac>
            *dest_addr++=*src_addr++;
    853e:	8b 45 f8             	mov    -0x8(%di),%ax
    8541:	8d 50 01             	lea    0x1(%bx,%si),%dx
    8544:	89 55 f8             	mov    %dx,-0x8(%di)
    8547:	8b 55 f4             	mov    -0xc(%di),%dx
    854a:	8d 4a 01             	lea    0x1(%bp,%si),%cx
    854d:	89 4d f4             	mov    %cx,-0xc(%di)
    8550:	0f b6 12             	movzbw (%bp,%si),%dx
    8553:	88 10                	mov    %dl,(%bx,%si)
        if(phdr->p_type!=PT_LOAD){
            continue;
        }
        uint8_t *dest_addr=(uint8_t*)phdr->p_paddr;
        uint8_t *src_addr=phdr->p_offset+file_buffer;
        for(int j=0;j<phdr->p_filesz;j++){
    8555:	83 45 f0 01          	addw   $0x1,-0x10(%di)
    8559:	8b 45 e4             	mov    -0x1c(%di),%ax
    855c:	8b 50 10             	mov    0x10(%bx,%si),%dx
    855f:	8b 45 f0             	mov    -0x10(%di),%ax
    8562:	39 c2                	cmp    %ax,%dx
    8564:	77 d8                	ja     853e <reload_elf_file+0x91>
            *dest_addr++=*src_addr++;
        }
        dest_addr=(uint8_t*)phdr->p_paddr+phdr->p_filesz;
    8566:	8b 45 e4             	mov    -0x1c(%di),%ax
    8569:	8b 50 10             	mov    0x10(%bx,%si),%dx
    856c:	8b 45 e4             	mov    -0x1c(%di),%ax
    856f:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8572:	01 d0                	add    %dx,%ax
    8574:	89 45 f8             	mov    %ax,-0x8(%di)
        for(int j=0;j<phdr->p_memsz-phdr->p_filesz;j++){
    8577:	c7 45 ec 00 00       	movw   $0x0,-0x14(%di)
    857c:	00 00                	add    %al,(%bx,%si)
    857e:	eb 10                	jmp    8590 <reload_elf_file+0xe3>
            *dest_addr++=0;
    8580:	8b 45 f8             	mov    -0x8(%di),%ax
    8583:	8d 50 01             	lea    0x1(%bx,%si),%dx
    8586:	89 55 f8             	mov    %dx,-0x8(%di)
    8589:	c6 00 00             	movb   $0x0,(%bx,%si)
        uint8_t *src_addr=phdr->p_offset+file_buffer;
        for(int j=0;j<phdr->p_filesz;j++){
            *dest_addr++=*src_addr++;
        }
        dest_addr=(uint8_t*)phdr->p_paddr+phdr->p_filesz;
        for(int j=0;j<phdr->p_memsz-phdr->p_filesz;j++){
    858c:	83 45 ec 01          	addw   $0x1,-0x14(%di)
    8590:	8b 45 e4             	mov    -0x1c(%di),%ax
    8593:	8b 50 14             	mov    0x14(%bx,%si),%dx
    8596:	8b 45 e4             	mov    -0x1c(%di),%ax
    8599:	8b 40 10             	mov    0x10(%bx,%si),%ax
    859c:	29 c2                	sub    %ax,%dx
    859e:	8b 45 ec             	mov    -0x14(%di),%ax
    85a1:	39 c2                	cmp    %ax,%dx
    85a3:	77 db                	ja     8580 <reload_elf_file+0xd3>
    85a5:	eb 01                	jmp    85a8 <reload_elf_file+0xfb>
        return 0;
    }
    for(int i=0;i<elf_hdr->e_phnum;i++){
        Elf32_Phdr*phdr=(Elf32_Phdr*)(file_buffer+elf_hdr->e_phoff)+i;
        if(phdr->p_type!=PT_LOAD){
            continue;
    85a7:	90                   	nop
    Elf32_Ehdr*elf_hdr=(Elf32_Ehdr*)file_buffer;
    if(elf_hdr->e_ident[0]!=0x7f || elf_hdr->e_ident[1]!='E' || elf_hdr->e_ident[2]!='L' 
    || elf_hdr->e_ident[3]!='F'){
        return 0;
    }
    for(int i=0;i<elf_hdr->e_phnum;i++){
    85a8:	83 45 fc 01          	addw   $0x1,-0x4(%di)
    85ac:	8b 45 e8             	mov    -0x18(%di),%ax
    85af:	0f b7 40 2c          	movzww 0x2c(%bx,%si),%ax
    85b3:	0f b7 c0             	movzww %ax,%ax
    85b6:	3b 45 fc             	cmp    -0x4(%di),%ax
    85b9:	0f 8f 3b ff          	jg     84f8 <reload_elf_file+0x4b>
    85bd:	ff                   	(bad)  
    85be:	ff 8b 45 e8          	decw   -0x17bb(%bp,%di)
        for(int j=0;j<phdr->p_memsz-phdr->p_filesz;j++){
            *dest_addr++=0;
        }
        
    }
    return elf_hdr->e_entry;
    85c2:	8b 40 18             	mov    0x18(%bx,%si),%ax
}
    85c5:	c9                   	leave  
    85c6:	c3                   	ret    

000085c7 <die>:
static void die(){
    85c7:	55                   	push   %bp
    85c8:	89 e5                	mov    %sp,%bp
    for(;;){}
    85ca:	eb fe                	jmp    85ca <die+0x3>

000085cc <load_kernel>:
}
void load_kernel(void){
    85cc:	55                   	push   %bp
    85cd:	89 e5                	mov    %sp,%bp
    85cf:	83 ec 18             	sub    $0x18,%sp
    //读取磁盘
    read_disk(100,500,(uint8_t*)SYS_KERNEL_LOAD_ADDR);
    85d2:	68 00 00             	push   $0x0
    85d5:	10 00                	adc    %al,(%bx,%si)
    85d7:	68 f4 01             	push   $0x1f4
    85da:	00 00                	add    %al,(%bx,%si)
    85dc:	6a 64                	push   $0x64
    85de:	e8 ab fd             	call   838c <outb+0x1d>
    85e1:	ff                   	(bad)  
    85e2:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)
    uint32_t kernel_entry=reload_elf_file((uint8_t*)SYS_KERNEL_LOAD_ADDR);
    85e6:	68 00 00             	push   $0x0
    85e9:	10 00                	adc    %al,(%bx,%si)
    85eb:	e8 bd fe             	call   84ab <read_disk+0x11d>
    85ee:	ff                   	(bad)  
    85ef:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    85f3:	89 45 f4             	mov    %ax,-0xc(%di)
    if(kernel_entry==0){
    85f6:	83 7d f4 00          	cmpw   $0x0,-0xc(%di)
    85fa:	75 0a                	jne    8606 <load_kernel+0x3a>
        die(-1);
    85fc:	6a ff                	push   $0xffff
    85fe:	e8 c4 ff             	call   85c5 <reload_elf_file+0x118>
    8601:	ff                   	(bad)  
    8602:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    }
    ((void(*)(boot_info_t*))kernel_entry)(&boot_info);
    8606:	8b 45 f4             	mov    -0xc(%di),%ax
    8609:	83 ec 0c             	sub    $0xc,%sp
    860c:	68 80 96             	push   $0x9680
    860f:	00 00                	add    %al,(%bx,%si)
    8611:	ff d0                	call   *%ax
    8613:	83 c4 10             	add    $0x10,%sp
    8616:	90                   	nop
    8617:	c9                   	leave  
    8618:	c3                   	ret    
