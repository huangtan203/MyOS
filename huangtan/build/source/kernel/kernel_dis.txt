
/home/ziya/huangtan/lab/os/os_leenux/diy-x86os/code/huangtan/build/source/kernel/kernel.elf：     文件格式 elf32-i386
/home/ziya/huangtan/lab/os/os_leenux/diy-x86os/code/huangtan/build/source/kernel/kernel.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00010000

程序头：
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002701 memsz 0x00006540 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002065  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000699  00012068  00012068  00003068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00003e20  00012720  00012720  00003701  2**5
                  ALLOC
  3 .debug_line   0000107c  00000000  00000000  00003701  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000023e3  00000000  00000000  0000477d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000ba4  00000000  00000000  00006b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000140  00000000  00000000  00007708  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000f2c  00000000  00000000  00007848  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .comment      00000035  00000000  00000000  00008774  2**0
                  CONTENTS, READONLY
  9 .debug_frame  00000ed8  00000000  00000000  000087ac  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012068 l    d  .rodata	00000000 .rodata
00012720 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
000102f9 l     F .text	0000002b lgdt
00010324 l     F .text	0000001a far_jump
00012720 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
000104cd l     F .text	0000001d inb
000104ea l     F .text	0000001f outb
00010509 l     F .text	00000007 cli
00010510 l     F .text	00000007 sti
00010517 l     F .text	00000007 hlt
0001051e l     F .text	0000002b lidt
00010549 l     F .text	00000011 read_cr2
0001055a l     F .text	00000010 read_eflags
0001056a l     F .text	0000000b write_eflags
00012f20 l     O .bss	00000400 idt_table
00010575 l     F .text	0000017e dump_core_regs
000106f3 l     F .text	0000004e do_default_handler
00010ad5 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 init.c
00013320 l     O .bss	00000004 init_boot_info
00000000 l    df *ABS*	00000000 time.c
00010f6f l     F .text	0000001f outb
00013324 l     O .bss	00000004 sys_tick
00010fb6 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 console.c
0001102e l     F .text	0000001d inb
0001104b l     F .text	0000001f outb
00013340 l     O .bss	00000054 console_buf
0001106a l     F .text	00000059 read_cursor_pos
000110c3 l     F .text	000000b0 erase_rows
00011173 l     F .text	00000086 scroll_up
000111f9 l     F .text	00000010 mov_to_col0
00011209 l     F .text	00000038 move_next_line
00011241 l     F .text	00000076 move_forward
000112b7 l     F .text	00000094 show_char
0001134b l     F .text	00000078 move_backword
000113c3 l     F .text	00000088 clear_display
00000000 l    df *ABS*	00000000 log.c
00000000 l    df *ABS*	00000000 klib.c
00000000 l    df *ABS*	00000000 list.c
000117e0 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 task.c
00011a45 l     F .text	00000007 hlt
00011a4c l     F .text	00000017 write_tr
00011a63 l     F .text	0000001b list_node_init
00011a7e l     F .text	0000000b list_node_next
00011a89 l     F .text	0000000b list_count
00011a94 l     F .text	0000000a list_first
000133a0 l     O .bss	00000188 task_manager
00013540 l     O .bss	00001000 idle_task_stack
00011a9e l     F .text	0000010e tss_init
00011d36 l     F .text	0000000a idle_task_entry
00011dd7 l     F .text	00000046 task_next_run
00011738 g     F .text	0000004f kernel_memcpy
00011e7b g     F .text	0000000a task_current
00010e9f g     F .text	0000000b irq_enable_global
00011873 g     F .text	00000061 list_insert_last
00012001 g     F .text	00000064 sys_msleep
00011e85 g     F .text	00000053 sys_yield
00010875 g     F .text	0000001c do_handler_segment_not_present
00011da3 g     F .text	00000034 task_set_ready
00011787 g     F .text	00000041 kernel_memset
000102b3 g       .text	00000000 exception_handler_virtual_exception
0001155f g     F .text	0000002d strings_count
000104c2 g     F .text	0000000b cpu_init
00011553 g     F .text	00000006 log_init
00010f1c g     F .text	00000053 init_main
0001024c g       .text	00000000 exception_handler_alignment_check
000115d2 g     F .text	00000048 kernel_strcpy
00010d82 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000100b4 g       .text	00000000 exception_handler_breakpoint
000107cd g     F .text	0000001c do_handler_overflow
00010a65 g     F .text	0000001c do_handler_alignment_check
000101e7 g       .text	00000000 exception_handler_general_protection
000108ad g     F .text	000000c8 do_handler_general_protection
0001083d g     F .text	0000001c do_handler_double_fault
00010ef3 g     F .text	00000029 init_task_entry
00010975 g     F .text	000000d4 do_handler_page_fault
00010163 g       .text	00000000 exception_handler_double_fault
00010b68 g     F .text	0000002b pic_send_eoi
00011d01 g     F .text	0000000a task_first_task
00010f8e g     F .text	00000028 do_handler_timer
000101c6 g       .text	00000000 exception_handler_stack_segment_fault
00010ab9 g     F .text	0000001c do_handler_virtual_exception
000100d7 g       .text	00000000 exception_handler_overflow
000102f9 g       .text	00000000 simple_switch
00014540 g     O .bss	00002000 stack
0001144b g     F .text	000000fc console_init
000100fa g       .text	00000000 exception_handler_bound_range
00010805 g     F .text	0000001c do_handler_invalid_opcode
00010184 g       .text	00000000 exception_handler_invalid_tss
00010a49 g     F .text	0000001c do_handler_fpu_error
00011cc2 g     F .text	0000003f task_first_init
00010a81 g     F .text	0000001c do_handler_machine_check
00010779 g     F .text	0000001c do_handler_Debug
00011726 g     F .text	00000012 kernel_strcat
00011816 g     F .text	0000005d list_insert_first
00011e59 g     F .text	00000022 task_set_wakeup
00010795 g     F .text	0000001c do_handler_NMI
0001161a g     F .text	0000006b kernel_strncpy
00010e94 g     F .text	0000000b irq_disable_global
00010ed3 g     F .text	00000020 kernel_init
00010000 g       .text	00000000 _start
000117da g     F .text	00000006 kernel_vsprintf
0001158c g     F .text	00000046 get_file_name
00010140 g       .text	00000000 exception_handler_device_unavailable
0001011d g       .text	00000000 exception_handler_invalid_opcode
0001026d g       .text	00000000 exception_handler_machine_check
00010859 g     F .text	0000001c do_handler_invalid_tss
00011e1d g     F .text	0000003c task_set_sleep
000102d6 g       .text	00000000 exception_handler_timer
00010b93 g     F .text	00000040 irq_install
00010442 g     F .text	0000006d init_gdt
00010eaa g     F .text	00000018 irq_enter_protection
00010e0d g     F .text	00000087 irq_disable
00010290 g       .text	00000000 exception_handler_smd_exception
00010821 g     F .text	0000001c do_handler_device_unavailable
00011ed8 g     F .text	00000043 task_dispatch
000104af g     F .text	00000013 switch_to_tss
00011547 g     F .text	00000006 console_write
000117c8 g     F .text	00000006 kernel_memcmp
000117f3 g     F .text	00000023 list_init
00010a9d g     F .text	0000001c do_handler_smd_exception
00010208 g       .text	00000000 exception_handler_page_fault
00011d0b g     F .text	0000002b task_set_block
00010741 g     F .text	0000001c do_handler_unknown
00010229 g       .text	00000000 exception_handler_fpu_error
00011ca0 g     F .text	00000022 task_switch_from_to
00010bd3 g     F .text	000001af irq_init
00010ec2 g     F .text	00000011 irq_leave_protection
000116f3 g     F .text	00000033 kernel_strlen
0001004b g       .text	00000000 exception_handler_driver
0001033e g     F .text	00000079 segment_desc_set
000107e9 g     F .text	0000001c do_handler_bound_range
000118d4 g     F .text	0000008c list_remove_first
0001075d g     F .text	0000001c do_handler_driver
00011685 g     F .text	0000006e kernel_strncmp
000101a5 g       .text	00000000 exception_handler_segment_not_present
00010091 g       .text	00000000 exception_handler_NMI
00011d40 g     F .text	00000063 task_manager_init
0001006e g       .text	00000000 exception_handler_Debug
00011f1b g     F .text	000000e6 task_time_tick
0001154d g     F .text	00000006 console_close
00010891 g     F .text	0000001c do_handler_stack_segment_fault
000107b1 g     F .text	0000001c do_handler_breakpoint
00011559 g     F .text	00000006 log_printf
00011bac g     F .text	000000f4 task_init
000117d4 g     F .text	00000006 kernel_sprintf
000103fd g     F .text	00000045 gdt_alloc_desc
000117ce g     F .text	00000006 kernel_itoa
00011960 g     F .text	000000e5 list_remove
000103b7 g     F .text	00000046 gate_desc_set
00011016 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
      .text
      .extern kernel_init
      .extern init_main
      .global _start
_start: 
    push 4(%esp) //传指针/地址 模拟c调用函数 这里的意思是将[esp+4的值压栈],同时esp的值减4
   10000:	ff 74 24 04          	pushl  0x4(%esp)
    call kernel_init
   10004:	e8 ca 0e 00 00       	call   10ed3 <kernel_init>

    jmp $KERNEL_SELECTOR_CS,$gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:


gdt_reload:
    mov $KERNEL_SELECTOR_DS,%ax
   10010:	66 b8 10 00          	mov    $0x10,%ax
    mov %ax,%ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax,%es
   10016:	8e c0                	mov    %eax,%es
    mov %ax,%fs
   10018:	8e e0                	mov    %eax,%fs
    mov %ax,%gs
   1001a:	8e e8                	mov    %eax,%gs
    mov %ax,%ss
   1001c:	8e d0                	mov    %eax,%ss

    mov $(stack+KERNEL_STACK_SIZE),%esp
   1001e:	bc 40 65 01 00       	mov    $0x16540,%esp

    jmp init_main
   10023:	e9 f4 0e 00 00       	jmp    10f1c <init_main>

00010028 <exception_handler_unknown>:
    popal
    add $(2*4), %esp
    iret
.endm

exception_handler unknown,-1,0//怎么还有负数
   10028:	6a 00                	push   $0x0
   1002a:	ff 35 ff ff ff ff    	pushl  0xffffffff
   10030:	60                   	pusha  
   10031:	1e                   	push   %ds
   10032:	06                   	push   %es
   10033:	0f a0                	push   %fs
   10035:	0f a8                	push   %gs
   10037:	54                   	push   %esp
   10038:	e8 04 07 00 00       	call   10741 <do_handler_unknown>
   1003d:	83 c4 04             	add    $0x4,%esp
   10040:	0f a9                	pop    %gs
   10042:	0f a1                	pop    %fs
   10044:	07                   	pop    %es
   10045:	1f                   	pop    %ds
   10046:	61                   	popa   
   10047:	83 c4 08             	add    $0x8,%esp
   1004a:	cf                   	iret   

0001004b <exception_handler_driver>:
exception_handler driver,0,0
   1004b:	6a 00                	push   $0x0
   1004d:	ff 35 00 00 00 00    	pushl  0x0
   10053:	60                   	pusha  
   10054:	1e                   	push   %ds
   10055:	06                   	push   %es
   10056:	0f a0                	push   %fs
   10058:	0f a8                	push   %gs
   1005a:	54                   	push   %esp
   1005b:	e8 fd 06 00 00       	call   1075d <do_handler_driver>
   10060:	83 c4 04             	add    $0x4,%esp
   10063:	0f a9                	pop    %gs
   10065:	0f a1                	pop    %fs
   10067:	07                   	pop    %es
   10068:	1f                   	pop    %ds
   10069:	61                   	popa   
   1006a:	83 c4 08             	add    $0x8,%esp
   1006d:	cf                   	iret   

0001006e <exception_handler_Debug>:
exception_handler Debug,1,0
   1006e:	6a 00                	push   $0x0
   10070:	ff 35 01 00 00 00    	pushl  0x1
   10076:	60                   	pusha  
   10077:	1e                   	push   %ds
   10078:	06                   	push   %es
   10079:	0f a0                	push   %fs
   1007b:	0f a8                	push   %gs
   1007d:	54                   	push   %esp
   1007e:	e8 f6 06 00 00       	call   10779 <do_handler_Debug>
   10083:	83 c4 04             	add    $0x4,%esp
   10086:	0f a9                	pop    %gs
   10088:	0f a1                	pop    %fs
   1008a:	07                   	pop    %es
   1008b:	1f                   	pop    %ds
   1008c:	61                   	popa   
   1008d:	83 c4 08             	add    $0x8,%esp
   10090:	cf                   	iret   

00010091 <exception_handler_NMI>:
exception_handler NMI,2,0
   10091:	6a 00                	push   $0x0
   10093:	ff 35 02 00 00 00    	pushl  0x2
   10099:	60                   	pusha  
   1009a:	1e                   	push   %ds
   1009b:	06                   	push   %es
   1009c:	0f a0                	push   %fs
   1009e:	0f a8                	push   %gs
   100a0:	54                   	push   %esp
   100a1:	e8 ef 06 00 00       	call   10795 <do_handler_NMI>
   100a6:	83 c4 04             	add    $0x4,%esp
   100a9:	0f a9                	pop    %gs
   100ab:	0f a1                	pop    %fs
   100ad:	07                   	pop    %es
   100ae:	1f                   	pop    %ds
   100af:	61                   	popa   
   100b0:	83 c4 08             	add    $0x8,%esp
   100b3:	cf                   	iret   

000100b4 <exception_handler_breakpoint>:
exception_handler breakpoint,3,0
   100b4:	6a 00                	push   $0x0
   100b6:	ff 35 03 00 00 00    	pushl  0x3
   100bc:	60                   	pusha  
   100bd:	1e                   	push   %ds
   100be:	06                   	push   %es
   100bf:	0f a0                	push   %fs
   100c1:	0f a8                	push   %gs
   100c3:	54                   	push   %esp
   100c4:	e8 e8 06 00 00       	call   107b1 <do_handler_breakpoint>
   100c9:	83 c4 04             	add    $0x4,%esp
   100cc:	0f a9                	pop    %gs
   100ce:	0f a1                	pop    %fs
   100d0:	07                   	pop    %es
   100d1:	1f                   	pop    %ds
   100d2:	61                   	popa   
   100d3:	83 c4 08             	add    $0x8,%esp
   100d6:	cf                   	iret   

000100d7 <exception_handler_overflow>:
exception_handler overflow,4,0
   100d7:	6a 00                	push   $0x0
   100d9:	ff 35 04 00 00 00    	pushl  0x4
   100df:	60                   	pusha  
   100e0:	1e                   	push   %ds
   100e1:	06                   	push   %es
   100e2:	0f a0                	push   %fs
   100e4:	0f a8                	push   %gs
   100e6:	54                   	push   %esp
   100e7:	e8 e1 06 00 00       	call   107cd <do_handler_overflow>
   100ec:	83 c4 04             	add    $0x4,%esp
   100ef:	0f a9                	pop    %gs
   100f1:	0f a1                	pop    %fs
   100f3:	07                   	pop    %es
   100f4:	1f                   	pop    %ds
   100f5:	61                   	popa   
   100f6:	83 c4 08             	add    $0x8,%esp
   100f9:	cf                   	iret   

000100fa <exception_handler_bound_range>:
exception_handler bound_range,5,0
   100fa:	6a 00                	push   $0x0
   100fc:	ff 35 05 00 00 00    	pushl  0x5
   10102:	60                   	pusha  
   10103:	1e                   	push   %ds
   10104:	06                   	push   %es
   10105:	0f a0                	push   %fs
   10107:	0f a8                	push   %gs
   10109:	54                   	push   %esp
   1010a:	e8 da 06 00 00       	call   107e9 <do_handler_bound_range>
   1010f:	83 c4 04             	add    $0x4,%esp
   10112:	0f a9                	pop    %gs
   10114:	0f a1                	pop    %fs
   10116:	07                   	pop    %es
   10117:	1f                   	pop    %ds
   10118:	61                   	popa   
   10119:	83 c4 08             	add    $0x8,%esp
   1011c:	cf                   	iret   

0001011d <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,6,0
   1011d:	6a 00                	push   $0x0
   1011f:	ff 35 06 00 00 00    	pushl  0x6
   10125:	60                   	pusha  
   10126:	1e                   	push   %ds
   10127:	06                   	push   %es
   10128:	0f a0                	push   %fs
   1012a:	0f a8                	push   %gs
   1012c:	54                   	push   %esp
   1012d:	e8 d3 06 00 00       	call   10805 <do_handler_invalid_opcode>
   10132:	83 c4 04             	add    $0x4,%esp
   10135:	0f a9                	pop    %gs
   10137:	0f a1                	pop    %fs
   10139:	07                   	pop    %es
   1013a:	1f                   	pop    %ds
   1013b:	61                   	popa   
   1013c:	83 c4 08             	add    $0x8,%esp
   1013f:	cf                   	iret   

00010140 <exception_handler_device_unavailable>:
exception_handler device_unavailable,7,0
   10140:	6a 00                	push   $0x0
   10142:	ff 35 07 00 00 00    	pushl  0x7
   10148:	60                   	pusha  
   10149:	1e                   	push   %ds
   1014a:	06                   	push   %es
   1014b:	0f a0                	push   %fs
   1014d:	0f a8                	push   %gs
   1014f:	54                   	push   %esp
   10150:	e8 cc 06 00 00       	call   10821 <do_handler_device_unavailable>
   10155:	83 c4 04             	add    $0x4,%esp
   10158:	0f a9                	pop    %gs
   1015a:	0f a1                	pop    %fs
   1015c:	07                   	pop    %es
   1015d:	1f                   	pop    %ds
   1015e:	61                   	popa   
   1015f:	83 c4 08             	add    $0x8,%esp
   10162:	cf                   	iret   

00010163 <exception_handler_double_fault>:
exception_handler double_fault,8,1
   10163:	ff 35 08 00 00 00    	pushl  0x8
   10169:	60                   	pusha  
   1016a:	1e                   	push   %ds
   1016b:	06                   	push   %es
   1016c:	0f a0                	push   %fs
   1016e:	0f a8                	push   %gs
   10170:	54                   	push   %esp
   10171:	e8 c7 06 00 00       	call   1083d <do_handler_double_fault>
   10176:	83 c4 04             	add    $0x4,%esp
   10179:	0f a9                	pop    %gs
   1017b:	0f a1                	pop    %fs
   1017d:	07                   	pop    %es
   1017e:	1f                   	pop    %ds
   1017f:	61                   	popa   
   10180:	83 c4 08             	add    $0x8,%esp
   10183:	cf                   	iret   

00010184 <exception_handler_invalid_tss>:
exception_handler invalid_tss,10,1
   10184:	ff 35 0a 00 00 00    	pushl  0xa
   1018a:	60                   	pusha  
   1018b:	1e                   	push   %ds
   1018c:	06                   	push   %es
   1018d:	0f a0                	push   %fs
   1018f:	0f a8                	push   %gs
   10191:	54                   	push   %esp
   10192:	e8 c2 06 00 00       	call   10859 <do_handler_invalid_tss>
   10197:	83 c4 04             	add    $0x4,%esp
   1019a:	0f a9                	pop    %gs
   1019c:	0f a1                	pop    %fs
   1019e:	07                   	pop    %es
   1019f:	1f                   	pop    %ds
   101a0:	61                   	popa   
   101a1:	83 c4 08             	add    $0x8,%esp
   101a4:	cf                   	iret   

000101a5 <exception_handler_segment_not_present>:
exception_handler segment_not_present,11,1
   101a5:	ff 35 0b 00 00 00    	pushl  0xb
   101ab:	60                   	pusha  
   101ac:	1e                   	push   %ds
   101ad:	06                   	push   %es
   101ae:	0f a0                	push   %fs
   101b0:	0f a8                	push   %gs
   101b2:	54                   	push   %esp
   101b3:	e8 bd 06 00 00       	call   10875 <do_handler_segment_not_present>
   101b8:	83 c4 04             	add    $0x4,%esp
   101bb:	0f a9                	pop    %gs
   101bd:	0f a1                	pop    %fs
   101bf:	07                   	pop    %es
   101c0:	1f                   	pop    %ds
   101c1:	61                   	popa   
   101c2:	83 c4 08             	add    $0x8,%esp
   101c5:	cf                   	iret   

000101c6 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,12,1
   101c6:	ff 35 0c 00 00 00    	pushl  0xc
   101cc:	60                   	pusha  
   101cd:	1e                   	push   %ds
   101ce:	06                   	push   %es
   101cf:	0f a0                	push   %fs
   101d1:	0f a8                	push   %gs
   101d3:	54                   	push   %esp
   101d4:	e8 b8 06 00 00       	call   10891 <do_handler_stack_segment_fault>
   101d9:	83 c4 04             	add    $0x4,%esp
   101dc:	0f a9                	pop    %gs
   101de:	0f a1                	pop    %fs
   101e0:	07                   	pop    %es
   101e1:	1f                   	pop    %ds
   101e2:	61                   	popa   
   101e3:	83 c4 08             	add    $0x8,%esp
   101e6:	cf                   	iret   

000101e7 <exception_handler_general_protection>:
exception_handler general_protection,13,1
   101e7:	ff 35 0d 00 00 00    	pushl  0xd
   101ed:	60                   	pusha  
   101ee:	1e                   	push   %ds
   101ef:	06                   	push   %es
   101f0:	0f a0                	push   %fs
   101f2:	0f a8                	push   %gs
   101f4:	54                   	push   %esp
   101f5:	e8 b3 06 00 00       	call   108ad <do_handler_general_protection>
   101fa:	83 c4 04             	add    $0x4,%esp
   101fd:	0f a9                	pop    %gs
   101ff:	0f a1                	pop    %fs
   10201:	07                   	pop    %es
   10202:	1f                   	pop    %ds
   10203:	61                   	popa   
   10204:	83 c4 08             	add    $0x8,%esp
   10207:	cf                   	iret   

00010208 <exception_handler_page_fault>:
exception_handler page_fault,14,1
   10208:	ff 35 0e 00 00 00    	pushl  0xe
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 5a 07 00 00       	call   10975 <do_handler_page_fault>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_fpu_error>:
exception_handler fpu_error,16,0
   10229:	6a 00                	push   $0x0
   1022b:	ff 35 10 00 00 00    	pushl  0x10
   10231:	60                   	pusha  
   10232:	1e                   	push   %ds
   10233:	06                   	push   %es
   10234:	0f a0                	push   %fs
   10236:	0f a8                	push   %gs
   10238:	54                   	push   %esp
   10239:	e8 0b 08 00 00       	call   10a49 <do_handler_fpu_error>
   1023e:	83 c4 04             	add    $0x4,%esp
   10241:	0f a9                	pop    %gs
   10243:	0f a1                	pop    %fs
   10245:	07                   	pop    %es
   10246:	1f                   	pop    %ds
   10247:	61                   	popa   
   10248:	83 c4 08             	add    $0x8,%esp
   1024b:	cf                   	iret   

0001024c <exception_handler_alignment_check>:
exception_handler alignment_check,17,1
   1024c:	ff 35 11 00 00 00    	pushl  0x11
   10252:	60                   	pusha  
   10253:	1e                   	push   %ds
   10254:	06                   	push   %es
   10255:	0f a0                	push   %fs
   10257:	0f a8                	push   %gs
   10259:	54                   	push   %esp
   1025a:	e8 06 08 00 00       	call   10a65 <do_handler_alignment_check>
   1025f:	83 c4 04             	add    $0x4,%esp
   10262:	0f a9                	pop    %gs
   10264:	0f a1                	pop    %fs
   10266:	07                   	pop    %es
   10267:	1f                   	pop    %ds
   10268:	61                   	popa   
   10269:	83 c4 08             	add    $0x8,%esp
   1026c:	cf                   	iret   

0001026d <exception_handler_machine_check>:
exception_handler machine_check,18,0
   1026d:	6a 00                	push   $0x0
   1026f:	ff 35 12 00 00 00    	pushl  0x12
   10275:	60                   	pusha  
   10276:	1e                   	push   %ds
   10277:	06                   	push   %es
   10278:	0f a0                	push   %fs
   1027a:	0f a8                	push   %gs
   1027c:	54                   	push   %esp
   1027d:	e8 ff 07 00 00       	call   10a81 <do_handler_machine_check>
   10282:	83 c4 04             	add    $0x4,%esp
   10285:	0f a9                	pop    %gs
   10287:	0f a1                	pop    %fs
   10289:	07                   	pop    %es
   1028a:	1f                   	pop    %ds
   1028b:	61                   	popa   
   1028c:	83 c4 08             	add    $0x8,%esp
   1028f:	cf                   	iret   

00010290 <exception_handler_smd_exception>:
exception_handler smd_exception,19,0
   10290:	6a 00                	push   $0x0
   10292:	ff 35 13 00 00 00    	pushl  0x13
   10298:	60                   	pusha  
   10299:	1e                   	push   %ds
   1029a:	06                   	push   %es
   1029b:	0f a0                	push   %fs
   1029d:	0f a8                	push   %gs
   1029f:	54                   	push   %esp
   102a0:	e8 f8 07 00 00       	call   10a9d <do_handler_smd_exception>
   102a5:	83 c4 04             	add    $0x4,%esp
   102a8:	0f a9                	pop    %gs
   102aa:	0f a1                	pop    %fs
   102ac:	07                   	pop    %es
   102ad:	1f                   	pop    %ds
   102ae:	61                   	popa   
   102af:	83 c4 08             	add    $0x8,%esp
   102b2:	cf                   	iret   

000102b3 <exception_handler_virtual_exception>:
exception_handler virtual_exception,20,0
   102b3:	6a 00                	push   $0x0
   102b5:	ff 35 14 00 00 00    	pushl  0x14
   102bb:	60                   	pusha  
   102bc:	1e                   	push   %ds
   102bd:	06                   	push   %es
   102be:	0f a0                	push   %fs
   102c0:	0f a8                	push   %gs
   102c2:	54                   	push   %esp
   102c3:	e8 f1 07 00 00       	call   10ab9 <do_handler_virtual_exception>
   102c8:	83 c4 04             	add    $0x4,%esp
   102cb:	0f a9                	pop    %gs
   102cd:	0f a1                	pop    %fs
   102cf:	07                   	pop    %es
   102d0:	1f                   	pop    %ds
   102d1:	61                   	popa   
   102d2:	83 c4 08             	add    $0x8,%esp
   102d5:	cf                   	iret   

000102d6 <exception_handler_timer>:

exception_handler timer,0x20,0
   102d6:	6a 00                	push   $0x0
   102d8:	ff 35 20 00 00 00    	pushl  0x20
   102de:	60                   	pusha  
   102df:	1e                   	push   %ds
   102e0:	06                   	push   %es
   102e1:	0f a0                	push   %fs
   102e3:	0f a8                	push   %gs
   102e5:	54                   	push   %esp
   102e6:	e8 a3 0c 00 00       	call   10f8e <do_handler_timer>
   102eb:	83 c4 04             	add    $0x4,%esp
   102ee:	0f a9                	pop    %gs
   102f0:	0f a1                	pop    %fs
   102f2:	07                   	pop    %es
   102f3:	1f                   	pop    %ds
   102f4:	61                   	popa   
   102f5:	83 c4 08             	add    $0x8,%esp
   102f8:	cf                   	iret   

000102f9 <lgdt>:
static inline uint32_t rdtsc(){
    uint32_t ret;
    __asm__ __volatile__("rdtsc" : "=a"(ret));
    return ret;
}
static inline void lgdt(uint32_t start,uint32_t size){
   102f9:	55                   	push   %ebp
   102fa:	89 e5                	mov    %esp,%ebp
   102fc:	83 ec 10             	sub    $0x10,%esp
    {
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    }gdt;
    gdt.limit=size-1;   
   102ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   10302:	83 e8 01             	sub    $0x1,%eax
   10305:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    gdt.start15_0=start&0xffff;
   10309:	8b 45 08             	mov    0x8(%ebp),%eax
   1030c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.start31_16=(start>>16)&0xff;
   10310:	8b 45 08             	mov    0x8(%ebp),%eax
   10313:	c1 e8 10             	shr    $0x10,%eax
   10316:	0f b6 c0             	movzbl %al,%eax
   10319:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    __asm__ __volatile__("lgdt %[g]" : : [g]"m"(gdt));
   1031d:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
    
}
   10321:	90                   	nop
   10322:	c9                   	leave  
   10323:	c3                   	ret    

00010324 <far_jump>:
    return ret;
}
static inline void write_eflags(uint32_t val){
    __asm__ __volatile__("pushl %%eax; popfl" : : "a"(val));
}
static inline void far_jump(uint32_t selector,uint32_t offset){
   10324:	55                   	push   %ebp
   10325:	89 e5                	mov    %esp,%ebp
   10327:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[]={offset,selector};
   1032a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1032d:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10330:	8b 45 08             	mov    0x8(%ebp),%eax
   10333:	89 45 fc             	mov    %eax,-0x4(%ebp)
    //*(%[a])：这是一个间接寻址（indirect addressing）表达式。*表示要跳转到寻址结果指向的地址。(%[a])表示使用变量 a 的值作为内存地址进行间接寻址
    __asm__ __volatile__("ljmpl *(%[a])" : : [a]"r"(addr));
   10336:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10339:	ff 28                	ljmp   *(%eax)
}
   1033b:	90                   	nop
   1033c:	c9                   	leave  
   1033d:	c3                   	ret    

0001033e <segment_desc_set>:
#include "comm/cpu_instr.h"
#include "cpu/cpu.h"
#include "os_cfg.h"

static segment_desc_t gdt_table[GDT_TABLE_SIZE]; 
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint8_t attr){
   1033e:	55                   	push   %ebp
   1033f:	89 e5                	mov    %esp,%ebp
   10341:	83 ec 14             	sub    $0x14,%esp
   10344:	8b 45 14             	mov    0x14(%ebp),%eax
   10347:	88 45 ec             	mov    %al,-0x14(%ebp)
    segment_desc_t*desc=gdt_table+(selector>>3);
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	c1 f8 03             	sar    $0x3,%eax
   10350:	c1 e0 03             	shl    $0x3,%eax
   10353:	05 20 27 01 00       	add    $0x12720,%eax
   10358:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(limit>0xfffff){
   1035b:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10362:	76 04                	jbe    10368 <segment_desc_set+0x2a>
        //长度太大改为4KB
        attr|=0x8000;
        limit>>=12;
   10364:	c1 6d 10 0c          	shrl   $0xc,0x10(%ebp)
    }
    desc->base15_0=base&0xffff;
   10368:	8b 45 0c             	mov    0xc(%ebp),%eax
   1036b:	89 c2                	mov    %eax,%edx
   1036d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10370:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->limit15_0=limit&0xffff;
   10374:	8b 45 10             	mov    0x10(%ebp),%eax
   10377:	89 c2                	mov    %eax,%edx
   10379:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1037c:	66 89 10             	mov    %dx,(%eax)
    desc->base23_16=(base>>16)&0xff;
   1037f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10382:	c1 e8 10             	shr    $0x10,%eax
   10385:	89 c2                	mov    %eax,%edx
   10387:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1038a:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr=attr|(((limit>>16)&0xf)<<8);
   1038d:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   10391:	8b 55 10             	mov    0x10(%ebp),%edx
   10394:	c1 ea 10             	shr    $0x10,%edx
   10397:	83 e2 0f             	and    $0xf,%edx
   1039a:	c1 e2 08             	shl    $0x8,%edx
   1039d:	09 c2                	or     %eax,%edx
   1039f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103a2:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24=(base>>24)&0xff;  
   103a6:	8b 45 0c             	mov    0xc(%ebp),%eax
   103a9:	c1 e8 18             	shr    $0x18,%eax
   103ac:	89 c2                	mov    %eax,%edx
   103ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103b1:	88 50 07             	mov    %dl,0x7(%eax)

}
   103b4:	90                   	nop
   103b5:	c9                   	leave  
   103b6:	c3                   	ret    

000103b7 <gate_desc_set>:


void gate_desc_set(gate_desc_t*dest, uint32_t offset, uint16_t selector, uint8_t attr){
   103b7:	55                   	push   %ebp
   103b8:	89 e5                	mov    %esp,%ebp
   103ba:	83 ec 08             	sub    $0x8,%esp
   103bd:	8b 55 10             	mov    0x10(%ebp),%edx
   103c0:	8b 45 14             	mov    0x14(%ebp),%eax
   103c3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   103c7:	88 45 f8             	mov    %al,-0x8(%ebp)
    dest->offset15_0=offset&0xffff;
   103ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   103cd:	89 c2                	mov    %eax,%edx
   103cf:	8b 45 08             	mov    0x8(%ebp),%eax
   103d2:	66 89 10             	mov    %dx,(%eax)
    dest->selector=selector;
   103d5:	8b 45 08             	mov    0x8(%ebp),%eax
   103d8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   103dc:	66 89 50 02          	mov    %dx,0x2(%eax)
    dest->attr=attr;
   103e0:	0f b6 55 f8          	movzbl -0x8(%ebp),%edx
   103e4:	8b 45 08             	mov    0x8(%ebp),%eax
   103e7:	66 89 50 04          	mov    %dx,0x4(%eax)
    dest->offset31_16=(offset>>16)&0xffff;
   103eb:	8b 45 0c             	mov    0xc(%ebp),%eax
   103ee:	c1 e8 10             	shr    $0x10,%eax
   103f1:	89 c2                	mov    %eax,%edx
   103f3:	8b 45 08             	mov    0x8(%ebp),%eax
   103f6:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   103fa:	90                   	nop
   103fb:	c9                   	leave  
   103fc:	c3                   	ret    

000103fd <gdt_alloc_desc>:

int gdt_alloc_desc(void){
   103fd:	55                   	push   %ebp
   103fe:	89 e5                	mov    %esp,%ebp
   10400:	83 ec 10             	sub    $0x10,%esp
    for(int i=1;i<GDT_TABLE_SIZE;i++){
   10403:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1040a:	eb 26                	jmp    10432 <gdt_alloc_desc+0x35>
        segment_desc_t*desc=gdt_table+i;
   1040c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1040f:	c1 e0 03             	shl    $0x3,%eax
   10412:	05 20 27 01 00       	add    $0x12720,%eax
   10417:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->attr==0){
   1041a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1041d:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10421:	66 85 c0             	test   %ax,%ax
   10424:	75 08                	jne    1042e <gdt_alloc_desc+0x31>
            return i*sizeof(segment_desc_t);
   10426:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10429:	c1 e0 03             	shl    $0x3,%eax
   1042c:	eb 12                	jmp    10440 <gdt_alloc_desc+0x43>
    dest->attr=attr;
    dest->offset31_16=(offset>>16)&0xffff;
}

int gdt_alloc_desc(void){
    for(int i=1;i<GDT_TABLE_SIZE;i++){
   1042e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10432:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10439:	7e d1                	jle    1040c <gdt_alloc_desc+0xf>
        segment_desc_t*desc=gdt_table+i;
        if(desc->attr==0){
            return i*sizeof(segment_desc_t);
        }
    }
    return -1;
   1043b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10440:	c9                   	leave  
   10441:	c3                   	ret    

00010442 <init_gdt>:
void init_gdt(){
   10442:	55                   	push   %ebp
   10443:	89 e5                	mov    %esp,%ebp
   10445:	83 ec 10             	sub    $0x10,%esp
    for(int i=0;i<GDT_TABLE_SIZE;i++){
   10448:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1044f:	eb 19                	jmp    1046a <init_gdt+0x28>
        segment_desc_set(i<<3,0,0,0);
   10451:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10454:	c1 e0 03             	shl    $0x3,%eax
   10457:	6a 00                	push   $0x0
   10459:	6a 00                	push   $0x0
   1045b:	6a 00                	push   $0x0
   1045d:	50                   	push   %eax
   1045e:	e8 db fe ff ff       	call   1033e <segment_desc_set>
   10463:	83 c4 10             	add    $0x10,%esp
        }
    }
    return -1;
}
void init_gdt(){
    for(int i=0;i<GDT_TABLE_SIZE;i++){
   10466:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1046a:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10471:	7e de                	jle    10451 <init_gdt+0xf>
        segment_desc_set(i<<3,0,0,0);
    }
    segment_desc_set(KERNEL_SELECTOR_DS,0,0xffffffff,SEG_DPL0|SEG_P_PRESENT|SEG_S_NORMAL|SEG_TYPE_DATA
   10473:	68 92 00 00 00       	push   $0x92
   10478:	6a ff                	push   $0xffffffff
   1047a:	6a 00                	push   $0x0
   1047c:	6a 10                	push   $0x10
   1047e:	e8 bb fe ff ff       	call   1033e <segment_desc_set>
   10483:	83 c4 10             	add    $0x10,%esp
    |SEG_D|SEG_G|SEG_TYPE_RW);
    segment_desc_set(KERNEL_SELECTOR_CS,0,0xffffffff,SEG_DPL0|SEG_P_PRESENT|SEG_S_NORMAL|SEG_TYPE_CODE
   10486:	68 9a 00 00 00       	push   $0x9a
   1048b:	6a ff                	push   $0xffffffff
   1048d:	6a 00                	push   $0x0
   1048f:	6a 08                	push   $0x8
   10491:	e8 a8 fe ff ff       	call   1033e <segment_desc_set>
   10496:	83 c4 10             	add    $0x10,%esp
    |SEG_D|SEG_G|SEG_TYPE_RW);

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   10499:	b8 20 27 01 00       	mov    $0x12720,%eax
   1049e:	68 00 08 00 00       	push   $0x800
   104a3:	50                   	push   %eax
   104a4:	e8 50 fe ff ff       	call   102f9 <lgdt>
   104a9:	83 c4 08             	add    $0x8,%esp
}
   104ac:	90                   	nop
   104ad:	c9                   	leave  
   104ae:	c3                   	ret    

000104af <switch_to_tss>:
void switch_to_tss(uint32_t tss_selector){
   104af:	55                   	push   %ebp
   104b0:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector,0);
   104b2:	6a 00                	push   $0x0
   104b4:	ff 75 08             	pushl  0x8(%ebp)
   104b7:	e8 68 fe ff ff       	call   10324 <far_jump>
   104bc:	83 c4 08             	add    $0x8,%esp
}
   104bf:	90                   	nop
   104c0:	c9                   	leave  
   104c1:	c3                   	ret    

000104c2 <cpu_init>:
void cpu_init(void){
   104c2:	55                   	push   %ebp
   104c3:	89 e5                	mov    %esp,%ebp
    init_gdt();
   104c5:	e8 78 ff ff ff       	call   10442 <init_gdt>
   104ca:	90                   	nop
   104cb:	5d                   	pop    %ebp
   104cc:	c3                   	ret    

000104cd <inb>:
//一些简单汇编的封装
#ifndef CPU_INSTR_H
#define CPU_INSTR_H
#include"types.h"
static inline uint8_t inb(uint16_t port){
   104cd:	55                   	push   %ebp
   104ce:	89 e5                	mov    %esp,%ebp
   104d0:	83 ec 14             	sub    $0x14,%esp
   104d3:	8b 45 08             	mov    0x8(%ebp),%eax
   104d6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t ret;
    __asm__ __volatile__("inb %[p], %[v]" : [v]"=a"(ret) : [p]"d"(port));
   104da:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   104de:	89 c2                	mov    %eax,%edx
   104e0:	ec                   	in     (%dx),%al
   104e1:	88 45 ff             	mov    %al,-0x1(%ebp)
    //"d"表示使用通用寄存器EDX来传递输入操作数
    //"a"表示将结果存储在寄存器EAX
    return ret;
   104e4:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   104e8:	c9                   	leave  
   104e9:	c3                   	ret    

000104ea <outb>:
static inline uint16_t inw(uint16_t port){
    uint16_t ret;
    __asm__ __volatile__("in %1, %0" : "=a" (ret) : "dN" (port));
    return ret;
}
static inline void outb(uint16_t port, uint8_t val){
   104ea:	55                   	push   %ebp
   104eb:	89 e5                	mov    %esp,%ebp
   104ed:	83 ec 08             	sub    $0x8,%esp
   104f0:	8b 55 08             	mov    0x8(%ebp),%edx
   104f3:	8b 45 0c             	mov    0xc(%ebp),%eax
   104f6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   104fa:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" : : [v]"a"(val), [p]"d"(port));
   104fd:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10501:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10505:	ee                   	out    %al,(%dx)
}
   10506:	90                   	nop
   10507:	c9                   	leave  
   10508:	c3                   	ret    

00010509 <cli>:
static inline void cli(){
   10509:	55                   	push   %ebp
   1050a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   1050c:	fa                   	cli    
}
   1050d:	90                   	nop
   1050e:	5d                   	pop    %ebp
   1050f:	c3                   	ret    

00010510 <sti>:
static inline void sti(){  
   10510:	55                   	push   %ebp
   10511:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   10513:	fb                   	sti    
}
   10514:	90                   	nop
   10515:	5d                   	pop    %ebp
   10516:	c3                   	ret    

00010517 <hlt>:
static inline void hlt(){
   10517:	55                   	push   %ebp
   10518:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1051a:	f4                   	hlt    
}
   1051b:	90                   	nop
   1051c:	5d                   	pop    %ebp
   1051d:	c3                   	ret    

0001051e <lidt>:
    gdt.start15_0=start&0xffff;
    gdt.start31_16=(start>>16)&0xff;
    __asm__ __volatile__("lgdt %[g]" : : [g]"m"(gdt));
    
}
static inline void lidt(uint32_t start,uint32_t size){
   1051e:	55                   	push   %ebp
   1051f:	89 e5                	mov    %esp,%ebp
   10521:	83 ec 10             	sub    $0x10,%esp
    {
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    }idt;
    idt.limit=size-1;   
   10524:	8b 45 0c             	mov    0xc(%ebp),%eax
   10527:	83 e8 01             	sub    $0x1,%eax
   1052a:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    idt.start15_0=start&0xffff;
   1052e:	8b 45 08             	mov    0x8(%ebp),%eax
   10531:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.start31_16=(start>>16)&0xff;
   10535:	8b 45 08             	mov    0x8(%ebp),%eax
   10538:	c1 e8 10             	shr    $0x10,%eax
   1053b:	0f b6 c0             	movzbl %al,%eax
   1053e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    __asm__ __volatile__("lidt %0"::"m"(idt));
   10542:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10546:	90                   	nop
   10547:	c9                   	leave  
   10548:	c3                   	ret    

00010549 <read_cr2>:
    return ret;
}
static inline void write_cr0(uint32_t val){
    __asm__ __volatile__("mov %[v], %%cr0" : : [v]"r"(val));
}
static inline uint32_t read_cr2(){
   10549:	55                   	push   %ebp
   1054a:	89 e5                	mov    %esp,%ebp
   1054c:	83 ec 10             	sub    $0x10,%esp
    uint32_t ret;
    __asm__ __volatile__("mov %%cr2, %[v]" : [v]"=r"(ret));
   1054f:	0f 20 d0             	mov    %cr2,%eax
   10552:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return ret;
   10555:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10558:	c9                   	leave  
   10559:	c3                   	ret    

0001055a <read_eflags>:
    __asm__ __volatile__("mov %[v], %%cr4" : : [v]"r"(val));
}
static inline void write_tr(uint16_t tss_sel){
    __asm__ __volatile__("ltr %%ax" : : "a"(tss_sel));
}
static inline uint32_t read_eflags(){
   1055a:	55                   	push   %ebp
   1055b:	89 e5                	mov    %esp,%ebp
   1055d:	83 ec 10             	sub    $0x10,%esp
    //标志寄存器和其他寄存器不太一样不能直接通过mov指令来读取
    uint32_t ret;
    __asm__ __volatile__("pushfl; popl %%eax" : "=a"(ret));
   10560:	9c                   	pushf  
   10561:	58                   	pop    %eax
   10562:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return ret;
   10565:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10568:	c9                   	leave  
   10569:	c3                   	ret    

0001056a <write_eflags>:
static inline void write_eflags(uint32_t val){
   1056a:	55                   	push   %ebp
   1056b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("pushl %%eax; popfl" : : "a"(val));
   1056d:	8b 45 08             	mov    0x8(%ebp),%eax
   10570:	50                   	push   %eax
   10571:	9d                   	popf   
}
   10572:	90                   	nop
   10573:	5d                   	pop    %ebp
   10574:	c3                   	ret    

00010575 <dump_core_regs>:
#include "tools/log.h"
#include "os_cfg.h"
#define IDT_TABLE_NR 128
static gate_desc_t idt_table[IDT_TABLE_NR];

static void dump_core_regs(exception_frame_t*frame){
   10575:	55                   	push   %ebp
   10576:	89 e5                	mov    %esp,%ebp
   10578:	57                   	push   %edi
   10579:	56                   	push   %esi
   1057a:	53                   	push   %ebx
   1057b:	83 ec 1c             	sub    $0x1c,%esp
    uint32_t esp,ss;
    if(frame->cs&0x7){
   1057e:	8b 45 08             	mov    0x8(%ebp),%eax
   10581:	8b 40 3c             	mov    0x3c(%eax),%eax
   10584:	83 e0 07             	and    $0x7,%eax
   10587:	85 c0                	test   %eax,%eax
   10589:	74 14                	je     1059f <dump_core_regs+0x2a>
        ss=frame->ds;
   1058b:	8b 45 08             	mov    0x8(%ebp),%eax
   1058e:	8b 40 0c             	mov    0xc(%eax),%eax
   10591:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp=frame->esp;
   10594:	8b 45 08             	mov    0x8(%ebp),%eax
   10597:	8b 40 1c             	mov    0x1c(%eax),%eax
   1059a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1059d:	eb 12                	jmp    105b1 <dump_core_regs+0x3c>
    }else{
        ss=frame->ss3;
   1059f:	8b 45 08             	mov    0x8(%ebp),%eax
   105a2:	8b 40 48             	mov    0x48(%eax),%eax
   105a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp=frame->esp3;
   105a8:	8b 45 08             	mov    0x8(%ebp),%eax
   105ab:	8b 40 44             	mov    0x44(%eax),%eax
   105ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }
    log_printf("IRQ:%d,error code:%d.",frame->num,frame->error_code);
   105b1:	8b 45 08             	mov    0x8(%ebp),%eax
   105b4:	8b 50 34             	mov    0x34(%eax),%edx
   105b7:	8b 45 08             	mov    0x8(%ebp),%eax
   105ba:	8b 40 30             	mov    0x30(%eax),%eax
   105bd:	83 ec 04             	sub    $0x4,%esp
   105c0:	52                   	push   %edx
   105c1:	50                   	push   %eax
   105c2:	68 68 20 01 00       	push   $0x12068
   105c7:	e8 8d 0f 00 00       	call   11559 <log_printf>
   105cc:	83 c4 10             	add    $0x10,%esp
    log_printf("CS:%d\nDS:%d\nES:%d\nSS:%d\nFS:%d\nGS:%d",frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
   105cf:	8b 45 08             	mov    0x8(%ebp),%eax
   105d2:	8b 38                	mov    (%eax),%edi
   105d4:	8b 45 08             	mov    0x8(%ebp),%eax
   105d7:	8b 70 04             	mov    0x4(%eax),%esi
   105da:	8b 45 08             	mov    0x8(%ebp),%eax
   105dd:	8b 58 0c             	mov    0xc(%eax),%ebx
   105e0:	8b 45 08             	mov    0x8(%ebp),%eax
   105e3:	8b 48 08             	mov    0x8(%eax),%ecx
   105e6:	8b 45 08             	mov    0x8(%ebp),%eax
   105e9:	8b 50 0c             	mov    0xc(%eax),%edx
   105ec:	8b 45 08             	mov    0x8(%ebp),%eax
   105ef:	8b 40 3c             	mov    0x3c(%eax),%eax
   105f2:	83 ec 04             	sub    $0x4,%esp
   105f5:	57                   	push   %edi
   105f6:	56                   	push   %esi
   105f7:	53                   	push   %ebx
   105f8:	51                   	push   %ecx
   105f9:	52                   	push   %edx
   105fa:	50                   	push   %eax
   105fb:	68 80 20 01 00       	push   $0x12080
   10600:	e8 54 0f 00 00       	call   11559 <log_printf>
   10605:	83 c4 20             	add    $0x20,%esp
    log_printf("EAX:0x%x\n",frame->eax);
   10608:	8b 45 08             	mov    0x8(%ebp),%eax
   1060b:	8b 40 2c             	mov    0x2c(%eax),%eax
   1060e:	83 ec 08             	sub    $0x8,%esp
   10611:	50                   	push   %eax
   10612:	68 a4 20 01 00       	push   $0x120a4
   10617:	e8 3d 0f 00 00       	call   11559 <log_printf>
   1061c:	83 c4 10             	add    $0x10,%esp
    log_printf("EBX:0x%x\n",frame->ebx);
   1061f:	8b 45 08             	mov    0x8(%ebp),%eax
   10622:	8b 40 20             	mov    0x20(%eax),%eax
   10625:	83 ec 08             	sub    $0x8,%esp
   10628:	50                   	push   %eax
   10629:	68 ae 20 01 00       	push   $0x120ae
   1062e:	e8 26 0f 00 00       	call   11559 <log_printf>
   10633:	83 c4 10             	add    $0x10,%esp
    log_printf("ECX:0x%x\n",frame->ecx);
   10636:	8b 45 08             	mov    0x8(%ebp),%eax
   10639:	8b 40 28             	mov    0x28(%eax),%eax
   1063c:	83 ec 08             	sub    $0x8,%esp
   1063f:	50                   	push   %eax
   10640:	68 b8 20 01 00       	push   $0x120b8
   10645:	e8 0f 0f 00 00       	call   11559 <log_printf>
   1064a:	83 c4 10             	add    $0x10,%esp
    log_printf("EDX:0x%x\n",frame->edx);
   1064d:	8b 45 08             	mov    0x8(%ebp),%eax
   10650:	8b 40 24             	mov    0x24(%eax),%eax
   10653:	83 ec 08             	sub    $0x8,%esp
   10656:	50                   	push   %eax
   10657:	68 c2 20 01 00       	push   $0x120c2
   1065c:	e8 f8 0e 00 00       	call   11559 <log_printf>
   10661:	83 c4 10             	add    $0x10,%esp
    log_printf("ESI:0x%x\n",frame->esi);
   10664:	8b 45 08             	mov    0x8(%ebp),%eax
   10667:	8b 40 14             	mov    0x14(%eax),%eax
   1066a:	83 ec 08             	sub    $0x8,%esp
   1066d:	50                   	push   %eax
   1066e:	68 cc 20 01 00       	push   $0x120cc
   10673:	e8 e1 0e 00 00       	call   11559 <log_printf>
   10678:	83 c4 10             	add    $0x10,%esp
    log_printf("EDI:0x%x\n",frame->edi);
   1067b:	8b 45 08             	mov    0x8(%ebp),%eax
   1067e:	8b 40 10             	mov    0x10(%eax),%eax
   10681:	83 ec 08             	sub    $0x8,%esp
   10684:	50                   	push   %eax
   10685:	68 d6 20 01 00       	push   $0x120d6
   1068a:	e8 ca 0e 00 00       	call   11559 <log_printf>
   1068f:	83 c4 10             	add    $0x10,%esp
    log_printf("EBP:0x%x\n",frame->ebp);
   10692:	8b 45 08             	mov    0x8(%ebp),%eax
   10695:	8b 40 18             	mov    0x18(%eax),%eax
   10698:	83 ec 08             	sub    $0x8,%esp
   1069b:	50                   	push   %eax
   1069c:	68 e0 20 01 00       	push   $0x120e0
   106a1:	e8 b3 0e 00 00       	call   11559 <log_printf>
   106a6:	83 c4 10             	add    $0x10,%esp
    log_printf("ESP:0x%x\n",esp);
   106a9:	83 ec 08             	sub    $0x8,%esp
   106ac:	ff 75 e4             	pushl  -0x1c(%ebp)
   106af:	68 ea 20 01 00       	push   $0x120ea
   106b4:	e8 a0 0e 00 00       	call   11559 <log_printf>
   106b9:	83 c4 10             	add    $0x10,%esp
    log_printf("EIP:0x%x\n",frame->eip);
   106bc:	8b 45 08             	mov    0x8(%ebp),%eax
   106bf:	8b 40 38             	mov    0x38(%eax),%eax
   106c2:	83 ec 08             	sub    $0x8,%esp
   106c5:	50                   	push   %eax
   106c6:	68 f4 20 01 00       	push   $0x120f4
   106cb:	e8 89 0e 00 00       	call   11559 <log_printf>
   106d0:	83 c4 10             	add    $0x10,%esp
    log_printf("EFLAGS:0x%x\n",frame->eflags);
   106d3:	8b 45 08             	mov    0x8(%ebp),%eax
   106d6:	8b 40 40             	mov    0x40(%eax),%eax
   106d9:	83 ec 08             	sub    $0x8,%esp
   106dc:	50                   	push   %eax
   106dd:	68 fe 20 01 00       	push   $0x120fe
   106e2:	e8 72 0e 00 00       	call   11559 <log_printf>
   106e7:	83 c4 10             	add    $0x10,%esp
}
   106ea:	90                   	nop
   106eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
   106ee:	5b                   	pop    %ebx
   106ef:	5e                   	pop    %esi
   106f0:	5f                   	pop    %edi
   106f1:	5d                   	pop    %ebp
   106f2:	c3                   	ret    

000106f3 <do_default_handler>:
static void do_default_handler(exception_frame_t*frame,const char*message){
   106f3:	55                   	push   %ebp
   106f4:	89 e5                	mov    %esp,%ebp
   106f6:	83 ec 08             	sub    $0x8,%esp
    log_printf("----------------");
   106f9:	83 ec 0c             	sub    $0xc,%esp
   106fc:	68 0b 21 01 00       	push   $0x1210b
   10701:	e8 53 0e 00 00       	call   11559 <log_printf>
   10706:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend:%s.",message);
   10709:	83 ec 08             	sub    $0x8,%esp
   1070c:	ff 75 0c             	pushl  0xc(%ebp)
   1070f:	68 1c 21 01 00       	push   $0x1211c
   10714:	e8 40 0e 00 00       	call   11559 <log_printf>
   10719:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   1071c:	83 ec 0c             	sub    $0xc,%esp
   1071f:	ff 75 08             	pushl  0x8(%ebp)
   10722:	e8 4e fe ff ff       	call   10575 <dump_core_regs>
   10727:	83 c4 10             	add    $0x10,%esp
    log_printf("----------------");
   1072a:	83 ec 0c             	sub    $0xc,%esp
   1072d:	68 0b 21 01 00       	push   $0x1210b
   10732:	e8 22 0e 00 00       	call   11559 <log_printf>
   10737:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   1073a:	e8 d8 fd ff ff       	call   10517 <hlt>
    }
   1073f:	eb f9                	jmp    1073a <do_default_handler+0x47>

00010741 <do_handler_unknown>:
}
void do_handler_unknown(exception_frame_t*frame){
   10741:	55                   	push   %ebp
   10742:	89 e5                	mov    %esp,%ebp
   10744:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Unknown exception happend.");
   10747:	83 ec 08             	sub    $0x8,%esp
   1074a:	68 36 21 01 00       	push   $0x12136
   1074f:	ff 75 08             	pushl  0x8(%ebp)
   10752:	e8 9c ff ff ff       	call   106f3 <do_default_handler>
   10757:	83 c4 10             	add    $0x10,%esp
}
   1075a:	90                   	nop
   1075b:	c9                   	leave  
   1075c:	c3                   	ret    

0001075d <do_handler_driver>:
void do_handler_driver(exception_frame_t*frame){
   1075d:	55                   	push   %ebp
   1075e:	89 e5                	mov    %esp,%ebp
   10760:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Driver exception happend.");
   10763:	83 ec 08             	sub    $0x8,%esp
   10766:	68 51 21 01 00       	push   $0x12151
   1076b:	ff 75 08             	pushl  0x8(%ebp)
   1076e:	e8 80 ff ff ff       	call   106f3 <do_default_handler>
   10773:	83 c4 10             	add    $0x10,%esp
}
   10776:	90                   	nop
   10777:	c9                   	leave  
   10778:	c3                   	ret    

00010779 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t*frame){
   10779:	55                   	push   %ebp
   1077a:	89 e5                	mov    %esp,%ebp
   1077c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Debug exception happend.");
   1077f:	83 ec 08             	sub    $0x8,%esp
   10782:	68 6b 21 01 00       	push   $0x1216b
   10787:	ff 75 08             	pushl  0x8(%ebp)
   1078a:	e8 64 ff ff ff       	call   106f3 <do_default_handler>
   1078f:	83 c4 10             	add    $0x10,%esp
}
   10792:	90                   	nop
   10793:	c9                   	leave  
   10794:	c3                   	ret    

00010795 <do_handler_NMI>:
void do_handler_NMI(exception_frame_t*frame){
   10795:	55                   	push   %ebp
   10796:	89 e5                	mov    %esp,%ebp
   10798:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"NMI exception happend.");
   1079b:	83 ec 08             	sub    $0x8,%esp
   1079e:	68 84 21 01 00       	push   $0x12184
   107a3:	ff 75 08             	pushl  0x8(%ebp)
   107a6:	e8 48 ff ff ff       	call   106f3 <do_default_handler>
   107ab:	83 c4 10             	add    $0x10,%esp
}
   107ae:	90                   	nop
   107af:	c9                   	leave  
   107b0:	c3                   	ret    

000107b1 <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t*frame){
   107b1:	55                   	push   %ebp
   107b2:	89 e5                	mov    %esp,%ebp
   107b4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Breakpoint exception happend.");
   107b7:	83 ec 08             	sub    $0x8,%esp
   107ba:	68 9b 21 01 00       	push   $0x1219b
   107bf:	ff 75 08             	pushl  0x8(%ebp)
   107c2:	e8 2c ff ff ff       	call   106f3 <do_default_handler>
   107c7:	83 c4 10             	add    $0x10,%esp
}
   107ca:	90                   	nop
   107cb:	c9                   	leave  
   107cc:	c3                   	ret    

000107cd <do_handler_overflow>:
void do_handler_overflow(exception_frame_t*frame){
   107cd:	55                   	push   %ebp
   107ce:	89 e5                	mov    %esp,%ebp
   107d0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Overflow exception happend.");
   107d3:	83 ec 08             	sub    $0x8,%esp
   107d6:	68 b9 21 01 00       	push   $0x121b9
   107db:	ff 75 08             	pushl  0x8(%ebp)
   107de:	e8 10 ff ff ff       	call   106f3 <do_default_handler>
   107e3:	83 c4 10             	add    $0x10,%esp
}
   107e6:	90                   	nop
   107e7:	c9                   	leave  
   107e8:	c3                   	ret    

000107e9 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t*frame){
   107e9:	55                   	push   %ebp
   107ea:	89 e5                	mov    %esp,%ebp
   107ec:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Bound range exception happend.");
   107ef:	83 ec 08             	sub    $0x8,%esp
   107f2:	68 d8 21 01 00       	push   $0x121d8
   107f7:	ff 75 08             	pushl  0x8(%ebp)
   107fa:	e8 f4 fe ff ff       	call   106f3 <do_default_handler>
   107ff:	83 c4 10             	add    $0x10,%esp
}
   10802:	90                   	nop
   10803:	c9                   	leave  
   10804:	c3                   	ret    

00010805 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t*frame){
   10805:	55                   	push   %ebp
   10806:	89 e5                	mov    %esp,%ebp
   10808:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Invalid opcode exception happend.");
   1080b:	83 ec 08             	sub    $0x8,%esp
   1080e:	68 f8 21 01 00       	push   $0x121f8
   10813:	ff 75 08             	pushl  0x8(%ebp)
   10816:	e8 d8 fe ff ff       	call   106f3 <do_default_handler>
   1081b:	83 c4 10             	add    $0x10,%esp
}
   1081e:	90                   	nop
   1081f:	c9                   	leave  
   10820:	c3                   	ret    

00010821 <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t*frame){
   10821:	55                   	push   %ebp
   10822:	89 e5                	mov    %esp,%ebp
   10824:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Device unavailable exception happend.");
   10827:	83 ec 08             	sub    $0x8,%esp
   1082a:	68 1c 22 01 00       	push   $0x1221c
   1082f:	ff 75 08             	pushl  0x8(%ebp)
   10832:	e8 bc fe ff ff       	call   106f3 <do_default_handler>
   10837:	83 c4 10             	add    $0x10,%esp
}
   1083a:	90                   	nop
   1083b:	c9                   	leave  
   1083c:	c3                   	ret    

0001083d <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t*frame){
   1083d:	55                   	push   %ebp
   1083e:	89 e5                	mov    %esp,%ebp
   10840:	83 ec 08             	sub    $0x8,%esp
    do_default_handler (frame,"Double fault exception happend.");
   10843:	83 ec 08             	sub    $0x8,%esp
   10846:	68 44 22 01 00       	push   $0x12244
   1084b:	ff 75 08             	pushl  0x8(%ebp)
   1084e:	e8 a0 fe ff ff       	call   106f3 <do_default_handler>
   10853:	83 c4 10             	add    $0x10,%esp
}
   10856:	90                   	nop
   10857:	c9                   	leave  
   10858:	c3                   	ret    

00010859 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t*frame){
   10859:	55                   	push   %ebp
   1085a:	89 e5                	mov    %esp,%ebp
   1085c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Invalid TSS exception happend.");
   1085f:	83 ec 08             	sub    $0x8,%esp
   10862:	68 64 22 01 00       	push   $0x12264
   10867:	ff 75 08             	pushl  0x8(%ebp)
   1086a:	e8 84 fe ff ff       	call   106f3 <do_default_handler>
   1086f:	83 c4 10             	add    $0x10,%esp
}
   10872:	90                   	nop
   10873:	c9                   	leave  
   10874:	c3                   	ret    

00010875 <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t*frame){
   10875:	55                   	push   %ebp
   10876:	89 e5                	mov    %esp,%ebp
   10878:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Segment not present exception happend.");
   1087b:	83 ec 08             	sub    $0x8,%esp
   1087e:	68 84 22 01 00       	push   $0x12284
   10883:	ff 75 08             	pushl  0x8(%ebp)
   10886:	e8 68 fe ff ff       	call   106f3 <do_default_handler>
   1088b:	83 c4 10             	add    $0x10,%esp
}
   1088e:	90                   	nop
   1088f:	c9                   	leave  
   10890:	c3                   	ret    

00010891 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t*frame){
   10891:	55                   	push   %ebp
   10892:	89 e5                	mov    %esp,%ebp
   10894:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Stack segment fault exception happend.");
   10897:	83 ec 08             	sub    $0x8,%esp
   1089a:	68 ac 22 01 00       	push   $0x122ac
   1089f:	ff 75 08             	pushl  0x8(%ebp)
   108a2:	e8 4c fe ff ff       	call   106f3 <do_default_handler>
   108a7:	83 c4 10             	add    $0x10,%esp
}
   108aa:	90                   	nop
   108ab:	c9                   	leave  
   108ac:	c3                   	ret    

000108ad <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t*frame){
   108ad:	55                   	push   %ebp
   108ae:	89 e5                	mov    %esp,%ebp
   108b0:	83 ec 08             	sub    $0x8,%esp

    log_printf("---------------------------");
   108b3:	83 ec 0c             	sub    $0xc,%esp
   108b6:	68 d3 22 01 00       	push   $0x122d3
   108bb:	e8 99 0c 00 00       	call   11559 <log_printf>
   108c0:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happened:General Protection");
   108c3:	83 ec 0c             	sub    $0xc,%esp
   108c6:	68 f0 22 01 00       	push   $0x122f0
   108cb:	e8 89 0c 00 00       	call   11559 <log_printf>
   108d0:	83 c4 10             	add    $0x10,%esp
    do_default_handler(frame,"General protection exception happend.");
   108d3:	83 ec 08             	sub    $0x8,%esp
   108d6:	68 1c 23 01 00       	push   $0x1231c
   108db:	ff 75 08             	pushl  0x8(%ebp)
   108de:	e8 10 fe ff ff       	call   106f3 <do_default_handler>
   108e3:	83 c4 10             	add    $0x10,%esp
        位1-2：表明导致异常的段选择子的描述符类型（0表示数据段，1表示代码段，2表示任务门描述符）。
        位3-4：表明访问段或门时的特权级（CPL）。
        位5：段描述符的存储（0为局部描述符表（LDT），1为全局描述符表（GDT））。
        位6-15：段或门选择子索引。
    */
    if(frame->error_code & ERR_EXT){
   108e6:	8b 45 08             	mov    0x8(%ebp),%eax
   108e9:	8b 40 34             	mov    0x34(%eax),%eax
   108ec:	83 e0 01             	and    $0x1,%eax
   108ef:	85 c0                	test   %eax,%eax
   108f1:	74 12                	je     10905 <do_handler_general_protection+0x58>
        log_printf("the exception occurred during delivery of an "
   108f3:	83 ec 0c             	sub    $0xc,%esp
   108f6:	68 44 23 01 00       	push   $0x12344
   108fb:	e8 59 0c 00 00       	call   11559 <log_printf>
   10900:	83 c4 10             	add    $0x10,%esp
   10903:	eb 10                	jmp    10915 <do_handler_general_protection+0x68>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    }else{
        log_printf("the exception occurred during delivery of a"
   10905:	83 ec 0c             	sub    $0xc,%esp
   10908:	68 c0 23 01 00       	push   $0x123c0
   1090d:	e8 47 0c 00 00       	call   11559 <log_printf>
   10912:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    if (frame->error_code & ERR_IDT) {
   10915:	8b 45 08             	mov    0x8(%ebp),%eax
   10918:	8b 40 34             	mov    0x34(%eax),%eax
   1091b:	83 e0 02             	and    $0x2,%eax
   1091e:	85 c0                	test   %eax,%eax
   10920:	74 12                	je     10934 <do_handler_general_protection+0x87>
        log_printf("the index portion of the error code refers "
   10922:	83 ec 0c             	sub    $0xc,%esp
   10925:	68 18 24 01 00       	push   $0x12418
   1092a:	e8 2a 0c 00 00       	call   11559 <log_printf>
   1092f:	83 c4 10             	add    $0x10,%esp
   10932:	eb 10                	jmp    10944 <do_handler_general_protection+0x97>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   10934:	83 ec 0c             	sub    $0xc,%esp
   10937:	68 64 24 01 00       	push   $0x12464
   1093c:	e8 18 0c 00 00       	call   11559 <log_printf>
   10941:	83 c4 10             	add    $0x10,%esp
    }
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   10944:	8b 45 08             	mov    0x8(%ebp),%eax
   10947:	8b 40 34             	mov    0x34(%eax),%eax
   1094a:	25 f8 ff 00 00       	and    $0xfff8,%eax
   1094f:	83 ec 08             	sub    $0x8,%esp
   10952:	50                   	push   %eax
   10953:	68 90 24 01 00       	push   $0x12490
   10958:	e8 fc 0b 00 00       	call   11559 <log_printf>
   1095d:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10960:	83 ec 0c             	sub    $0xc,%esp
   10963:	ff 75 08             	pushl  0x8(%ebp)
   10966:	e8 0a fc ff ff       	call   10575 <dump_core_regs>
   1096b:	83 c4 10             	add    $0x10,%esp
    while(1){
        hlt();
   1096e:	e8 a4 fb ff ff       	call   10517 <hlt>
    }
   10973:	eb f9                	jmp    1096e <do_handler_general_protection+0xc1>

00010975 <do_handler_page_fault>:
}
void do_handler_page_fault(exception_frame_t*frame){
   10975:	55                   	push   %ebp
   10976:	89 e5                	mov    %esp,%ebp
   10978:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   1097b:	83 ec 0c             	sub    $0xc,%esp
   1097e:	68 a4 24 01 00       	push   $0x124a4
   10983:	e8 d1 0b 00 00       	call   11559 <log_printf>
   10988:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   1098b:	83 ec 0c             	sub    $0xc,%esp
   1098e:	68 c8 24 01 00       	push   $0x124c8
   10993:	e8 c1 0b 00 00       	call   11559 <log_printf>
   10998:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   1099b:	8b 45 08             	mov    0x8(%ebp),%eax
   1099e:	8b 40 34             	mov    0x34(%eax),%eax
   109a1:	83 e0 01             	and    $0x1,%eax
   109a4:	85 c0                	test   %eax,%eax
   109a6:	74 18                	je     109c0 <do_handler_page_fault+0x4b>
        log_printf("\tpage-level protection violation: 0x%x.", read_cr2());
   109a8:	e8 9c fb ff ff       	call   10549 <read_cr2>
   109ad:	83 ec 08             	sub    $0x8,%esp
   109b0:	50                   	push   %eax
   109b1:	68 ec 24 01 00       	push   $0x124ec
   109b6:	e8 9e 0b 00 00       	call   11559 <log_printf>
   109bb:	83 c4 10             	add    $0x10,%esp
   109be:	eb 16                	jmp    109d6 <do_handler_page_fault+0x61>
    } else {
         log_printf("\tPage doesn't present 0x%x", read_cr2());
   109c0:	e8 84 fb ff ff       	call   10549 <read_cr2>
   109c5:	83 ec 08             	sub    $0x8,%esp
   109c8:	50                   	push   %eax
   109c9:	68 14 25 01 00       	push   $0x12514
   109ce:	e8 86 0b 00 00       	call   11559 <log_printf>
   109d3:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   109d6:	8b 45 08             	mov    0x8(%ebp),%eax
   109d9:	8b 40 34             	mov    0x34(%eax),%eax
   109dc:	83 e0 02             	and    $0x2,%eax
   109df:	85 c0                	test   %eax,%eax
   109e1:	74 12                	je     109f5 <do_handler_page_fault+0x80>
        log_printf("\tThe access causing the fault was a read.");
   109e3:	83 ec 0c             	sub    $0xc,%esp
   109e6:	68 30 25 01 00       	push   $0x12530
   109eb:	e8 69 0b 00 00       	call   11559 <log_printf>
   109f0:	83 c4 10             	add    $0x10,%esp
   109f3:	eb 10                	jmp    10a05 <do_handler_page_fault+0x90>
    } else {
        log_printf("\tThe access causing the fault was a write.");
   109f5:	83 ec 0c             	sub    $0xc,%esp
   109f8:	68 5c 25 01 00       	push   $0x1255c
   109fd:	e8 57 0b 00 00       	call   11559 <log_printf>
   10a02:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   10a05:	8b 45 08             	mov    0x8(%ebp),%eax
   10a08:	8b 40 34             	mov    0x34(%eax),%eax
   10a0b:	83 e0 02             	and    $0x2,%eax
   10a0e:	85 c0                	test   %eax,%eax
   10a10:	74 12                	je     10a24 <do_handler_page_fault+0xaf>
        log_printf("\tA supervisor-mode access caused the fault.");
   10a12:	83 ec 0c             	sub    $0xc,%esp
   10a15:	68 88 25 01 00       	push   $0x12588
   10a1a:	e8 3a 0b 00 00       	call   11559 <log_printf>
   10a1f:	83 c4 10             	add    $0x10,%esp
   10a22:	eb 10                	jmp    10a34 <do_handler_page_fault+0xbf>
    } else {
        log_printf("\tA user-mode access caused the fault.");
   10a24:	83 ec 0c             	sub    $0xc,%esp
   10a27:	68 b4 25 01 00       	push   $0x125b4
   10a2c:	e8 28 0b 00 00       	call   11559 <log_printf>
   10a31:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   10a34:	83 ec 0c             	sub    $0xc,%esp
   10a37:	ff 75 08             	pushl  0x8(%ebp)
   10a3a:	e8 36 fb ff ff       	call   10575 <dump_core_regs>
   10a3f:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   10a42:	e8 d0 fa ff ff       	call   10517 <hlt>
    }
   10a47:	eb f9                	jmp    10a42 <do_handler_page_fault+0xcd>

00010a49 <do_handler_fpu_error>:
}

void do_handler_fpu_error(exception_frame_t*frame){
   10a49:	55                   	push   %ebp
   10a4a:	89 e5                	mov    %esp,%ebp
   10a4c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"FPU error exception happend.");
   10a4f:	83 ec 08             	sub    $0x8,%esp
   10a52:	68 da 25 01 00       	push   $0x125da
   10a57:	ff 75 08             	pushl  0x8(%ebp)
   10a5a:	e8 94 fc ff ff       	call   106f3 <do_default_handler>
   10a5f:	83 c4 10             	add    $0x10,%esp
}
   10a62:	90                   	nop
   10a63:	c9                   	leave  
   10a64:	c3                   	ret    

00010a65 <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t*frame){
   10a65:	55                   	push   %ebp
   10a66:	89 e5                	mov    %esp,%ebp
   10a68:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Alignment check exception happend.");
   10a6b:	83 ec 08             	sub    $0x8,%esp
   10a6e:	68 f8 25 01 00       	push   $0x125f8
   10a73:	ff 75 08             	pushl  0x8(%ebp)
   10a76:	e8 78 fc ff ff       	call   106f3 <do_default_handler>
   10a7b:	83 c4 10             	add    $0x10,%esp
}
   10a7e:	90                   	nop
   10a7f:	c9                   	leave  
   10a80:	c3                   	ret    

00010a81 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t*frame){
   10a81:	55                   	push   %ebp
   10a82:	89 e5                	mov    %esp,%ebp
   10a84:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Machine check exception happend.");
   10a87:	83 ec 08             	sub    $0x8,%esp
   10a8a:	68 1c 26 01 00       	push   $0x1261c
   10a8f:	ff 75 08             	pushl  0x8(%ebp)
   10a92:	e8 5c fc ff ff       	call   106f3 <do_default_handler>
   10a97:	83 c4 10             	add    $0x10,%esp
}
   10a9a:	90                   	nop
   10a9b:	c9                   	leave  
   10a9c:	c3                   	ret    

00010a9d <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t*frame){
   10a9d:	55                   	push   %ebp
   10a9e:	89 e5                	mov    %esp,%ebp
   10aa0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"SMD exception happend.");
   10aa3:	83 ec 08             	sub    $0x8,%esp
   10aa6:	68 3d 26 01 00       	push   $0x1263d
   10aab:	ff 75 08             	pushl  0x8(%ebp)
   10aae:	e8 40 fc ff ff       	call   106f3 <do_default_handler>
   10ab3:	83 c4 10             	add    $0x10,%esp
}
   10ab6:	90                   	nop
   10ab7:	c9                   	leave  
   10ab8:	c3                   	ret    

00010ab9 <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t*frame){
   10ab9:	55                   	push   %ebp
   10aba:	89 e5                	mov    %esp,%ebp
   10abc:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"Virtual exception happend.");
   10abf:	83 ec 08             	sub    $0x8,%esp
   10ac2:	68 54 26 01 00       	push   $0x12654
   10ac7:	ff 75 08             	pushl  0x8(%ebp)
   10aca:	e8 24 fc ff ff       	call   106f3 <do_default_handler>
   10acf:	83 c4 10             	add    $0x10,%esp
}
   10ad2:	90                   	nop
   10ad3:	c9                   	leave  
   10ad4:	c3                   	ret    

00010ad5 <init_pic>:
static void init_pic(void){
   10ad5:	55                   	push   %ebp
   10ad6:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10ad8:	6a 11                	push   $0x11
   10ada:	6a 20                	push   $0x20
   10adc:	e8 09 fa ff ff       	call   104ea <outb>
   10ae1:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   10ae4:	6a 20                	push   $0x20
   10ae6:	6a 21                	push   $0x21
   10ae8:	e8 fd f9 ff ff       	call   104ea <outb>
   10aed:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   10af0:	6a 04                	push   $0x4
   10af2:	6a 21                	push   $0x21
   10af4:	e8 f1 f9 ff ff       	call   104ea <outb>
   10af9:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10afc:	6a 01                	push   $0x1
   10afe:	6a 21                	push   $0x21
   10b00:	e8 e5 f9 ff ff       	call   104ea <outb>
   10b05:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10b08:	6a 11                	push   $0x11
   10b0a:	68 a0 00 00 00       	push   $0xa0
   10b0f:	e8 d6 f9 ff ff       	call   104ea <outb>
   10b14:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10b17:	6a 28                	push   $0x28
   10b19:	68 a1 00 00 00       	push   $0xa1
   10b1e:	e8 c7 f9 ff ff       	call   104ea <outb>
   10b23:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   10b26:	6a 02                	push   $0x2
   10b28:	68 a1 00 00 00       	push   $0xa1
   10b2d:	e8 b8 f9 ff ff       	call   104ea <outb>
   10b32:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10b35:	6a 01                	push   $0x1
   10b37:	68 a1 00 00 00       	push   $0xa1
   10b3c:	e8 a9 f9 ff ff       	call   104ea <outb>
   10b41:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10b44:	68 fb 00 00 00       	push   $0xfb
   10b49:	6a 21                	push   $0x21
   10b4b:	e8 9a f9 ff ff       	call   104ea <outb>
   10b50:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10b53:	68 ff 00 00 00       	push   $0xff
   10b58:	68 a1 00 00 00       	push   $0xa1
   10b5d:	e8 88 f9 ff ff       	call   104ea <outb>
   10b62:	83 c4 08             	add    $0x8,%esp
}
   10b65:	90                   	nop
   10b66:	c9                   	leave  
   10b67:	c3                   	ret    

00010b68 <pic_send_eoi>:

void pic_send_eoi(int irq_num){
   10b68:	55                   	push   %ebp
   10b69:	89 e5                	mov    %esp,%ebp
    irq_num-=IRQ_PIC_START;
   10b6b:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num>=8){
   10b6f:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10b73:	7e 0f                	jle    10b84 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   10b75:	6a 20                	push   $0x20
   10b77:	68 a0 00 00 00       	push   $0xa0
   10b7c:	e8 69 f9 ff ff       	call   104ea <outb>
   10b81:	83 c4 08             	add    $0x8,%esp

    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   10b84:	6a 20                	push   $0x20
   10b86:	6a 20                	push   $0x20
   10b88:	e8 5d f9 ff ff       	call   104ea <outb>
   10b8d:	83 c4 08             	add    $0x8,%esp
}
   10b90:	90                   	nop
   10b91:	c9                   	leave  
   10b92:	c3                   	ret    

00010b93 <irq_install>:
int irq_install(int irq_num,irq_handler_t handler){
   10b93:	55                   	push   %ebp
   10b94:	89 e5                	mov    %esp,%ebp
   10b96:	83 ec 08             	sub    $0x8,%esp
    if(irq_num<0||irq_num>=IDT_TABLE_NR){
   10b99:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b9d:	78 06                	js     10ba5 <irq_install+0x12>
   10b9f:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10ba3:	7e 07                	jle    10bac <irq_install+0x19>
        return -1;
   10ba5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10baa:	eb 25                	jmp    10bd1 <irq_install+0x3e>
    }
    gate_desc_set(idt_table+irq_num,KERNEL_SELECTOR_CS,(uint32_t)handler, 
   10bac:	8b 45 0c             	mov    0xc(%ebp),%eax
   10baf:	0f b7 c0             	movzwl %ax,%eax
   10bb2:	8b 55 08             	mov    0x8(%ebp),%edx
   10bb5:	c1 e2 03             	shl    $0x3,%edx
   10bb8:	81 c2 20 2f 01 00    	add    $0x12f20,%edx
   10bbe:	6a 00                	push   $0x0
   10bc0:	50                   	push   %eax
   10bc1:	6a 08                	push   $0x8
   10bc3:	52                   	push   %edx
   10bc4:	e8 ee f7 ff ff       	call   103b7 <gate_desc_set>
   10bc9:	83 c4 10             	add    $0x10,%esp
        GATE_P_PRESENT|GATE_DPL0|GATE_TYPE_IDT);
    return 0;
   10bcc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10bd1:	c9                   	leave  
   10bd2:	c3                   	ret    

00010bd3 <irq_init>:
void irq_init(){
   10bd3:	55                   	push   %ebp
   10bd4:	89 e5                	mov    %esp,%ebp
   10bd6:	83 ec 18             	sub    $0x18,%esp
    //安装中断描述符
    //如果不需要借助栈段传参的话可以直接安装在idt表中
    for(int i=0;i<IDT_TABLE_NR;i++){
   10bd9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10be0:	eb 26                	jmp    10c08 <irq_init+0x35>
        gate_desc_set(idt_table+i,KERNEL_SELECTOR_CS,(uint32_t)do_handler_unknown, 
   10be2:	b8 41 07 01 00       	mov    $0x10741,%eax
   10be7:	0f b7 c0             	movzwl %ax,%eax
   10bea:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10bed:	c1 e2 03             	shl    $0x3,%edx
   10bf0:	81 c2 20 2f 01 00    	add    $0x12f20,%edx
   10bf6:	6a 00                	push   $0x0
   10bf8:	50                   	push   %eax
   10bf9:	6a 08                	push   $0x8
   10bfb:	52                   	push   %edx
   10bfc:	e8 b6 f7 ff ff       	call   103b7 <gate_desc_set>
   10c01:	83 c4 10             	add    $0x10,%esp
    return 0;
}
void irq_init(){
    //安装中断描述符
    //如果不需要借助栈段传参的话可以直接安装在idt表中
    for(int i=0;i<IDT_TABLE_NR;i++){
   10c04:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10c08:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10c0c:	7e d4                	jle    10be2 <irq_init+0xf>
        gate_desc_set(idt_table+i,KERNEL_SELECTOR_CS,(uint32_t)do_handler_unknown, 
            GATE_P_PRESENT|GATE_DPL0|GATE_TYPE_IDT);
    }
    irq_install(IRQ0_DE,do_handler_driver);
   10c0e:	83 ec 08             	sub    $0x8,%esp
   10c11:	68 5d 07 01 00       	push   $0x1075d
   10c16:	6a 00                	push   $0x0
   10c18:	e8 76 ff ff ff       	call   10b93 <irq_install>
   10c1d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB,do_handler_Debug);
   10c20:	83 ec 08             	sub    $0x8,%esp
   10c23:	68 79 07 01 00       	push   $0x10779
   10c28:	6a 01                	push   $0x1
   10c2a:	e8 64 ff ff ff       	call   10b93 <irq_install>
   10c2f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI,do_handler_NMI);
   10c32:	83 ec 08             	sub    $0x8,%esp
   10c35:	68 95 07 01 00       	push   $0x10795
   10c3a:	6a 02                	push   $0x2
   10c3c:	e8 52 ff ff ff       	call   10b93 <irq_install>
   10c41:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP,do_handler_breakpoint);
   10c44:	83 ec 08             	sub    $0x8,%esp
   10c47:	68 b1 07 01 00       	push   $0x107b1
   10c4c:	6a 03                	push   $0x3
   10c4e:	e8 40 ff ff ff       	call   10b93 <irq_install>
   10c53:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF,do_handler_overflow);
   10c56:	83 ec 08             	sub    $0x8,%esp
   10c59:	68 cd 07 01 00       	push   $0x107cd
   10c5e:	6a 04                	push   $0x4
   10c60:	e8 2e ff ff ff       	call   10b93 <irq_install>
   10c65:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR,do_handler_bound_range);
   10c68:	83 ec 08             	sub    $0x8,%esp
   10c6b:	68 e9 07 01 00       	push   $0x107e9
   10c70:	6a 05                	push   $0x5
   10c72:	e8 1c ff ff ff       	call   10b93 <irq_install>
   10c77:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD,do_handler_invalid_opcode);
   10c7a:	83 ec 08             	sub    $0x8,%esp
   10c7d:	68 05 08 01 00       	push   $0x10805
   10c82:	6a 06                	push   $0x6
   10c84:	e8 0a ff ff ff       	call   10b93 <irq_install>
   10c89:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM,do_handler_device_unavailable);
   10c8c:	83 ec 08             	sub    $0x8,%esp
   10c8f:	68 21 08 01 00       	push   $0x10821
   10c94:	6a 07                	push   $0x7
   10c96:	e8 f8 fe ff ff       	call   10b93 <irq_install>
   10c9b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF,do_handler_double_fault);
   10c9e:	83 ec 08             	sub    $0x8,%esp
   10ca1:	68 3d 08 01 00       	push   $0x1083d
   10ca6:	6a 08                	push   $0x8
   10ca8:	e8 e6 fe ff ff       	call   10b93 <irq_install>
   10cad:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS,do_handler_invalid_tss);
   10cb0:	83 ec 08             	sub    $0x8,%esp
   10cb3:	68 59 08 01 00       	push   $0x10859
   10cb8:	6a 0a                	push   $0xa
   10cba:	e8 d4 fe ff ff       	call   10b93 <irq_install>
   10cbf:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP,do_handler_segment_not_present);
   10cc2:	83 ec 08             	sub    $0x8,%esp
   10cc5:	68 75 08 01 00       	push   $0x10875
   10cca:	6a 0b                	push   $0xb
   10ccc:	e8 c2 fe ff ff       	call   10b93 <irq_install>
   10cd1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS,do_handler_stack_segment_fault);
   10cd4:	83 ec 08             	sub    $0x8,%esp
   10cd7:	68 91 08 01 00       	push   $0x10891
   10cdc:	6a 0c                	push   $0xc
   10cde:	e8 b0 fe ff ff       	call   10b93 <irq_install>
   10ce3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP,do_handler_general_protection);
   10ce6:	83 ec 08             	sub    $0x8,%esp
   10ce9:	68 ad 08 01 00       	push   $0x108ad
   10cee:	6a 0d                	push   $0xd
   10cf0:	e8 9e fe ff ff       	call   10b93 <irq_install>
   10cf5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF,do_handler_page_fault);
   10cf8:	83 ec 08             	sub    $0x8,%esp
   10cfb:	68 75 09 01 00       	push   $0x10975
   10d00:	6a 0e                	push   $0xe
   10d02:	e8 8c fe ff ff       	call   10b93 <irq_install>
   10d07:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF,do_handler_fpu_error); 
   10d0a:	83 ec 08             	sub    $0x8,%esp
   10d0d:	68 49 0a 01 00       	push   $0x10a49
   10d12:	6a 10                	push   $0x10
   10d14:	e8 7a fe ff ff       	call   10b93 <irq_install>
   10d19:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC,do_handler_alignment_check);
   10d1c:	83 ec 08             	sub    $0x8,%esp
   10d1f:	68 65 0a 01 00       	push   $0x10a65
   10d24:	6a 11                	push   $0x11
   10d26:	e8 68 fe ff ff       	call   10b93 <irq_install>
   10d2b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC,do_handler_machine_check);
   10d2e:	83 ec 08             	sub    $0x8,%esp
   10d31:	68 81 0a 01 00       	push   $0x10a81
   10d36:	6a 12                	push   $0x12
   10d38:	e8 56 fe ff ff       	call   10b93 <irq_install>
   10d3d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM,do_handler_smd_exception);
   10d40:	83 ec 08             	sub    $0x8,%esp
   10d43:	68 9d 0a 01 00       	push   $0x10a9d
   10d48:	6a 13                	push   $0x13
   10d4a:	e8 44 fe ff ff       	call   10b93 <irq_install>
   10d4f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE,do_handler_virtual_exception);
   10d52:	83 ec 08             	sub    $0x8,%esp
   10d55:	68 b9 0a 01 00       	push   $0x10ab9
   10d5a:	6a 14                	push   $0x14
   10d5c:	e8 32 fe ff ff       	call   10b93 <irq_install>
   10d61:	83 c4 10             	add    $0x10,%esp
    lidt((uint32_t)idt_table,sizeof(idt_table));
   10d64:	b8 20 2f 01 00       	mov    $0x12f20,%eax
   10d69:	83 ec 08             	sub    $0x8,%esp
   10d6c:	68 00 04 00 00       	push   $0x400
   10d71:	50                   	push   %eax
   10d72:	e8 a7 f7 ff ff       	call   1051e <lidt>
   10d77:	83 c4 10             	add    $0x10,%esp
    init_pic();
   10d7a:	e8 56 fd ff ff       	call   10ad5 <init_pic>
}
   10d7f:	90                   	nop
   10d80:	c9                   	leave  
   10d81:	c3                   	ret    

00010d82 <irq_enable>:
void irq_enable(int irq_num){
   10d82:	55                   	push   %ebp
   10d83:	89 e5                	mov    %esp,%ebp
   10d85:	53                   	push   %ebx
   10d86:	83 ec 10             	sub    $0x10,%esp
    if(irq_num<IRQ_PIC_START){
   10d89:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10d8d:	7e 78                	jle    10e07 <irq_enable+0x85>
        return;
    }
    irq_num-=IRQ_PIC_START;
   10d8f:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num<8){
   10d93:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d97:	7f 32                	jg     10dcb <irq_enable+0x49>
        uint8_t mask=inb(PIC0_IMR)&~(1<<irq_num);
   10d99:	6a 21                	push   $0x21
   10d9b:	e8 2d f7 ff ff       	call   104cd <inb>
   10da0:	83 c4 04             	add    $0x4,%esp
   10da3:	89 c2                	mov    %eax,%edx
   10da5:	8b 45 08             	mov    0x8(%ebp),%eax
   10da8:	bb 01 00 00 00       	mov    $0x1,%ebx
   10dad:	89 c1                	mov    %eax,%ecx
   10daf:	d3 e3                	shl    %cl,%ebx
   10db1:	89 d8                	mov    %ebx,%eax
   10db3:	f7 d0                	not    %eax
   10db5:	21 d0                	and    %edx,%eax
   10db7:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC0_IMR,mask);
   10dba:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10dbe:	50                   	push   %eax
   10dbf:	6a 21                	push   $0x21
   10dc1:	e8 24 f7 ff ff       	call   104ea <outb>
   10dc6:	83 c4 08             	add    $0x8,%esp
   10dc9:	eb 3d                	jmp    10e08 <irq_enable+0x86>
    }else{
        irq_num-=8;
   10dcb:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask=inb(PIC1_IMR)&~(1<<irq_num);
   10dcf:	68 a1 00 00 00       	push   $0xa1
   10dd4:	e8 f4 f6 ff ff       	call   104cd <inb>
   10dd9:	83 c4 04             	add    $0x4,%esp
   10ddc:	89 c2                	mov    %eax,%edx
   10dde:	8b 45 08             	mov    0x8(%ebp),%eax
   10de1:	bb 01 00 00 00       	mov    $0x1,%ebx
   10de6:	89 c1                	mov    %eax,%ecx
   10de8:	d3 e3                	shl    %cl,%ebx
   10dea:	89 d8                	mov    %ebx,%eax
   10dec:	f7 d0                	not    %eax
   10dee:	21 d0                	and    %edx,%eax
   10df0:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC1_IMR,mask);
   10df3:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10df7:	50                   	push   %eax
   10df8:	68 a1 00 00 00       	push   $0xa1
   10dfd:	e8 e8 f6 ff ff       	call   104ea <outb>
   10e02:	83 c4 08             	add    $0x8,%esp
   10e05:	eb 01                	jmp    10e08 <irq_enable+0x86>
    lidt((uint32_t)idt_table,sizeof(idt_table));
    init_pic();
}
void irq_enable(int irq_num){
    if(irq_num<IRQ_PIC_START){
        return;
   10e07:	90                   	nop
    }else{
        irq_num-=8;
        uint8_t mask=inb(PIC1_IMR)&~(1<<irq_num);
        outb(PIC1_IMR,mask);
    }
}
   10e08:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10e0b:	c9                   	leave  
   10e0c:	c3                   	ret    

00010e0d <irq_disable>:

void irq_disable(int irq_num){
   10e0d:	55                   	push   %ebp
   10e0e:	89 e5                	mov    %esp,%ebp
   10e10:	53                   	push   %ebx
   10e11:	83 ec 10             	sub    $0x10,%esp
    if(irq_num<IRQ_PIC_START){
   10e14:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10e18:	7e 74                	jle    10e8e <irq_disable+0x81>
        return ;
    }
    irq_num-=IRQ_PIC_START;
   10e1a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num<8){
   10e1e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10e22:	7f 30                	jg     10e54 <irq_disable+0x47>
        uint8_t mask=inb(PIC0_IMR)|(1<<irq_num);
   10e24:	6a 21                	push   $0x21
   10e26:	e8 a2 f6 ff ff       	call   104cd <inb>
   10e2b:	83 c4 04             	add    $0x4,%esp
   10e2e:	89 c3                	mov    %eax,%ebx
   10e30:	8b 45 08             	mov    0x8(%ebp),%eax
   10e33:	ba 01 00 00 00       	mov    $0x1,%edx
   10e38:	89 c1                	mov    %eax,%ecx
   10e3a:	d3 e2                	shl    %cl,%edx
   10e3c:	89 d0                	mov    %edx,%eax
   10e3e:	09 d8                	or     %ebx,%eax
   10e40:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC0_IMR,mask);
   10e43:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10e47:	50                   	push   %eax
   10e48:	6a 21                	push   $0x21
   10e4a:	e8 9b f6 ff ff       	call   104ea <outb>
   10e4f:	83 c4 08             	add    $0x8,%esp
   10e52:	eb 3b                	jmp    10e8f <irq_disable+0x82>
    }else{
        irq_num-=8;
   10e54:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask=inb(PIC1_IMR)|(1<<irq_num);
   10e58:	68 a1 00 00 00       	push   $0xa1
   10e5d:	e8 6b f6 ff ff       	call   104cd <inb>
   10e62:	83 c4 04             	add    $0x4,%esp
   10e65:	89 c3                	mov    %eax,%ebx
   10e67:	8b 45 08             	mov    0x8(%ebp),%eax
   10e6a:	ba 01 00 00 00       	mov    $0x1,%edx
   10e6f:	89 c1                	mov    %eax,%ecx
   10e71:	d3 e2                	shl    %cl,%edx
   10e73:	89 d0                	mov    %edx,%eax
   10e75:	09 d8                	or     %ebx,%eax
   10e77:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC1_IMR,mask);
   10e7a:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10e7e:	50                   	push   %eax
   10e7f:	68 a1 00 00 00       	push   $0xa1
   10e84:	e8 61 f6 ff ff       	call   104ea <outb>
   10e89:	83 c4 08             	add    $0x8,%esp
   10e8c:	eb 01                	jmp    10e8f <irq_disable+0x82>
    }
}

void irq_disable(int irq_num){
    if(irq_num<IRQ_PIC_START){
        return ;
   10e8e:	90                   	nop
    }else{
        irq_num-=8;
        uint8_t mask=inb(PIC1_IMR)|(1<<irq_num);
        outb(PIC1_IMR,mask);
    }
}
   10e8f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10e92:	c9                   	leave  
   10e93:	c3                   	ret    

00010e94 <irq_disable_global>:

void irq_disable_global(void){
   10e94:	55                   	push   %ebp
   10e95:	89 e5                	mov    %esp,%ebp
    cli();
   10e97:	e8 6d f6 ff ff       	call   10509 <cli>
}
   10e9c:	90                   	nop
   10e9d:	5d                   	pop    %ebp
   10e9e:	c3                   	ret    

00010e9f <irq_enable_global>:

void irq_enable_global(void){
   10e9f:	55                   	push   %ebp
   10ea0:	89 e5                	mov    %esp,%ebp
    sti();
   10ea2:	e8 69 f6 ff ff       	call   10510 <sti>
}
   10ea7:	90                   	nop
   10ea8:	5d                   	pop    %ebp
   10ea9:	c3                   	ret    

00010eaa <irq_enter_protection>:

irq_state_t irq_enter_protection(void){
   10eaa:	55                   	push   %ebp
   10eab:	89 e5                	mov    %esp,%ebp
   10ead:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state=read_eflags();
   10eb0:	e8 a5 f6 ff ff       	call   1055a <read_eflags>
   10eb5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   10eb8:	e8 d7 ff ff ff       	call   10e94 <irq_disable_global>
    return state;
   10ebd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10ec0:	c9                   	leave  
   10ec1:	c3                   	ret    

00010ec2 <irq_leave_protection>:

void irq_leave_protection(irq_state_t state){
   10ec2:	55                   	push   %ebp
   10ec3:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   10ec5:	ff 75 08             	pushl  0x8(%ebp)
   10ec8:	e8 9d f6 ff ff       	call   1056a <write_eflags>
   10ecd:	83 c4 04             	add    $0x4,%esp
   10ed0:	90                   	nop
   10ed1:	c9                   	leave  
   10ed2:	c3                   	ret    

00010ed3 <kernel_init>:
#include"os_cfg.h"
#include"dev/time.h"
#include"cpu/irq.h"

static boot_info_t*init_boot_info;
void kernel_init(boot_info_t*boot_info){
   10ed3:	55                   	push   %ebp
   10ed4:	89 e5                	mov    %esp,%ebp
   10ed6:	83 ec 08             	sub    $0x8,%esp
    init_boot_info=boot_info;
   10ed9:	8b 45 08             	mov    0x8(%ebp),%eax
   10edc:	a3 20 33 01 00       	mov    %eax,0x13320
    cpu_init(); //建立gdt表并加载
   10ee1:	e8 dc f5 ff ff       	call   104c2 <cpu_init>
    irq_init(); //初始化中断描述表
   10ee6:	e8 e8 fc ff ff       	call   10bd3 <irq_init>
    time_init(); //始终初始化 准备计时
   10eeb:	e8 26 01 00 00       	call   11016 <time_init>
}
   10ef0:	90                   	nop
   10ef1:	c9                   	leave  
   10ef2:	c3                   	ret    

00010ef3 <init_task_entry>:


void init_task_entry(void){
   10ef3:	55                   	push   %ebp
   10ef4:	89 e5                	mov    %esp,%ebp
   10ef6:	83 ec 18             	sub    $0x18,%esp
    int count=0;
   10ef9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("init task:%d",count++);
   10f00:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f03:	8d 50 01             	lea    0x1(%eax),%edx
   10f06:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10f09:	83 ec 08             	sub    $0x8,%esp
   10f0c:	50                   	push   %eax
   10f0d:	68 6f 26 01 00       	push   $0x1266f
   10f12:	e8 42 06 00 00       	call   11559 <log_printf>
   10f17:	83 c4 10             	add    $0x10,%esp
    }
   10f1a:	eb e4                	jmp    10f00 <init_task_entry+0xd>

00010f1c <init_main>:
}

void init_main(void){
   10f1c:	55                   	push   %ebp
   10f1d:	89 e5                	mov    %esp,%ebp
   10f1f:	83 ec 18             	sub    $0x18,%esp
    log_printf("Kernel is running...");
   10f22:	83 ec 0c             	sub    $0xc,%esp
   10f25:	68 7c 26 01 00       	push   $0x1267c
   10f2a:	e8 2a 06 00 00       	call   11559 <log_printf>
   10f2f:	83 c4 10             	add    $0x10,%esp
    log_printf("Version:%s,name:%s",OS_VERSION,"tiny x86 os");
   10f32:	83 ec 04             	sub    $0x4,%esp
   10f35:	68 91 26 01 00       	push   $0x12691
   10f3a:	68 9d 26 01 00       	push   $0x1269d
   10f3f:	68 a3 26 01 00       	push   $0x126a3
   10f44:	e8 10 06 00 00       	call   11559 <log_printf>
   10f49:	83 c4 10             	add    $0x10,%esp
    int count=0;
   10f4c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;){
        log_printf("first task:%d",count++);
   10f53:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f56:	8d 50 01             	lea    0x1(%eax),%edx
   10f59:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10f5c:	83 ec 08             	sub    $0x8,%esp
   10f5f:	50                   	push   %eax
   10f60:	68 b6 26 01 00       	push   $0x126b6
   10f65:	e8 ef 05 00 00       	call   11559 <log_printf>
   10f6a:	83 c4 10             	add    $0x10,%esp
    }
   10f6d:	eb e4                	jmp    10f53 <init_main+0x37>

00010f6f <outb>:
static inline uint16_t inw(uint16_t port){
    uint16_t ret;
    __asm__ __volatile__("in %1, %0" : "=a" (ret) : "dN" (port));
    return ret;
}
static inline void outb(uint16_t port, uint8_t val){
   10f6f:	55                   	push   %ebp
   10f70:	89 e5                	mov    %esp,%ebp
   10f72:	83 ec 08             	sub    $0x8,%esp
   10f75:	8b 55 08             	mov    0x8(%ebp),%edx
   10f78:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f7b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10f7f:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" : : [v]"a"(val), [p]"d"(port));
   10f82:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10f86:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10f8a:	ee                   	out    %al,(%dx)
}
   10f8b:	90                   	nop
   10f8c:	c9                   	leave  
   10f8d:	c3                   	ret    

00010f8e <do_handler_timer>:
#include "comm/cpu_instr.h"
#include "os_cfg.h"


static uint32_t sys_tick;
void do_handler_timer(exception_frame_t *frame){
   10f8e:	55                   	push   %ebp
   10f8f:	89 e5                	mov    %esp,%ebp
   10f91:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10f94:	a1 24 33 01 00       	mov    0x13324,%eax
   10f99:	83 c0 01             	add    $0x1,%eax
   10f9c:	a3 24 33 01 00       	mov    %eax,0x13324
    pic_send_eoi(IRQ0_TIMER);
   10fa1:	83 ec 0c             	sub    $0xc,%esp
   10fa4:	6a 20                	push   $0x20
   10fa6:	e8 bd fb ff ff       	call   10b68 <pic_send_eoi>
   10fab:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   10fae:	e8 68 0f 00 00       	call   11f1b <task_time_tick>
}
   10fb3:	90                   	nop
   10fb4:	c9                   	leave  
   10fb5:	c3                   	ret    

00010fb6 <init_pit>:

static void init_pit(void){
   10fb6:	55                   	push   %ebp
   10fb7:	89 e5                	mov    %esp,%ebp
   10fb9:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count=(PIT_OSC_FREQ/(1000.0/OS_TICK_MS)); //每十毫秒tick++
   10fbc:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0|PIT_LOAD_LOHI|PIT_MODE0); 
   10fc3:	6a 36                	push   $0x36
   10fc5:	6a 43                	push   $0x43
   10fc7:	e8 a3 ff ff ff       	call   10f6f <outb>
   10fcc:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT,reload_count&0xff);
   10fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fd2:	0f b6 c0             	movzbl %al,%eax
   10fd5:	50                   	push   %eax
   10fd6:	6a 40                	push   $0x40
   10fd8:	e8 92 ff ff ff       	call   10f6f <outb>
   10fdd:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT,(reload_count>>8)&0xff);
   10fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fe3:	c1 e8 08             	shr    $0x8,%eax
   10fe6:	0f b6 c0             	movzbl %al,%eax
   10fe9:	50                   	push   %eax
   10fea:	6a 40                	push   $0x40
   10fec:	e8 7e ff ff ff       	call   10f6f <outb>
   10ff1:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   10ff4:	83 ec 08             	sub    $0x8,%esp
   10ff7:	68 d6 02 01 00       	push   $0x102d6
   10ffc:	6a 20                	push   $0x20
   10ffe:	e8 90 fb ff ff       	call   10b93 <irq_install>
   11003:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   11006:	83 ec 0c             	sub    $0xc,%esp
   11009:	6a 20                	push   $0x20
   1100b:	e8 72 fd ff ff       	call   10d82 <irq_enable>
   11010:	83 c4 10             	add    $0x10,%esp
}
   11013:	90                   	nop
   11014:	c9                   	leave  
   11015:	c3                   	ret    

00011016 <time_init>:

void time_init(void){
   11016:	55                   	push   %ebp
   11017:	89 e5                	mov    %esp,%ebp
   11019:	83 ec 08             	sub    $0x8,%esp
    sys_tick=0;
   1101c:	c7 05 24 33 01 00 00 	movl   $0x0,0x13324
   11023:	00 00 00 
    init_pit();
   11026:	e8 8b ff ff ff       	call   10fb6 <init_pit>
   1102b:	90                   	nop
   1102c:	c9                   	leave  
   1102d:	c3                   	ret    

0001102e <inb>:
//一些简单汇编的封装
#ifndef CPU_INSTR_H
#define CPU_INSTR_H
#include"types.h"
static inline uint8_t inb(uint16_t port){
   1102e:	55                   	push   %ebp
   1102f:	89 e5                	mov    %esp,%ebp
   11031:	83 ec 14             	sub    $0x14,%esp
   11034:	8b 45 08             	mov    0x8(%ebp),%eax
   11037:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t ret;
    __asm__ __volatile__("inb %[p], %[v]" : [v]"=a"(ret) : [p]"d"(port));
   1103b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1103f:	89 c2                	mov    %eax,%edx
   11041:	ec                   	in     (%dx),%al
   11042:	88 45 ff             	mov    %al,-0x1(%ebp)
    //"d"表示使用通用寄存器EDX来传递输入操作数
    //"a"表示将结果存储在寄存器EAX
    return ret;
   11045:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11049:	c9                   	leave  
   1104a:	c3                   	ret    

0001104b <outb>:
static inline uint16_t inw(uint16_t port){
    uint16_t ret;
    __asm__ __volatile__("in %1, %0" : "=a" (ret) : "dN" (port));
    return ret;
}
static inline void outb(uint16_t port, uint8_t val){
   1104b:	55                   	push   %ebp
   1104c:	89 e5                	mov    %esp,%ebp
   1104e:	83 ec 08             	sub    $0x8,%esp
   11051:	8b 55 08             	mov    0x8(%ebp),%edx
   11054:	8b 45 0c             	mov    0xc(%ebp),%eax
   11057:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1105b:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" : : [v]"a"(val), [p]"d"(port));
   1105e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11062:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11066:	ee                   	out    %al,(%dx)
}
   11067:	90                   	nop
   11068:	c9                   	leave  
   11069:	c3                   	ret    

0001106a <read_cursor_pos>:
#include "dev/console.h"
#include "tools/klib.h"
#include "comm/cpu_instr.h"
#define CONSOLE_NR 1
static console_t console_buf[CONSOLE_NR]; 
static int read_cursor_pos(){
   1106a:	55                   	push   %ebp
   1106b:	89 e5                	mov    %esp,%ebp
   1106d:	83 ec 10             	sub    $0x10,%esp
    int pos=0;
   11070:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    outb(0x3D4,0x0F); //写低地址
   11077:	6a 0f                	push   $0xf
   11079:	68 d4 03 00 00       	push   $0x3d4
   1107e:	e8 c8 ff ff ff       	call   1104b <outb>
   11083:	83 c4 08             	add    $0x8,%esp
    pos|=inb(0x3D5); //读高地址
   11086:	68 d5 03 00 00       	push   $0x3d5
   1108b:	e8 9e ff ff ff       	call   1102e <inb>
   11090:	83 c4 04             	add    $0x4,%esp
   11093:	0f b6 c0             	movzbl %al,%eax
   11096:	09 45 fc             	or     %eax,-0x4(%ebp)
    outb(0x3D4,0x0E); //写高地址
   11099:	6a 0e                	push   $0xe
   1109b:	68 d4 03 00 00       	push   $0x3d4
   110a0:	e8 a6 ff ff ff       	call   1104b <outb>
   110a5:	83 c4 08             	add    $0x8,%esp
    pos|=inb(0x3D5)<<8;
   110a8:	68 d5 03 00 00       	push   $0x3d5
   110ad:	e8 7c ff ff ff       	call   1102e <inb>
   110b2:	83 c4 04             	add    $0x4,%esp
   110b5:	0f b6 c0             	movzbl %al,%eax
   110b8:	c1 e0 08             	shl    $0x8,%eax
   110bb:	09 45 fc             	or     %eax,-0x4(%ebp)
    return pos;
   110be:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   110c1:	c9                   	leave  
   110c2:	c3                   	ret    

000110c3 <erase_rows>:
static void erase_rows(console_t*console,int start,int end){
   110c3:	55                   	push   %ebp
   110c4:	89 e5                	mov    %esp,%ebp
   110c6:	83 ec 10             	sub    $0x10,%esp
    int offset=console->display_cols*start;
   110c9:	8b 45 08             	mov    0x8(%ebp),%eax
   110cc:	8b 40 14             	mov    0x14(%eax),%eax
   110cf:	0f af 45 0c          	imul   0xc(%ebp),%eax
   110d3:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int nr_bytes=console->display_cols*(end-start+1);
   110d6:	8b 45 08             	mov    0x8(%ebp),%eax
   110d9:	8b 50 14             	mov    0x14(%eax),%edx
   110dc:	8b 45 10             	mov    0x10(%ebp),%eax
   110df:	2b 45 0c             	sub    0xc(%ebp),%eax
   110e2:	83 c0 01             	add    $0x1,%eax
   110e5:	0f af c2             	imul   %edx,%eax
   110e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t*dest=console->disp_base+offset;
   110eb:	8b 45 08             	mov    0x8(%ebp),%eax
   110ee:	8b 00                	mov    (%eax),%eax
   110f0:	8b 55 f8             	mov    -0x8(%ebp),%edx
   110f3:	01 d2                	add    %edx,%edx
   110f5:	01 d0                	add    %edx,%eax
   110f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for(int i=0;i<nr_bytes;i++){
   110fa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11101:	eb 65                	jmp    11168 <erase_rows+0xa5>
        dest[i].c=' ';
   11103:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11106:	8d 14 00             	lea    (%eax,%eax,1),%edx
   11109:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1110c:	01 d0                	add    %edx,%eax
   1110e:	c6 00 20             	movb   $0x20,(%eax)
        dest[i].foreground = console->foreground;
   11111:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11114:	8d 14 00             	lea    (%eax,%eax,1),%edx
   11117:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1111a:	01 c2                	add    %eax,%edx
   1111c:	8b 45 08             	mov    0x8(%ebp),%eax
   1111f:	8b 40 20             	mov    0x20(%eax),%eax
   11122:	c1 e0 04             	shl    $0x4,%eax
   11125:	c0 f8 04             	sar    $0x4,%al
   11128:	83 e0 0f             	and    $0xf,%eax
   1112b:	89 c1                	mov    %eax,%ecx
   1112d:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   11131:	83 e0 f0             	and    $0xfffffff0,%eax
   11134:	09 c8                	or     %ecx,%eax
   11136:	88 42 01             	mov    %al,0x1(%edx)
        dest[i].background = console->background;
   11139:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1113c:	8d 14 00             	lea    (%eax,%eax,1),%edx
   1113f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11142:	01 c2                	add    %eax,%edx
   11144:	8b 45 08             	mov    0x8(%ebp),%eax
   11147:	8b 40 24             	mov    0x24(%eax),%eax
   1114a:	c1 e0 05             	shl    $0x5,%eax
   1114d:	c0 f8 05             	sar    $0x5,%al
   11150:	83 e0 07             	and    $0x7,%eax
   11153:	c1 e0 04             	shl    $0x4,%eax
   11156:	89 c1                	mov    %eax,%ecx
   11158:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1115c:	83 e0 8f             	and    $0xffffff8f,%eax
   1115f:	09 c8                	or     %ecx,%eax
   11161:	88 42 01             	mov    %al,0x1(%edx)
}
static void erase_rows(console_t*console,int start,int end){
    int offset=console->display_cols*start;
    int nr_bytes=console->display_cols*(end-start+1);
    disp_char_t*dest=console->disp_base+offset;
    for(int i=0;i<nr_bytes;i++){
   11164:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11168:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1116b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   1116e:	7c 93                	jl     11103 <erase_rows+0x40>
        dest[i].c=' ';
        dest[i].foreground = console->foreground;
        dest[i].background = console->background;
    }
}
   11170:	90                   	nop
   11171:	c9                   	leave  
   11172:	c3                   	ret    

00011173 <scroll_up>:
static void scroll_up(console_t*console,int n){
   11173:	55                   	push   %ebp
   11174:	89 e5                	mov    %esp,%ebp
   11176:	83 ec 18             	sub    $0x18,%esp
    disp_char_t*dest=console->disp_base;
   11179:	8b 45 08             	mov    0x8(%ebp),%eax
   1117c:	8b 00                	mov    (%eax),%eax
   1117e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t*src=console->disp_base+console->display_cols*n;
   11181:	8b 45 08             	mov    0x8(%ebp),%eax
   11184:	8b 10                	mov    (%eax),%edx
   11186:	8b 45 08             	mov    0x8(%ebp),%eax
   11189:	8b 40 14             	mov    0x14(%eax),%eax
   1118c:	0f af 45 0c          	imul   0xc(%ebp),%eax
   11190:	01 c0                	add    %eax,%eax
   11192:	01 d0                	add    %edx,%eax
   11194:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size=console->display_cols*(console->cursor_row-n)*sizeof(disp_char_t);
   11197:	8b 45 08             	mov    0x8(%ebp),%eax
   1119a:	8b 50 14             	mov    0x14(%eax),%edx
   1119d:	8b 45 08             	mov    0x8(%ebp),%eax
   111a0:	8b 40 08             	mov    0x8(%eax),%eax
   111a3:	2b 45 0c             	sub    0xc(%ebp),%eax
   111a6:	0f af c2             	imul   %edx,%eax
   111a9:	01 c0                	add    %eax,%eax
   111ab:	89 45 ec             	mov    %eax,-0x14(%ebp)
    kernel_memcpy(dest,src,size);
   111ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
   111b1:	83 ec 04             	sub    $0x4,%esp
   111b4:	50                   	push   %eax
   111b5:	ff 75 f0             	pushl  -0x10(%ebp)
   111b8:	ff 75 f4             	pushl  -0xc(%ebp)
   111bb:	e8 78 05 00 00       	call   11738 <kernel_memcpy>
   111c0:	83 c4 10             	add    $0x10,%esp
    erase_rows(console,console->display_rows-n,console->display_rows-1);
   111c3:	8b 45 08             	mov    0x8(%ebp),%eax
   111c6:	8b 40 10             	mov    0x10(%eax),%eax
   111c9:	8d 50 ff             	lea    -0x1(%eax),%edx
   111cc:	8b 45 08             	mov    0x8(%ebp),%eax
   111cf:	8b 40 10             	mov    0x10(%eax),%eax
   111d2:	2b 45 0c             	sub    0xc(%ebp),%eax
   111d5:	83 ec 04             	sub    $0x4,%esp
   111d8:	52                   	push   %edx
   111d9:	50                   	push   %eax
   111da:	ff 75 08             	pushl  0x8(%ebp)
   111dd:	e8 e1 fe ff ff       	call   110c3 <erase_rows>
   111e2:	83 c4 10             	add    $0x10,%esp
    console->cursor_row-=n;
   111e5:	8b 45 08             	mov    0x8(%ebp),%eax
   111e8:	8b 40 08             	mov    0x8(%eax),%eax
   111eb:	2b 45 0c             	sub    0xc(%ebp),%eax
   111ee:	89 c2                	mov    %eax,%edx
   111f0:	8b 45 08             	mov    0x8(%ebp),%eax
   111f3:	89 50 08             	mov    %edx,0x8(%eax)
}
   111f6:	90                   	nop
   111f7:	c9                   	leave  
   111f8:	c3                   	ret    

000111f9 <mov_to_col0>:
static void mov_to_col0(console_t*console){
   111f9:	55                   	push   %ebp
   111fa:	89 e5                	mov    %esp,%ebp
    console->cursor_col=0;
   111fc:	8b 45 08             	mov    0x8(%ebp),%eax
   111ff:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
}
   11206:	90                   	nop
   11207:	5d                   	pop    %ebp
   11208:	c3                   	ret    

00011209 <move_next_line>:
static void move_next_line(console_t*console){
   11209:	55                   	push   %ebp
   1120a:	89 e5                	mov    %esp,%ebp
   1120c:	83 ec 08             	sub    $0x8,%esp
    console->cursor_row++;
   1120f:	8b 45 08             	mov    0x8(%ebp),%eax
   11212:	8b 40 08             	mov    0x8(%eax),%eax
   11215:	8d 50 01             	lea    0x1(%eax),%edx
   11218:	8b 45 08             	mov    0x8(%ebp),%eax
   1121b:	89 50 08             	mov    %edx,0x8(%eax)
    if(console->cursor_row>=console->display_rows){
   1121e:	8b 45 08             	mov    0x8(%ebp),%eax
   11221:	8b 50 08             	mov    0x8(%eax),%edx
   11224:	8b 45 08             	mov    0x8(%ebp),%eax
   11227:	8b 40 10             	mov    0x10(%eax),%eax
   1122a:	39 c2                	cmp    %eax,%edx
   1122c:	7c 10                	jl     1123e <move_next_line+0x35>
        scroll_up(console,1);
   1122e:	83 ec 08             	sub    $0x8,%esp
   11231:	6a 01                	push   $0x1
   11233:	ff 75 08             	pushl  0x8(%ebp)
   11236:	e8 38 ff ff ff       	call   11173 <scroll_up>
   1123b:	83 c4 10             	add    $0x10,%esp
    }
}
   1123e:	90                   	nop
   1123f:	c9                   	leave  
   11240:	c3                   	ret    

00011241 <move_forward>:
static void move_forward(console_t*console,int n){
   11241:	55                   	push   %ebp
   11242:	89 e5                	mov    %esp,%ebp
   11244:	83 ec 18             	sub    $0x18,%esp
    for(int i=0;i<n;i++){
   11247:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1124e:	eb 5c                	jmp    112ac <move_forward+0x6b>
        console->cursor_col++;
   11250:	8b 45 08             	mov    0x8(%ebp),%eax
   11253:	8b 40 0c             	mov    0xc(%eax),%eax
   11256:	8d 50 01             	lea    0x1(%eax),%edx
   11259:	8b 45 08             	mov    0x8(%ebp),%eax
   1125c:	89 50 0c             	mov    %edx,0xc(%eax)
        if(console->cursor_col>=console->display_cols){
   1125f:	8b 45 08             	mov    0x8(%ebp),%eax
   11262:	8b 50 0c             	mov    0xc(%eax),%edx
   11265:	8b 45 08             	mov    0x8(%ebp),%eax
   11268:	8b 40 14             	mov    0x14(%eax),%eax
   1126b:	39 c2                	cmp    %eax,%edx
   1126d:	7c 39                	jl     112a8 <move_forward+0x67>
            console->cursor_col=0;
   1126f:	8b 45 08             	mov    0x8(%ebp),%eax
   11272:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            console->cursor_row++;
   11279:	8b 45 08             	mov    0x8(%ebp),%eax
   1127c:	8b 40 08             	mov    0x8(%eax),%eax
   1127f:	8d 50 01             	lea    0x1(%eax),%edx
   11282:	8b 45 08             	mov    0x8(%ebp),%eax
   11285:	89 50 08             	mov    %edx,0x8(%eax)
            if(console->cursor_row>=console->display_rows){
   11288:	8b 45 08             	mov    0x8(%ebp),%eax
   1128b:	8b 50 08             	mov    0x8(%eax),%edx
   1128e:	8b 45 08             	mov    0x8(%ebp),%eax
   11291:	8b 40 10             	mov    0x10(%eax),%eax
   11294:	39 c2                	cmp    %eax,%edx
   11296:	7c 10                	jl     112a8 <move_forward+0x67>
                scroll_up(console,1);
   11298:	83 ec 08             	sub    $0x8,%esp
   1129b:	6a 01                	push   $0x1
   1129d:	ff 75 08             	pushl  0x8(%ebp)
   112a0:	e8 ce fe ff ff       	call   11173 <scroll_up>
   112a5:	83 c4 10             	add    $0x10,%esp
    if(console->cursor_row>=console->display_rows){
        scroll_up(console,1);
    }
}
static void move_forward(console_t*console,int n){
    for(int i=0;i<n;i++){
   112a8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   112ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112af:	3b 45 0c             	cmp    0xc(%ebp),%eax
   112b2:	7c 9c                	jl     11250 <move_forward+0xf>
            if(console->cursor_row>=console->display_rows){
                scroll_up(console,1);
            }
        }
    }
}
   112b4:	90                   	nop
   112b5:	c9                   	leave  
   112b6:	c3                   	ret    

000112b7 <show_char>:
static void show_char(console_t*console,char c){
   112b7:	55                   	push   %ebp
   112b8:	89 e5                	mov    %esp,%ebp
   112ba:	83 ec 28             	sub    $0x28,%esp
   112bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   112c0:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int offset=console->cursor_col+console->cursor_row*console->display_cols;
   112c3:	8b 45 08             	mov    0x8(%ebp),%eax
   112c6:	8b 50 0c             	mov    0xc(%eax),%edx
   112c9:	8b 45 08             	mov    0x8(%ebp),%eax
   112cc:	8b 48 08             	mov    0x8(%eax),%ecx
   112cf:	8b 45 08             	mov    0x8(%ebp),%eax
   112d2:	8b 40 14             	mov    0x14(%eax),%eax
   112d5:	0f af c1             	imul   %ecx,%eax
   112d8:	01 d0                	add    %edx,%eax
   112da:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t*p=(disp_char_t*)(console->disp_base)+offset;
   112dd:	8b 45 08             	mov    0x8(%ebp),%eax
   112e0:	8b 00                	mov    (%eax),%eax
   112e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   112e5:	01 d2                	add    %edx,%edx
   112e7:	01 d0                	add    %edx,%eax
   112e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    p->c=c;
   112ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112ef:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   112f3:	88 10                	mov    %dl,(%eax)
    p->foreground=console->foreground;
   112f5:	8b 45 08             	mov    0x8(%ebp),%eax
   112f8:	8b 40 20             	mov    0x20(%eax),%eax
   112fb:	c1 e0 04             	shl    $0x4,%eax
   112fe:	c0 f8 04             	sar    $0x4,%al
   11301:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11304:	83 e0 0f             	and    $0xf,%eax
   11307:	89 c1                	mov    %eax,%ecx
   11309:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1130d:	83 e0 f0             	and    $0xfffffff0,%eax
   11310:	09 c8                	or     %ecx,%eax
   11312:	88 42 01             	mov    %al,0x1(%edx)
    p->background=console->background;
   11315:	8b 45 08             	mov    0x8(%ebp),%eax
   11318:	8b 40 24             	mov    0x24(%eax),%eax
   1131b:	c1 e0 05             	shl    $0x5,%eax
   1131e:	c0 f8 05             	sar    $0x5,%al
   11321:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11324:	83 e0 07             	and    $0x7,%eax
   11327:	c1 e0 04             	shl    $0x4,%eax
   1132a:	89 c1                	mov    %eax,%ecx
   1132c:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   11330:	83 e0 8f             	and    $0xffffff8f,%eax
   11333:	09 c8                	or     %ecx,%eax
   11335:	88 42 01             	mov    %al,0x1(%edx)
    move_forward(console,1);
   11338:	83 ec 08             	sub    $0x8,%esp
   1133b:	6a 01                	push   $0x1
   1133d:	ff 75 08             	pushl  0x8(%ebp)
   11340:	e8 fc fe ff ff       	call   11241 <move_forward>
   11345:	83 c4 10             	add    $0x10,%esp
}
   11348:	90                   	nop
   11349:	c9                   	leave  
   1134a:	c3                   	ret    

0001134b <move_backword>:
static int move_backword(console_t*console,int n){
   1134b:	55                   	push   %ebp
   1134c:	89 e5                	mov    %esp,%ebp
   1134e:	83 ec 10             	sub    $0x10,%esp
    int status=-1;
   11351:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
    for(int i=0;i<n;i++){
   11358:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1135f:	eb 55                	jmp    113b6 <move_backword+0x6b>
        if(console->cursor_col>0){
   11361:	8b 45 08             	mov    0x8(%ebp),%eax
   11364:	8b 40 0c             	mov    0xc(%eax),%eax
   11367:	85 c0                	test   %eax,%eax
   11369:	7e 18                	jle    11383 <move_backword+0x38>
            console->cursor_col--;
   1136b:	8b 45 08             	mov    0x8(%ebp),%eax
   1136e:	8b 40 0c             	mov    0xc(%eax),%eax
   11371:	8d 50 ff             	lea    -0x1(%eax),%edx
   11374:	8b 45 08             	mov    0x8(%ebp),%eax
   11377:	89 50 0c             	mov    %edx,0xc(%eax)
            status=0;
   1137a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11381:	eb 2f                	jmp    113b2 <move_backword+0x67>
        }else{
            if(console->cursor_row>0){
   11383:	8b 45 08             	mov    0x8(%ebp),%eax
   11386:	8b 40 08             	mov    0x8(%eax),%eax
   11389:	85 c0                	test   %eax,%eax
   1138b:	7e 25                	jle    113b2 <move_backword+0x67>
                console->cursor_row--;
   1138d:	8b 45 08             	mov    0x8(%ebp),%eax
   11390:	8b 40 08             	mov    0x8(%eax),%eax
   11393:	8d 50 ff             	lea    -0x1(%eax),%edx
   11396:	8b 45 08             	mov    0x8(%ebp),%eax
   11399:	89 50 08             	mov    %edx,0x8(%eax)
                console->cursor_col=console->display_cols-1;
   1139c:	8b 45 08             	mov    0x8(%ebp),%eax
   1139f:	8b 40 14             	mov    0x14(%eax),%eax
   113a2:	8d 50 ff             	lea    -0x1(%eax),%edx
   113a5:	8b 45 08             	mov    0x8(%ebp),%eax
   113a8:	89 50 0c             	mov    %edx,0xc(%eax)
                status=0;
   113ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    p->background=console->background;
    move_forward(console,1);
}
static int move_backword(console_t*console,int n){
    int status=-1;
    for(int i=0;i<n;i++){
   113b2:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   113b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113b9:	3b 45 0c             	cmp    0xc(%ebp),%eax
   113bc:	7c a3                	jl     11361 <move_backword+0x16>
                console->cursor_col=console->display_cols-1;
                status=0;
            }
        }
    }
    return status;
   113be:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   113c1:	c9                   	leave  
   113c2:	c3                   	ret    

000113c3 <clear_display>:
static void clear_display(console_t*console){
   113c3:	55                   	push   %ebp
   113c4:	89 e5                	mov    %esp,%ebp
   113c6:	83 ec 10             	sub    $0x10,%esp
    int size=console->display_cols*console->display_rows;
   113c9:	8b 45 08             	mov    0x8(%ebp),%eax
   113cc:	8b 50 14             	mov    0x14(%eax),%edx
   113cf:	8b 45 08             	mov    0x8(%ebp),%eax
   113d2:	8b 40 10             	mov    0x10(%eax),%eax
   113d5:	0f af c2             	imul   %edx,%eax
   113d8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for(int i=0;i<size;i++){
   113db:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   113e2:	eb 5c                	jmp    11440 <clear_display+0x7d>
        disp_char_t*p=(disp_char_t*)(console->disp_base)+i;
   113e4:	8b 45 08             	mov    0x8(%ebp),%eax
   113e7:	8b 00                	mov    (%eax),%eax
   113e9:	8b 55 fc             	mov    -0x4(%ebp),%edx
   113ec:	01 d2                	add    %edx,%edx
   113ee:	01 d0                	add    %edx,%eax
   113f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p->c=' ';
   113f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   113f6:	c6 00 20             	movb   $0x20,(%eax)
        p->foreground=console->foreground;
   113f9:	8b 45 08             	mov    0x8(%ebp),%eax
   113fc:	8b 40 20             	mov    0x20(%eax),%eax
   113ff:	c1 e0 04             	shl    $0x4,%eax
   11402:	c0 f8 04             	sar    $0x4,%al
   11405:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11408:	83 e0 0f             	and    $0xf,%eax
   1140b:	89 c1                	mov    %eax,%ecx
   1140d:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   11411:	83 e0 f0             	and    $0xfffffff0,%eax
   11414:	09 c8                	or     %ecx,%eax
   11416:	88 42 01             	mov    %al,0x1(%edx)
        p->background=console->background;
   11419:	8b 45 08             	mov    0x8(%ebp),%eax
   1141c:	8b 40 24             	mov    0x24(%eax),%eax
   1141f:	c1 e0 05             	shl    $0x5,%eax
   11422:	c0 f8 05             	sar    $0x5,%al
   11425:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11428:	83 e0 07             	and    $0x7,%eax
   1142b:	c1 e0 04             	shl    $0x4,%eax
   1142e:	89 c1                	mov    %eax,%ecx
   11430:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   11434:	83 e0 8f             	and    $0xffffff8f,%eax
   11437:	09 c8                	or     %ecx,%eax
   11439:	88 42 01             	mov    %al,0x1(%edx)
    }
    return status;
}
static void clear_display(console_t*console){
    int size=console->display_cols*console->display_rows;
    for(int i=0;i<size;i++){
   1143c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11440:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11443:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   11446:	7c 9c                	jl     113e4 <clear_display+0x21>
        disp_char_t*p=(disp_char_t*)(console->disp_base)+i;
        p->c=' ';
        p->foreground=console->foreground;
        p->background=console->background;
    }
}
   11448:	90                   	nop
   11449:	c9                   	leave  
   1144a:	c3                   	ret    

0001144b <console_init>:
int console_init(void){
   1144b:	55                   	push   %ebp
   1144c:	89 e5                	mov    %esp,%ebp
   1144e:	83 ec 10             	sub    $0x10,%esp
    for(int i=0;i<CONSOLE_NR;i++){
   11451:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11458:	e9 d9 00 00 00       	jmp    11536 <console_init+0xeb>
        console_buf[i].disp_base=(disp_char_t *)CONSOLE_DISP_ADDR;
   1145d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11460:	6b c0 54             	imul   $0x54,%eax,%eax
   11463:	05 40 33 01 00       	add    $0x13340,%eax
   11468:	c7 00 00 80 0b 00    	movl   $0xb8000,(%eax)
        console_buf[i].display_cols=CONSOLE_COL_MAX;
   1146e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11471:	6b c0 54             	imul   $0x54,%eax,%eax
   11474:	05 54 33 01 00       	add    $0x13354,%eax
   11479:	c7 00 50 00 00 00    	movl   $0x50,(%eax)
        console_buf[i].display_rows=CONSOLE_ROW_MAX;
   1147f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11482:	6b c0 54             	imul   $0x54,%eax,%eax
   11485:	05 50 33 01 00       	add    $0x13350,%eax
   1148a:	c7 00 19 00 00 00    	movl   $0x19,(%eax)
        int current_pos=read_cursor_pos();
   11490:	e8 d5 fb ff ff       	call   1106a <read_cursor_pos>
   11495:	89 45 f8             	mov    %eax,-0x8(%ebp)
        console_buf[i].cursor_row=current_pos/console_buf[i].display_cols;
   11498:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1149b:	6b c0 54             	imul   $0x54,%eax,%eax
   1149e:	05 54 33 01 00       	add    $0x13354,%eax
   114a3:	8b 08                	mov    (%eax),%ecx
   114a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114a8:	99                   	cltd   
   114a9:	f7 f9                	idiv   %ecx
   114ab:	89 c2                	mov    %eax,%edx
   114ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114b0:	6b c0 54             	imul   $0x54,%eax,%eax
   114b3:	05 48 33 01 00       	add    $0x13348,%eax
   114b8:	89 10                	mov    %edx,(%eax)
        console_buf[i].cursor_col=current_pos%console_buf[i].display_cols;
   114ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114bd:	6b c0 54             	imul   $0x54,%eax,%eax
   114c0:	05 54 33 01 00       	add    $0x13354,%eax
   114c5:	8b 08                	mov    (%eax),%ecx
   114c7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114ca:	99                   	cltd   
   114cb:	f7 f9                	idiv   %ecx
   114cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114d0:	6b c0 54             	imul   $0x54,%eax,%eax
   114d3:	05 4c 33 01 00       	add    $0x1334c,%eax
   114d8:	89 10                	mov    %edx,(%eax)
        console_buf[i].old_cursor_col=console_buf[i].cursor_col;
   114da:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114dd:	6b c0 54             	imul   $0x54,%eax,%eax
   114e0:	05 4c 33 01 00       	add    $0x1334c,%eax
   114e5:	8b 00                	mov    (%eax),%eax
   114e7:	8b 55 fc             	mov    -0x4(%ebp),%edx
   114ea:	6b d2 54             	imul   $0x54,%edx,%edx
   114ed:	81 c2 5c 33 01 00    	add    $0x1335c,%edx
   114f3:	89 02                	mov    %eax,(%edx)
        console_buf[i].old_cursor_row=console_buf[i].cursor_row;
   114f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114f8:	6b c0 54             	imul   $0x54,%eax,%eax
   114fb:	05 48 33 01 00       	add    $0x13348,%eax
   11500:	8b 00                	mov    (%eax),%eax
   11502:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11505:	6b d2 54             	imul   $0x54,%edx,%edx
   11508:	81 c2 58 33 01 00    	add    $0x13358,%edx
   1150e:	89 02                	mov    %eax,(%edx)
        console_buf[i].foreground=COLOR_White;
   11510:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11513:	6b c0 54             	imul   $0x54,%eax,%eax
   11516:	05 60 33 01 00       	add    $0x13360,%eax
   1151b:	c7 00 0f 00 00 00    	movl   $0xf,(%eax)
        console_buf[i].background=COLOR_Black;
   11521:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11524:	6b c0 54             	imul   $0x54,%eax,%eax
   11527:	05 64 33 01 00       	add    $0x13364,%eax
   1152c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        p->foreground=console->foreground;
        p->background=console->background;
    }
}
int console_init(void){
    for(int i=0;i<CONSOLE_NR;i++){
   11532:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11536:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1153a:	0f 8e 1d ff ff ff    	jle    1145d <console_init+0x12>
        console_buf[i].old_cursor_col=console_buf[i].cursor_col;
        console_buf[i].old_cursor_row=console_buf[i].cursor_row;
        console_buf[i].foreground=COLOR_White;
        console_buf[i].background=COLOR_Black;
    }
    return 0;
   11540:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11545:	c9                   	leave  
   11546:	c3                   	ret    

00011547 <console_write>:
int console_write(int dev,char *data,int len){
   11547:	55                   	push   %ebp
   11548:	89 e5                	mov    %esp,%ebp

}
   1154a:	90                   	nop
   1154b:	5d                   	pop    %ebp
   1154c:	c3                   	ret    

0001154d <console_close>:
void console_close(int dev){
   1154d:	55                   	push   %ebp
   1154e:	89 e5                	mov    %esp,%ebp

   11550:	90                   	nop
   11551:	5d                   	pop    %ebp
   11552:	c3                   	ret    

00011553 <log_init>:

//https://wiki.osdev.org/Serial_Ports
#define COM1_PORT 0x3F8


void log_init(void){
   11553:	55                   	push   %ebp
   11554:	89 e5                	mov    %esp,%ebp
    
}
   11556:	90                   	nop
   11557:	5d                   	pop    %ebp
   11558:	c3                   	ret    

00011559 <log_printf>:


void log_printf(const char *fmt, ...){
   11559:	55                   	push   %ebp
   1155a:	89 e5                	mov    %esp,%ebp

   1155c:	90                   	nop
   1155d:	5d                   	pop    %ebp
   1155e:	c3                   	ret    

0001155f <strings_count>:
#include"tools/klib.h"
#include"comm/cpu_instr.h"
int strings_count(char**start){
   1155f:	55                   	push   %ebp
   11560:	89 e5                	mov    %esp,%ebp
   11562:	83 ec 10             	sub    $0x10,%esp
    //字符串的数量
    int count=0;
   11565:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if(start){
   1156c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11570:	74 15                	je     11587 <strings_count+0x28>
        while(*start++){
   11572:	eb 04                	jmp    11578 <strings_count+0x19>
            count++;
   11574:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
#include"comm/cpu_instr.h"
int strings_count(char**start){
    //字符串的数量
    int count=0;
    if(start){
        while(*start++){
   11578:	8b 45 08             	mov    0x8(%ebp),%eax
   1157b:	8d 50 04             	lea    0x4(%eax),%edx
   1157e:	89 55 08             	mov    %edx,0x8(%ebp)
   11581:	8b 00                	mov    (%eax),%eax
   11583:	85 c0                	test   %eax,%eax
   11585:	75 ed                	jne    11574 <strings_count+0x15>
            count++;
        }
    }
    return count;
   11587:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1158a:	c9                   	leave  
   1158b:	c3                   	ret    

0001158c <get_file_name>:
char*get_file_name(char*name){
   1158c:	55                   	push   %ebp
   1158d:	89 e5                	mov    %esp,%ebp
   1158f:	83 ec 10             	sub    $0x10,%esp
    char*p=name;
   11592:	8b 45 08             	mov    0x8(%ebp),%eax
   11595:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(*p!='\0'){
   11598:	eb 04                	jmp    1159e <get_file_name+0x12>
        p++;
   1159a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    }
    return count;
}
char*get_file_name(char*name){
    char*p=name;
    while(*p!='\0'){
   1159e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   115a1:	0f b6 00             	movzbl (%eax),%eax
   115a4:	84 c0                	test   %al,%al
   115a6:	75 f2                	jne    1159a <get_file_name+0xe>
        p++;
    }
    while(p>name&&*p!='/'&&*p!='\\'){
   115a8:	eb 04                	jmp    115ae <get_file_name+0x22>
        p--;
   115aa:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
char*get_file_name(char*name){
    char*p=name;
    while(*p!='\0'){
        p++;
    }
    while(p>name&&*p!='/'&&*p!='\\'){
   115ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
   115b1:	3b 45 08             	cmp    0x8(%ebp),%eax
   115b4:	76 14                	jbe    115ca <get_file_name+0x3e>
   115b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   115b9:	0f b6 00             	movzbl (%eax),%eax
   115bc:	3c 2f                	cmp    $0x2f,%al
   115be:	74 0a                	je     115ca <get_file_name+0x3e>
   115c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   115c3:	0f b6 00             	movzbl (%eax),%eax
   115c6:	3c 5c                	cmp    $0x5c,%al
   115c8:	75 e0                	jne    115aa <get_file_name+0x1e>
        p--;
    }
    return p+1;
   115ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
   115cd:	83 c0 01             	add    $0x1,%eax
}
   115d0:	c9                   	leave  
   115d1:	c3                   	ret    

000115d2 <kernel_strcpy>:

void kernel_strcpy(char*dest,char*src){
   115d2:	55                   	push   %ebp
   115d3:	89 e5                	mov    %esp,%ebp
    if(!dest||!src){
   115d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   115d9:	74 3c                	je     11617 <kernel_strcpy+0x45>
   115db:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   115df:	74 36                	je     11617 <kernel_strcpy+0x45>
        return ;
    }
    while(*src!='\0'&&*dest!='\0'){  
   115e1:	eb 17                	jmp    115fa <kernel_strcpy+0x28>
        *dest++=*src++;
   115e3:	8b 45 08             	mov    0x8(%ebp),%eax
   115e6:	8d 50 01             	lea    0x1(%eax),%edx
   115e9:	89 55 08             	mov    %edx,0x8(%ebp)
   115ec:	8b 55 0c             	mov    0xc(%ebp),%edx
   115ef:	8d 4a 01             	lea    0x1(%edx),%ecx
   115f2:	89 4d 0c             	mov    %ecx,0xc(%ebp)
   115f5:	0f b6 12             	movzbl (%edx),%edx
   115f8:	88 10                	mov    %dl,(%eax)

void kernel_strcpy(char*dest,char*src){
    if(!dest||!src){
        return ;
    }
    while(*src!='\0'&&*dest!='\0'){  
   115fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   115fd:	0f b6 00             	movzbl (%eax),%eax
   11600:	84 c0                	test   %al,%al
   11602:	74 0a                	je     1160e <kernel_strcpy+0x3c>
   11604:	8b 45 08             	mov    0x8(%ebp),%eax
   11607:	0f b6 00             	movzbl (%eax),%eax
   1160a:	84 c0                	test   %al,%al
   1160c:	75 d5                	jne    115e3 <kernel_strcpy+0x11>
        *dest++=*src++;
    }
    *dest='\0';
   1160e:	8b 45 08             	mov    0x8(%ebp),%eax
   11611:	c6 00 00             	movb   $0x0,(%eax)
    return ;
   11614:	90                   	nop
   11615:	eb 01                	jmp    11618 <kernel_strcpy+0x46>
    return p+1;
}

void kernel_strcpy(char*dest,char*src){
    if(!dest||!src){
        return ;
   11617:	90                   	nop
    while(*src!='\0'&&*dest!='\0'){  
        *dest++=*src++;
    }
    *dest='\0';
    return ;
}
   11618:	5d                   	pop    %ebp
   11619:	c3                   	ret    

0001161a <kernel_strncpy>:
void kernel_strncpy(char*dest,char*src,int size){
   1161a:	55                   	push   %ebp
   1161b:	89 e5                	mov    %esp,%ebp
   1161d:	83 ec 10             	sub    $0x10,%esp
    if(!dest||!src){
   11620:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11624:	74 5c                	je     11682 <kernel_strncpy+0x68>
   11626:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1162a:	74 56                	je     11682 <kernel_strncpy+0x68>
        return ;
    }
    char *d=dest;
   1162c:	8b 45 08             	mov    0x8(%ebp),%eax
   1162f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char*s=src;
   11632:	8b 45 0c             	mov    0xc(%ebp),%eax
   11635:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(*s!='\0'&&size--){
   11638:	eb 17                	jmp    11651 <kernel_strncpy+0x37>
        *d++=*s++;
   1163a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1163d:	8d 50 01             	lea    0x1(%eax),%edx
   11640:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11643:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11646:	8d 4a 01             	lea    0x1(%edx),%ecx
   11649:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1164c:	0f b6 12             	movzbl (%edx),%edx
   1164f:	88 10                	mov    %dl,(%eax)
    if(!dest||!src){
        return ;
    }
    char *d=dest;
    const char*s=src;
    while(*s!='\0'&&size--){
   11651:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11654:	0f b6 00             	movzbl (%eax),%eax
   11657:	84 c0                	test   %al,%al
   11659:	74 0d                	je     11668 <kernel_strncpy+0x4e>
   1165b:	8b 45 10             	mov    0x10(%ebp),%eax
   1165e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11661:	89 55 10             	mov    %edx,0x10(%ebp)
   11664:	85 c0                	test   %eax,%eax
   11666:	75 d2                	jne    1163a <kernel_strncpy+0x20>
        *d++=*s++;
    }
    if(size==0){
   11668:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1166c:	75 0b                	jne    11679 <kernel_strncpy+0x5f>
        *(d-1)='\0';
   1166e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11671:	83 e8 01             	sub    $0x1,%eax
   11674:	c6 00 00             	movb   $0x0,(%eax)
    }else{
        *d='\0';
    }
    return ;
   11677:	eb 0a                	jmp    11683 <kernel_strncpy+0x69>
        *d++=*s++;
    }
    if(size==0){
        *(d-1)='\0';
    }else{
        *d='\0';
   11679:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1167c:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ;
   1167f:	90                   	nop
   11680:	eb 01                	jmp    11683 <kernel_strncpy+0x69>
    *dest='\0';
    return ;
}
void kernel_strncpy(char*dest,char*src,int size){
    if(!dest||!src){
        return ;
   11682:	90                   	nop
        *(d-1)='\0';
    }else{
        *d='\0';
    }
    return ;
}
   11683:	c9                   	leave  
   11684:	c3                   	ret    

00011685 <kernel_strncmp>:
int kernel_strncmp(const char*s1,const char*s2,int size){
   11685:	55                   	push   %ebp
   11686:	89 e5                	mov    %esp,%ebp
    if(!s1||!s2){
   11688:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1168c:	74 06                	je     11694 <kernel_strncmp+0xf>
   1168e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11692:	75 37                	jne    116cb <kernel_strncmp+0x46>
        return -1;
   11694:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11699:	eb 56                	jmp    116f1 <kernel_strncmp+0x6c>
    }
    while(*s1!='\0'&&*s2!='\0'&&size--){
        if(*s1!=*s2){
   1169b:	8b 45 08             	mov    0x8(%ebp),%eax
   1169e:	0f b6 10             	movzbl (%eax),%edx
   116a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   116a4:	0f b6 00             	movzbl (%eax),%eax
   116a7:	38 c2                	cmp    %al,%dl
   116a9:	74 18                	je     116c3 <kernel_strncmp+0x3e>
            return *s1-*s2;
   116ab:	8b 45 08             	mov    0x8(%ebp),%eax
   116ae:	0f b6 00             	movzbl (%eax),%eax
   116b1:	0f be d0             	movsbl %al,%edx
   116b4:	8b 45 0c             	mov    0xc(%ebp),%eax
   116b7:	0f b6 00             	movzbl (%eax),%eax
   116ba:	0f be c0             	movsbl %al,%eax
   116bd:	29 c2                	sub    %eax,%edx
   116bf:	89 d0                	mov    %edx,%eax
   116c1:	eb 2e                	jmp    116f1 <kernel_strncmp+0x6c>
        }
        s1++;
   116c3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   116c7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
}
int kernel_strncmp(const char*s1,const char*s2,int size){
    if(!s1||!s2){
        return -1;
    }
    while(*s1!='\0'&&*s2!='\0'&&size--){
   116cb:	8b 45 08             	mov    0x8(%ebp),%eax
   116ce:	0f b6 00             	movzbl (%eax),%eax
   116d1:	84 c0                	test   %al,%al
   116d3:	74 17                	je     116ec <kernel_strncmp+0x67>
   116d5:	8b 45 0c             	mov    0xc(%ebp),%eax
   116d8:	0f b6 00             	movzbl (%eax),%eax
   116db:	84 c0                	test   %al,%al
   116dd:	74 0d                	je     116ec <kernel_strncmp+0x67>
   116df:	8b 45 10             	mov    0x10(%ebp),%eax
   116e2:	8d 50 ff             	lea    -0x1(%eax),%edx
   116e5:	89 55 10             	mov    %edx,0x10(%ebp)
   116e8:	85 c0                	test   %eax,%eax
   116ea:	75 af                	jne    1169b <kernel_strncmp+0x16>
            return *s1-*s2;
        }
        s1++;
        s2++;
    }
    return 0;
   116ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
   116f1:	5d                   	pop    %ebp
   116f2:	c3                   	ret    

000116f3 <kernel_strlen>:
int kernel_strlen(const char*s){
   116f3:	55                   	push   %ebp
   116f4:	89 e5                	mov    %esp,%ebp
   116f6:	83 ec 10             	sub    $0x10,%esp
    if(!s){
   116f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   116fd:	75 07                	jne    11706 <kernel_strlen+0x13>
        return -1;
   116ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11704:	eb 1e                	jmp    11724 <kernel_strlen+0x31>
    }
    int len=0;
   11706:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while(*s!='\0'){
   1170d:	eb 08                	jmp    11717 <kernel_strlen+0x24>
        len++;
   1170f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        s++;
   11713:	83 45 08 01          	addl   $0x1,0x8(%ebp)
int kernel_strlen(const char*s){
    if(!s){
        return -1;
    }
    int len=0;
    while(*s!='\0'){
   11717:	8b 45 08             	mov    0x8(%ebp),%eax
   1171a:	0f b6 00             	movzbl (%eax),%eax
   1171d:	84 c0                	test   %al,%al
   1171f:	75 ee                	jne    1170f <kernel_strlen+0x1c>
        len++;
        s++;
    }
    return len;
   11721:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11724:	c9                   	leave  
   11725:	c3                   	ret    

00011726 <kernel_strcat>:
void kernel_strcat(char*dest,const char*src){
   11726:	55                   	push   %ebp
   11727:	89 e5                	mov    %esp,%ebp
    if(!dest||!src){
   11729:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1172d:	74 06                	je     11735 <kernel_strcat+0xf>
   1172f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11733:	eb 01                	jmp    11736 <kernel_strcat+0x10>
        return ;
   11735:	90                   	nop
    }

}
   11736:	5d                   	pop    %ebp
   11737:	c3                   	ret    

00011738 <kernel_memcpy>:
void kernel_memcpy(void*dest,void*src,int size){
   11738:	55                   	push   %ebp
   11739:	89 e5                	mov    %esp,%ebp
   1173b:	83 ec 10             	sub    $0x10,%esp
    if(!dest||!src||!size){
   1173e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11742:	74 40                	je     11784 <kernel_memcpy+0x4c>
   11744:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11748:	74 3a                	je     11784 <kernel_memcpy+0x4c>
   1174a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1174e:	74 34                	je     11784 <kernel_memcpy+0x4c>
        return ;
    }
    uint8_t*d=(uint8_t*)dest;
   11750:	8b 45 08             	mov    0x8(%ebp),%eax
   11753:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t*s=(uint8_t*)src;
   11756:	8b 45 0c             	mov    0xc(%ebp),%eax
   11759:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--){
   1175c:	eb 17                	jmp    11775 <kernel_memcpy+0x3d>
        *d++=*s++;
   1175e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11761:	8d 50 01             	lea    0x1(%eax),%edx
   11764:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11767:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1176a:	8d 4a 01             	lea    0x1(%edx),%ecx
   1176d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11770:	0f b6 12             	movzbl (%edx),%edx
   11773:	88 10                	mov    %dl,(%eax)
    if(!dest||!src||!size){
        return ;
    }
    uint8_t*d=(uint8_t*)dest;
    uint8_t*s=(uint8_t*)src;
    while(size--){
   11775:	8b 45 10             	mov    0x10(%ebp),%eax
   11778:	8d 50 ff             	lea    -0x1(%eax),%edx
   1177b:	89 55 10             	mov    %edx,0x10(%ebp)
   1177e:	85 c0                	test   %eax,%eax
   11780:	75 dc                	jne    1175e <kernel_memcpy+0x26>
   11782:	eb 01                	jmp    11785 <kernel_memcpy+0x4d>
    }

}
void kernel_memcpy(void*dest,void*src,int size){
    if(!dest||!src||!size){
        return ;
   11784:	90                   	nop
    uint8_t*d=(uint8_t*)dest;
    uint8_t*s=(uint8_t*)src;
    while(size--){
        *d++=*s++;
    }   
}
   11785:	c9                   	leave  
   11786:	c3                   	ret    

00011787 <kernel_memset>:
void kernel_memset(void*dest,uint8_t value,int size){
   11787:	55                   	push   %ebp
   11788:	89 e5                	mov    %esp,%ebp
   1178a:	83 ec 14             	sub    $0x14,%esp
   1178d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11790:	88 45 ec             	mov    %al,-0x14(%ebp)
    if(!dest||!size){
   11793:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11797:	74 2c                	je     117c5 <kernel_memset+0x3e>
   11799:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1179d:	74 26                	je     117c5 <kernel_memset+0x3e>
        return ;
    }
    uint8_t*d=(uint8_t*)dest;
   1179f:	8b 45 08             	mov    0x8(%ebp),%eax
   117a2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--){
   117a5:	eb 0f                	jmp    117b6 <kernel_memset+0x2f>
        *d++=value;
   117a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117aa:	8d 50 01             	lea    0x1(%eax),%edx
   117ad:	89 55 fc             	mov    %edx,-0x4(%ebp)
   117b0:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   117b4:	88 10                	mov    %dl,(%eax)
void kernel_memset(void*dest,uint8_t value,int size){
    if(!dest||!size){
        return ;
    }
    uint8_t*d=(uint8_t*)dest;
    while(size--){
   117b6:	8b 45 10             	mov    0x10(%ebp),%eax
   117b9:	8d 50 ff             	lea    -0x1(%eax),%edx
   117bc:	89 55 10             	mov    %edx,0x10(%ebp)
   117bf:	85 c0                	test   %eax,%eax
   117c1:	75 e4                	jne    117a7 <kernel_memset+0x20>
   117c3:	eb 01                	jmp    117c6 <kernel_memset+0x3f>
        *d++=*s++;
    }   
}
void kernel_memset(void*dest,uint8_t value,int size){
    if(!dest||!size){
        return ;
   117c5:	90                   	nop
    }
    uint8_t*d=(uint8_t*)dest;
    while(size--){
        *d++=value;
    }
}
   117c6:	c9                   	leave  
   117c7:	c3                   	ret    

000117c8 <kernel_memcmp>:
int kernel_memcmp(void*s1,void*s2,int size){
   117c8:	55                   	push   %ebp
   117c9:	89 e5                	mov    %esp,%ebp

}
   117cb:	90                   	nop
   117cc:	5d                   	pop    %ebp
   117cd:	c3                   	ret    

000117ce <kernel_itoa>:
void kernel_itoa(char*buf,int num,int base){
   117ce:	55                   	push   %ebp
   117cf:	89 e5                	mov    %esp,%ebp

}
   117d1:	90                   	nop
   117d2:	5d                   	pop    %ebp
   117d3:	c3                   	ret    

000117d4 <kernel_sprintf>:
void kernel_sprintf(char*buf,const char*fmt,...){
   117d4:	55                   	push   %ebp
   117d5:	89 e5                	mov    %esp,%ebp

}
   117d7:	90                   	nop
   117d8:	5d                   	pop    %ebp
   117d9:	c3                   	ret    

000117da <kernel_vsprintf>:
void kernel_vsprintf(char * buffer, const char * fmt, va_list args){
   117da:	55                   	push   %ebp
   117db:	89 e5                	mov    %esp,%ebp

   117dd:	90                   	nop
   117de:	5d                   	pop    %ebp
   117df:	c3                   	ret    

000117e0 <list_is_empty>:
    list_node_t *first;
    list_node_t *last;
    int count;
}list_t;
void list_init(list_t *list);
static inline int list_is_empty(list_t *list){
   117e0:	55                   	push   %ebp
   117e1:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   117e3:	8b 45 08             	mov    0x8(%ebp),%eax
   117e6:	8b 40 08             	mov    0x8(%eax),%eax
   117e9:	85 c0                	test   %eax,%eax
   117eb:	0f 94 c0             	sete   %al
   117ee:	0f b6 c0             	movzbl %al,%eax
}
   117f1:	5d                   	pop    %ebp
   117f2:	c3                   	ret    

000117f3 <list_init>:
#include"tools/list.h"
void list_init(list_t *list){
   117f3:	55                   	push   %ebp
   117f4:	89 e5                	mov    %esp,%ebp
    list->last = (list_node_t*)0;
   117f6:	8b 45 08             	mov    0x8(%ebp),%eax
   117f9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->first = (list_node_t*)0;
   11800:	8b 45 08             	mov    0x8(%ebp),%eax
   11803:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->count = 0;
   11809:	8b 45 08             	mov    0x8(%ebp),%eax
   1180c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11813:	90                   	nop
   11814:	5d                   	pop    %ebp
   11815:	c3                   	ret    

00011816 <list_insert_first>:
    list_node_t *first;
    list_node_t *last;
    int count;
}list_t;
*/
void list_insert_first(list_t *list, list_node_t *node){
   11816:	55                   	push   %ebp
   11817:	89 e5                	mov    %esp,%ebp
    node->next=list->first;
   11819:	8b 45 08             	mov    0x8(%ebp),%eax
   1181c:	8b 10                	mov    (%eax),%edx
   1181e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11821:	89 50 04             	mov    %edx,0x4(%eax)
    node->prev=(list_node_t*)0;
   11824:	8b 45 0c             	mov    0xc(%ebp),%eax
   11827:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if(list_is_empty(list)){
   1182d:	ff 75 08             	pushl  0x8(%ebp)
   11830:	e8 ab ff ff ff       	call   117e0 <list_is_empty>
   11835:	83 c4 04             	add    $0x4,%esp
   11838:	85 c0                	test   %eax,%eax
   1183a:	74 13                	je     1184f <list_insert_first+0x39>
        list->last=node;
   1183c:	8b 45 08             	mov    0x8(%ebp),%eax
   1183f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11842:	89 50 04             	mov    %edx,0x4(%eax)
        list->first=node;
   11845:	8b 45 08             	mov    0x8(%ebp),%eax
   11848:	8b 55 0c             	mov    0xc(%ebp),%edx
   1184b:	89 10                	mov    %edx,(%eax)
   1184d:	eb 12                	jmp    11861 <list_insert_first+0x4b>
    }else{
        list->first->prev=node;
   1184f:	8b 45 08             	mov    0x8(%ebp),%eax
   11852:	8b 00                	mov    (%eax),%eax
   11854:	8b 55 0c             	mov    0xc(%ebp),%edx
   11857:	89 10                	mov    %edx,(%eax)
        list->first=node;   
   11859:	8b 45 08             	mov    0x8(%ebp),%eax
   1185c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1185f:	89 10                	mov    %edx,(%eax)
    }
    list->count++;
   11861:	8b 45 08             	mov    0x8(%ebp),%eax
   11864:	8b 40 08             	mov    0x8(%eax),%eax
   11867:	8d 50 01             	lea    0x1(%eax),%edx
   1186a:	8b 45 08             	mov    0x8(%ebp),%eax
   1186d:	89 50 08             	mov    %edx,0x8(%eax)
}
   11870:	90                   	nop
   11871:	c9                   	leave  
   11872:	c3                   	ret    

00011873 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node){
   11873:	55                   	push   %ebp
   11874:	89 e5                	mov    %esp,%ebp
    node->next=(list_node_t*)0;
   11876:	8b 45 0c             	mov    0xc(%ebp),%eax
   11879:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    node->prev=list->last;
   11880:	8b 45 08             	mov    0x8(%ebp),%eax
   11883:	8b 50 04             	mov    0x4(%eax),%edx
   11886:	8b 45 0c             	mov    0xc(%ebp),%eax
   11889:	89 10                	mov    %edx,(%eax)
    if(list_is_empty(list)){
   1188b:	ff 75 08             	pushl  0x8(%ebp)
   1188e:	e8 4d ff ff ff       	call   117e0 <list_is_empty>
   11893:	83 c4 04             	add    $0x4,%esp
   11896:	85 c0                	test   %eax,%eax
   11898:	74 13                	je     118ad <list_insert_last+0x3a>
        list->last=node;
   1189a:	8b 45 08             	mov    0x8(%ebp),%eax
   1189d:	8b 55 0c             	mov    0xc(%ebp),%edx
   118a0:	89 50 04             	mov    %edx,0x4(%eax)
        list->first=node;
   118a3:	8b 45 08             	mov    0x8(%ebp),%eax
   118a6:	8b 55 0c             	mov    0xc(%ebp),%edx
   118a9:	89 10                	mov    %edx,(%eax)
   118ab:	eb 15                	jmp    118c2 <list_insert_last+0x4f>
    }else{
        list->last->next=node;
   118ad:	8b 45 08             	mov    0x8(%ebp),%eax
   118b0:	8b 40 04             	mov    0x4(%eax),%eax
   118b3:	8b 55 0c             	mov    0xc(%ebp),%edx
   118b6:	89 50 04             	mov    %edx,0x4(%eax)
        list->last=node;
   118b9:	8b 45 08             	mov    0x8(%ebp),%eax
   118bc:	8b 55 0c             	mov    0xc(%ebp),%edx
   118bf:	89 50 04             	mov    %edx,0x4(%eax)
    }
    list->count++;
   118c2:	8b 45 08             	mov    0x8(%ebp),%eax
   118c5:	8b 40 08             	mov    0x8(%eax),%eax
   118c8:	8d 50 01             	lea    0x1(%eax),%edx
   118cb:	8b 45 08             	mov    0x8(%ebp),%eax
   118ce:	89 50 08             	mov    %edx,0x8(%eax)
}
   118d1:	90                   	nop
   118d2:	c9                   	leave  
   118d3:	c3                   	ret    

000118d4 <list_remove_first>:
list_node_t* list_remove_first(list_t *list){
   118d4:	55                   	push   %ebp
   118d5:	89 e5                	mov    %esp,%ebp
   118d7:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list) ) return (list_node_t*)0;
   118da:	ff 75 08             	pushl  0x8(%ebp)
   118dd:	e8 fe fe ff ff       	call   117e0 <list_is_empty>
   118e2:	83 c4 04             	add    $0x4,%esp
   118e5:	85 c0                	test   %eax,%eax
   118e7:	74 07                	je     118f0 <list_remove_first+0x1c>
   118e9:	b8 00 00 00 00       	mov    $0x0,%eax
   118ee:	eb 6e                	jmp    1195e <list_remove_first+0x8a>
    list_node_t*remove_node=list->first;
   118f0:	8b 45 08             	mov    0x8(%ebp),%eax
   118f3:	8b 00                	mov    (%eax),%eax
   118f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list_node_t*next=list->first->next;
   118f8:	8b 45 08             	mov    0x8(%ebp),%eax
   118fb:	8b 00                	mov    (%eax),%eax
   118fd:	8b 40 04             	mov    0x4(%eax),%eax
   11900:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(next==(list_node_t*)0){
   11903:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   11907:	75 1f                	jne    11928 <list_remove_first+0x54>
        list->last=(list_node_t*)0;
   11909:	8b 45 08             	mov    0x8(%ebp),%eax
   1190c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        list->first=(list_node_t*)0;
   11913:	8b 45 08             	mov    0x8(%ebp),%eax
   11916:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        list->count=0;
   1191c:	8b 45 08             	mov    0x8(%ebp),%eax
   1191f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   11926:	eb 11                	jmp    11939 <list_remove_first+0x65>
    }else{
        next->prev=(list_node_t*)0;
   11928:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1192b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        list->first=next;
   11931:	8b 45 08             	mov    0x8(%ebp),%eax
   11934:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11937:	89 10                	mov    %edx,(%eax)
    }
    remove_node->next=(list_node_t*)0;
   11939:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1193c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    remove_node->prev=(list_node_t*)0;
   11943:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11946:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->count--;
   1194c:	8b 45 08             	mov    0x8(%ebp),%eax
   1194f:	8b 40 08             	mov    0x8(%eax),%eax
   11952:	8d 50 ff             	lea    -0x1(%eax),%edx
   11955:	8b 45 08             	mov    0x8(%ebp),%eax
   11958:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   1195b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1195e:	c9                   	leave  
   1195f:	c3                   	ret    

00011960 <list_remove>:
list_node_t* list_remove(list_t *list,list_node_t* remove_node){
   11960:	55                   	push   %ebp
   11961:	89 e5                	mov    %esp,%ebp
   11963:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list) ) return (list_node_t*)0;
   11966:	ff 75 08             	pushl  0x8(%ebp)
   11969:	e8 72 fe ff ff       	call   117e0 <list_is_empty>
   1196e:	83 c4 04             	add    $0x4,%esp
   11971:	85 c0                	test   %eax,%eax
   11973:	74 0a                	je     1197f <list_remove+0x1f>
   11975:	b8 00 00 00 00       	mov    $0x0,%eax
   1197a:	e9 c4 00 00 00       	jmp    11a43 <list_remove+0xe3>
    list_node_t*next=remove_node->next;
   1197f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11982:	8b 40 04             	mov    0x4(%eax),%eax
   11985:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list_node_t*prev=remove_node->prev;
   11988:	8b 45 0c             	mov    0xc(%ebp),%eax
   1198b:	8b 00                	mov    (%eax),%eax
   1198d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(next==(list_node_t*)0&&prev==(list_node_t*)0){
   11990:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11994:	75 25                	jne    119bb <list_remove+0x5b>
   11996:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   1199a:	75 1f                	jne    119bb <list_remove+0x5b>
        list->last=(list_node_t*)0;
   1199c:	8b 45 08             	mov    0x8(%ebp),%eax
   1199f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        list->first=(list_node_t*)0;
   119a6:	8b 45 08             	mov    0x8(%ebp),%eax
   119a9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        list->count=0;
   119af:	8b 45 08             	mov    0x8(%ebp),%eax
   119b2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   119b9:	eb 72                	jmp    11a2d <list_remove+0xcd>
    }
    else if(next==(list_node_t*)0){
   119bb:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   119bf:	75 24                	jne    119e5 <list_remove+0x85>
        list->last=prev;
   119c1:	8b 45 08             	mov    0x8(%ebp),%eax
   119c4:	8b 55 f8             	mov    -0x8(%ebp),%edx
   119c7:	89 50 04             	mov    %edx,0x4(%eax)
        prev->next=(list_node_t*)0;
   119ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
   119cd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        list->count--;
   119d4:	8b 45 08             	mov    0x8(%ebp),%eax
   119d7:	8b 40 08             	mov    0x8(%eax),%eax
   119da:	8d 50 ff             	lea    -0x1(%eax),%edx
   119dd:	8b 45 08             	mov    0x8(%ebp),%eax
   119e0:	89 50 08             	mov    %edx,0x8(%eax)
   119e3:	eb 48                	jmp    11a2d <list_remove+0xcd>
    }else if(prev==(list_node_t*)0){
   119e5:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   119e9:	75 22                	jne    11a0d <list_remove+0xad>
        list->first=next;
   119eb:	8b 45 08             	mov    0x8(%ebp),%eax
   119ee:	8b 55 fc             	mov    -0x4(%ebp),%edx
   119f1:	89 10                	mov    %edx,(%eax)
        next->prev=(list_node_t*)0;
   119f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   119f6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        list->count--;
   119fc:	8b 45 08             	mov    0x8(%ebp),%eax
   119ff:	8b 40 08             	mov    0x8(%eax),%eax
   11a02:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a05:	8b 45 08             	mov    0x8(%ebp),%eax
   11a08:	89 50 08             	mov    %edx,0x8(%eax)
   11a0b:	eb 20                	jmp    11a2d <list_remove+0xcd>
    }else{
        next->prev=prev;
   11a0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a10:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11a13:	89 10                	mov    %edx,(%eax)
        prev->next=next;
   11a15:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11a18:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11a1b:	89 50 04             	mov    %edx,0x4(%eax)
        list->count--;
   11a1e:	8b 45 08             	mov    0x8(%ebp),%eax
   11a21:	8b 40 08             	mov    0x8(%eax),%eax
   11a24:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a27:	8b 45 08             	mov    0x8(%ebp),%eax
   11a2a:	89 50 08             	mov    %edx,0x8(%eax)
    }
    remove_node->next=(list_node_t*)0;
   11a2d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a30:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    remove_node->prev=(list_node_t*)0;
   11a37:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a3a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    return remove_node;
   11a40:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a43:	c9                   	leave  
   11a44:	c3                   	ret    

00011a45 <hlt>:
    __asm__ __volatile__("cli");
}
static inline void sti(){  
    __asm__ __volatile__("sti");
}
static inline void hlt(){
   11a45:	55                   	push   %ebp
   11a46:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11a48:	f4                   	hlt    
}
   11a49:	90                   	nop
   11a4a:	5d                   	pop    %ebp
   11a4b:	c3                   	ret    

00011a4c <write_tr>:
    return ret;
}
static inline void write_cr4(uint32_t val){
    __asm__ __volatile__("mov %[v], %%cr4" : : [v]"r"(val));
}
static inline void write_tr(uint16_t tss_sel){
   11a4c:	55                   	push   %ebp
   11a4d:	89 e5                	mov    %esp,%ebp
   11a4f:	83 ec 04             	sub    $0x4,%esp
   11a52:	8b 45 08             	mov    0x8(%ebp),%eax
   11a55:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax" : : "a"(tss_sel));
   11a59:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11a5d:	0f 00 d8             	ltr    %ax
}
   11a60:	90                   	nop
   11a61:	c9                   	leave  
   11a62:	c3                   	ret    

00011a63 <list_node_init>:
    ((parent_type*)(node?offset_to_parent(node,parent_type,node_name):0))
typedef struct _list_node_t{
    struct _list_node_t *prev;
    struct _list_node_t *next;
}list_node_t;
static inline void list_node_init(list_node_t *node){
   11a63:	55                   	push   %ebp
   11a64:	89 e5                	mov    %esp,%ebp
    node->prev = node->next = (list_node_t*)0;
   11a66:	8b 45 08             	mov    0x8(%ebp),%eax
   11a69:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11a70:	8b 45 08             	mov    0x8(%ebp),%eax
   11a73:	8b 50 04             	mov    0x4(%eax),%edx
   11a76:	8b 45 08             	mov    0x8(%ebp),%eax
   11a79:	89 10                	mov    %edx,(%eax)
}
   11a7b:	90                   	nop
   11a7c:	5d                   	pop    %ebp
   11a7d:	c3                   	ret    

00011a7e <list_node_next>:
static inline list_node_t*list_node_pre(list_node_t *node){
    return node->prev;
}
static inline list_node_t*list_node_next(list_node_t *node){
   11a7e:	55                   	push   %ebp
   11a7f:	89 e5                	mov    %esp,%ebp
    return node->next;
   11a81:	8b 45 08             	mov    0x8(%ebp),%eax
   11a84:	8b 40 04             	mov    0x4(%eax),%eax
}
   11a87:	5d                   	pop    %ebp
   11a88:	c3                   	ret    

00011a89 <list_count>:
}list_t;
void list_init(list_t *list);
static inline int list_is_empty(list_t *list){
    return list->count == 0;
}
static inline int list_count(list_t *list){
   11a89:	55                   	push   %ebp
   11a8a:	89 e5                	mov    %esp,%ebp
    return list->count;
   11a8c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a8f:	8b 40 08             	mov    0x8(%eax),%eax
}
   11a92:	5d                   	pop    %ebp
   11a93:	c3                   	ret    

00011a94 <list_first>:
static inline list_node_t*list_first(list_t *list){
   11a94:	55                   	push   %ebp
   11a95:	89 e5                	mov    %esp,%ebp
    return list->first;
   11a97:	8b 45 08             	mov    0x8(%ebp),%eax
   11a9a:	8b 00                	mov    (%eax),%eax
}
   11a9c:	5d                   	pop    %ebp
   11a9d:	c3                   	ret    

00011a9e <tss_init>:
   - 一般的段描述符并不直接关联特定的数据结构。
4. 应用场景：
   - TSS 描述符主要用于任务切换和多任务处理，保存和恢复任务的状态。
   - 一般的段描述符用于定义代码、数据等内存段的属性和位置，用于访问内存中的数据。
总体而言，TSS 描述符是一种特殊用途的段描述符，用于管理任务状态和任务切换，而一般的段描述符用于定义常规的内存段的属性和访问权限。*/
static int tss_init(task_t*task,uint32_t entry,uint32_t esp){
   11a9e:	55                   	push   %ebp
   11a9f:	89 e5                	mov    %esp,%ebp
   11aa1:	83 ec 18             	sub    $0x18,%esp
    int tss_sel=gdt_alloc_desc();
   11aa4:	e8 54 e9 ff ff       	call   103fd <gdt_alloc_desc>
   11aa9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel<0){
   11aac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11ab0:	79 1a                	jns    11acc <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   11ab2:	83 ec 0c             	sub    $0xc,%esp
   11ab5:	68 c4 26 01 00       	push   $0x126c4
   11aba:	e8 9a fa ff ff       	call   11559 <log_printf>
   11abf:	83 c4 10             	add    $0x10,%esp
        return -1;
   11ac2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ac7:	e9 de 00 00 00       	jmp    11baa <tss_init+0x10c>
    }
    segment_desc_set(tss_sel,(uint32_t)&task->tss,sizeof(task->tss),
   11acc:	8b 45 08             	mov    0x8(%ebp),%eax
   11acf:	83 c0 30             	add    $0x30,%eax
   11ad2:	68 89 00 00 00       	push   $0x89
   11ad7:	6a 68                	push   $0x68
   11ad9:	50                   	push   %eax
   11ada:	ff 75 f4             	pushl  -0xc(%ebp)
   11add:	e8 5c e8 ff ff       	call   1033e <segment_desc_set>
   11ae2:	83 c4 10             	add    $0x10,%esp
    SEG_P_PRESENT|SEG_DPL0|SEG_TYPE_TSS);
    kernel_memset(&task->tss,0,sizeof(task->tss));
   11ae5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ae8:	83 c0 30             	add    $0x30,%eax
   11aeb:	83 ec 04             	sub    $0x4,%esp
   11aee:	6a 68                	push   $0x68
   11af0:	6a 00                	push   $0x0
   11af2:	50                   	push   %eax
   11af3:	e8 8f fc ff ff       	call   11787 <kernel_memset>
   11af8:	83 c4 10             	add    $0x10,%esp
    task->tss.eip=entry;
   11afb:	8b 45 08             	mov    0x8(%ebp),%eax
   11afe:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b01:	89 50 50             	mov    %edx,0x50(%eax)
    task->tss.esp=task->tss.esp0=esp;
   11b04:	8b 45 08             	mov    0x8(%ebp),%eax
   11b07:	8b 55 10             	mov    0x10(%ebp),%edx
   11b0a:	89 50 34             	mov    %edx,0x34(%eax)
   11b0d:	8b 45 08             	mov    0x8(%ebp),%eax
   11b10:	8b 50 34             	mov    0x34(%eax),%edx
   11b13:	8b 45 08             	mov    0x8(%ebp),%eax
   11b16:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.ss0=KERNEL_SELECTOR_DS;
   11b19:	8b 45 08             	mov    0x8(%ebp),%eax
   11b1c:	c7 40 38 10 00 00 00 	movl   $0x10,0x38(%eax)
    task->tss.eflags=EFLAGS_DEFAULT|EFLAGS_IF;
   11b23:	8b 45 08             	mov    0x8(%ebp),%eax
   11b26:	c7 40 54 02 02 00 00 	movl   $0x202,0x54(%eax)
    task->tss.es=task->tss.ss=task->tss.ds=task->tss.fs=task->tss.gs=KERNEL_SELECTOR_DS;
   11b2d:	8b 45 08             	mov    0x8(%ebp),%eax
   11b30:	c7 80 8c 00 00 00 10 	movl   $0x10,0x8c(%eax)
   11b37:	00 00 00 
   11b3a:	8b 45 08             	mov    0x8(%ebp),%eax
   11b3d:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
   11b43:	8b 45 08             	mov    0x8(%ebp),%eax
   11b46:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
   11b4c:	8b 45 08             	mov    0x8(%ebp),%eax
   11b4f:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
   11b55:	8b 45 08             	mov    0x8(%ebp),%eax
   11b58:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
   11b5e:	8b 45 08             	mov    0x8(%ebp),%eax
   11b61:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
   11b67:	8b 45 08             	mov    0x8(%ebp),%eax
   11b6a:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
   11b70:	8b 45 08             	mov    0x8(%ebp),%eax
   11b73:	8b 90 80 00 00 00    	mov    0x80(%eax),%edx
   11b79:	8b 45 08             	mov    0x8(%ebp),%eax
   11b7c:	89 50 78             	mov    %edx,0x78(%eax)
    task->tss.cs=KERNEL_SELECTOR_CS;
   11b7f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b82:	c7 40 7c 08 00 00 00 	movl   $0x8,0x7c(%eax)
    task->tss.iomap=0;
   11b89:	8b 45 08             	mov    0x8(%ebp),%eax
   11b8c:	c7 80 94 00 00 00 00 	movl   $0x0,0x94(%eax)
   11b93:	00 00 00 
    task->tss_sel=tss_sel;
   11b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b99:	89 c2                	mov    %eax,%edx
   11b9b:	8b 45 08             	mov    0x8(%ebp),%eax
   11b9e:	66 89 90 98 00 00 00 	mov    %dx,0x98(%eax)
    return 0;
   11ba5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11baa:	c9                   	leave  
   11bab:	c3                   	ret    

00011bac <task_init>:

int task_init(task_t*task,const char*name,uint32_t entry,uint32_t esp){
   11bac:	55                   	push   %ebp
   11bad:	89 e5                	mov    %esp,%ebp
   11baf:	83 ec 18             	sub    $0x18,%esp
    //(task!=(task_t*)0);
    int err=tss_init(task,entry,esp);
   11bb2:	83 ec 04             	sub    $0x4,%esp
   11bb5:	ff 75 14             	pushl  0x14(%ebp)
   11bb8:	ff 75 10             	pushl  0x10(%ebp)
   11bbb:	ff 75 08             	pushl  0x8(%ebp)
   11bbe:	e8 db fe ff ff       	call   11a9e <tss_init>
   11bc3:	83 c4 10             	add    $0x10,%esp
   11bc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(err<0){
   11bc9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11bcd:	79 18                	jns    11be7 <task_init+0x3b>
        log_printf("init task failed...\n");
   11bcf:	83 ec 0c             	sub    $0xc,%esp
   11bd2:	68 d7 26 01 00       	push   $0x126d7
   11bd7:	e8 7d f9 ff ff       	call   11559 <log_printf>
   11bdc:	83 c4 10             	add    $0x10,%esp
        return err;
   11bdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11be2:	e9 b7 00 00 00       	jmp    11c9e <task_init+0xf2>
    }
    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   11be7:	8b 45 08             	mov    0x8(%ebp),%eax
   11bea:	83 c0 04             	add    $0x4,%eax
   11bed:	83 ec 04             	sub    $0x4,%esp
   11bf0:	6a 20                	push   $0x20
   11bf2:	ff 75 0c             	pushl  0xc(%ebp)
   11bf5:	50                   	push   %eax
   11bf6:	e8 1f fa ff ff       	call   1161a <kernel_strncpy>
   11bfb:	83 c4 10             	add    $0x10,%esp
    task->state=TASK_CREATED;
   11bfe:	8b 45 08             	mov    0x8(%ebp),%eax
   11c01:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks=0;
   11c07:	8b 45 08             	mov    0x8(%ebp),%eax
   11c0a:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    task->priority=0;
   11c11:	8b 45 08             	mov    0x8(%ebp),%eax
   11c14:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
   11c1b:	00 00 00 
    task->time_slice=TASK_TIME_SLICE_DEFAULT;
   11c1e:	8b 45 08             	mov    0x8(%ebp),%eax
   11c21:	c7 40 28 0a 00 00 00 	movl   $0xa,0x28(%eax)
    task->slice_ticks=task->time_slice;
   11c28:	8b 45 08             	mov    0x8(%ebp),%eax
   11c2b:	8b 50 28             	mov    0x28(%eax),%edx
   11c2e:	8b 45 08             	mov    0x8(%ebp),%eax
   11c31:	89 50 2c             	mov    %edx,0x2c(%eax)
    list_node_init(&task->all_node);
   11c34:	8b 45 08             	mov    0x8(%ebp),%eax
   11c37:	05 a4 00 00 00       	add    $0xa4,%eax
   11c3c:	83 ec 0c             	sub    $0xc,%esp
   11c3f:	50                   	push   %eax
   11c40:	e8 1e fe ff ff       	call   11a63 <list_node_init>
   11c45:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   11c48:	8b 45 08             	mov    0x8(%ebp),%eax
   11c4b:	05 9c 00 00 00       	add    $0x9c,%eax
   11c50:	83 ec 0c             	sub    $0xc,%esp
   11c53:	50                   	push   %eax
   11c54:	e8 0a fe ff ff       	call   11a63 <list_node_init>
   11c59:	83 c4 10             	add    $0x10,%esp

    irq_state_t state=irq_enter_protection();
   11c5c:	e8 49 f2 ff ff       	call   10eaa <irq_enter_protection>
   11c61:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task_set_ready(task);
   11c64:	83 ec 0c             	sub    $0xc,%esp
   11c67:	ff 75 08             	pushl  0x8(%ebp)
   11c6a:	e8 34 01 00 00       	call   11da3 <task_set_ready>
   11c6f:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   11c72:	8b 45 08             	mov    0x8(%ebp),%eax
   11c75:	05 a4 00 00 00       	add    $0xa4,%eax
   11c7a:	83 ec 08             	sub    $0x8,%esp
   11c7d:	50                   	push   %eax
   11c7e:	68 b0 33 01 00       	push   $0x133b0
   11c83:	e8 eb fb ff ff       	call   11873 <list_insert_last>
   11c88:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11c8b:	83 ec 0c             	sub    $0xc,%esp
   11c8e:	ff 75 f0             	pushl  -0x10(%ebp)
   11c91:	e8 2c f2 ff ff       	call   10ec2 <irq_leave_protection>
   11c96:	83 c4 10             	add    $0x10,%esp
    return 0;
   11c99:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11c9e:	c9                   	leave  
   11c9f:	c3                   	ret    

00011ca0 <task_switch_from_to>:

void simple_switch(uint32_t **from,uint32_t *to);
void task_switch_from_to(task_t*from,task_t*to){
   11ca0:	55                   	push   %ebp
   11ca1:	89 e5                	mov    %esp,%ebp
   11ca3:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   11ca6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ca9:	0f b7 80 98 00 00 00 	movzwl 0x98(%eax),%eax
   11cb0:	0f b7 c0             	movzwl %ax,%eax
   11cb3:	83 ec 0c             	sub    $0xc,%esp
   11cb6:	50                   	push   %eax
   11cb7:	e8 f3 e7 ff ff       	call   104af <switch_to_tss>
   11cbc:	83 c4 10             	add    $0x10,%esp
}
   11cbf:	90                   	nop
   11cc0:	c9                   	leave  
   11cc1:	c3                   	ret    

00011cc2 <task_first_init>:
void task_first_init(void){
   11cc2:	55                   	push   %ebp
   11cc3:	89 e5                	mov    %esp,%ebp
   11cc5:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.idle_task,"first task",0,0);
   11cc8:	6a 00                	push   $0x0
   11cca:	6a 00                	push   $0x0
   11ccc:	68 ec 26 01 00       	push   $0x126ec
   11cd1:	68 78 34 01 00       	push   $0x13478
   11cd6:	e8 d1 fe ff ff       	call   11bac <task_init>
   11cdb:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.idle_task.tss_sel);
   11cde:	0f b7 05 10 35 01 00 	movzwl 0x13510,%eax
   11ce5:	0f b7 c0             	movzwl %ax,%eax
   11ce8:	83 ec 0c             	sub    $0xc,%esp
   11ceb:	50                   	push   %eax
   11cec:	e8 5b fd ff ff       	call   11a4c <write_tr>
   11cf1:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task=&task_manager.first_task;
   11cf4:	c7 05 a0 33 01 00 c8 	movl   $0x133c8,0x133a0
   11cfb:	33 01 00 
}
   11cfe:	90                   	nop
   11cff:	c9                   	leave  
   11d00:	c3                   	ret    

00011d01 <task_first_task>:

task_t*task_first_task(void){
   11d01:	55                   	push   %ebp
   11d02:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11d04:	b8 c8 33 01 00       	mov    $0x133c8,%eax
}
   11d09:	5d                   	pop    %ebp
   11d0a:	c3                   	ret    

00011d0b <task_set_block>:
void task_set_block(task_t*task){
   11d0b:	55                   	push   %ebp
   11d0c:	89 e5                	mov    %esp,%ebp
   11d0e:	83 ec 08             	sub    $0x8,%esp
    if(task!=&task_manager.idle_task){
   11d11:	81 7d 08 78 34 01 00 	cmpl   $0x13478,0x8(%ebp)
   11d18:	74 19                	je     11d33 <task_set_block+0x28>
        list_remove(&task_manager.ready_list,&task->run_node);
   11d1a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d1d:	05 9c 00 00 00       	add    $0x9c,%eax
   11d22:	83 ec 08             	sub    $0x8,%esp
   11d25:	50                   	push   %eax
   11d26:	68 a4 33 01 00       	push   $0x133a4
   11d2b:	e8 30 fc ff ff       	call   11960 <list_remove>
   11d30:	83 c4 10             	add    $0x10,%esp
    }
}
   11d33:	90                   	nop
   11d34:	c9                   	leave  
   11d35:	c3                   	ret    

00011d36 <idle_task_entry>:

static void idle_task_entry(void){
   11d36:	55                   	push   %ebp
   11d37:	89 e5                	mov    %esp,%ebp
    for(;;){
        hlt();
   11d39:	e8 07 fd ff ff       	call   11a45 <hlt>
    }
   11d3e:	eb f9                	jmp    11d39 <idle_task_entry+0x3>

00011d40 <task_manager_init>:
}

void task_manager_init(void){
   11d40:	55                   	push   %ebp
   11d41:	89 e5                	mov    %esp,%ebp
   11d43:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   11d46:	83 ec 0c             	sub    $0xc,%esp
   11d49:	68 a4 33 01 00       	push   $0x133a4
   11d4e:	e8 a0 fa ff ff       	call   117f3 <list_init>
   11d53:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   11d56:	83 ec 0c             	sub    $0xc,%esp
   11d59:	68 b0 33 01 00       	push   $0x133b0
   11d5e:	e8 90 fa ff ff       	call   117f3 <list_init>
   11d63:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   11d66:	83 ec 0c             	sub    $0xc,%esp
   11d69:	68 bc 33 01 00       	push   $0x133bc
   11d6e:	e8 80 fa ff ff       	call   117f3 <list_init>
   11d73:	83 c4 10             	add    $0x10,%esp
    task_init(&task_manager.idle_task,"idle task",(uint32_t)idle_task_entry,(uint32_t)(idle_task_stack + IDLE_STACK_SIZE));
   11d76:	b8 40 45 01 00       	mov    $0x14540,%eax
   11d7b:	89 c2                	mov    %eax,%edx
   11d7d:	b8 36 1d 01 00       	mov    $0x11d36,%eax
   11d82:	52                   	push   %edx
   11d83:	50                   	push   %eax
   11d84:	68 f7 26 01 00       	push   $0x126f7
   11d89:	68 78 34 01 00       	push   $0x13478
   11d8e:	e8 19 fe ff ff       	call   11bac <task_init>
   11d93:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task=(task_t*)0;
   11d96:	c7 05 a0 33 01 00 00 	movl   $0x0,0x133a0
   11d9d:	00 00 00 
}
   11da0:	90                   	nop
   11da1:	c9                   	leave  
   11da2:	c3                   	ret    

00011da3 <task_set_ready>:

void task_set_ready(task_t*task){
   11da3:	55                   	push   %ebp
   11da4:	89 e5                	mov    %esp,%ebp
   11da6:	83 ec 08             	sub    $0x8,%esp
    if(task!=&task_manager.idle_task){
   11da9:	81 7d 08 78 34 01 00 	cmpl   $0x13478,0x8(%ebp)
   11db0:	74 22                	je     11dd4 <task_set_ready+0x31>
        list_insert_last(&task_manager.ready_list,&task->run_node);
   11db2:	8b 45 08             	mov    0x8(%ebp),%eax
   11db5:	05 9c 00 00 00       	add    $0x9c,%eax
   11dba:	83 ec 08             	sub    $0x8,%esp
   11dbd:	50                   	push   %eax
   11dbe:	68 a4 33 01 00       	push   $0x133a4
   11dc3:	e8 ab fa ff ff       	call   11873 <list_insert_last>
   11dc8:	83 c4 10             	add    $0x10,%esp
        task->state=TASK_READY;
   11dcb:	8b 45 08             	mov    0x8(%ebp),%eax
   11dce:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    }
}
   11dd4:	90                   	nop
   11dd5:	c9                   	leave  
   11dd6:	c3                   	ret    

00011dd7 <task_next_run>:

static task_t*task_next_run(void){
   11dd7:	55                   	push   %ebp
   11dd8:	89 e5                	mov    %esp,%ebp
   11dda:	83 ec 10             	sub    $0x10,%esp
    if(list_count(&task_manager.ready_list)==0){
   11ddd:	68 a4 33 01 00       	push   $0x133a4
   11de2:	e8 a2 fc ff ff       	call   11a89 <list_count>
   11de7:	83 c4 04             	add    $0x4,%esp
   11dea:	85 c0                	test   %eax,%eax
   11dec:	75 07                	jne    11df5 <task_next_run+0x1e>
        return &task_manager.idle_task;
   11dee:	b8 78 34 01 00       	mov    $0x13478,%eax
   11df3:	eb 26                	jmp    11e1b <task_next_run+0x44>
    }
    list_node_t*task_node=list_first(&task_manager.ready_list);
   11df5:	68 a4 33 01 00       	push   $0x133a4
   11dfa:	e8 95 fc ff ff       	call   11a94 <list_first>
   11dff:	83 c4 04             	add    $0x4,%esp
   11e02:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node,task_t,run_node);
   11e05:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11e09:	74 0a                	je     11e15 <task_next_run+0x3e>
   11e0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e0e:	2d 9c 00 00 00       	sub    $0x9c,%eax
   11e13:	eb 05                	jmp    11e1a <task_next_run+0x43>
   11e15:	b8 00 00 00 00       	mov    $0x0,%eax
   11e1a:	90                   	nop
}
   11e1b:	c9                   	leave  
   11e1c:	c3                   	ret    

00011e1d <task_set_sleep>:

void task_set_sleep(task_t*task,uint32_t sleep_tick){
   11e1d:	55                   	push   %ebp
   11e1e:	89 e5                	mov    %esp,%ebp
   11e20:	83 ec 08             	sub    $0x8,%esp
    if(sleep_tick<=0){
   11e23:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11e27:	74 2d                	je     11e56 <task_set_sleep+0x39>
        return ;
    }
    task->sleep_ticks=sleep_tick;
   11e29:	8b 55 0c             	mov    0xc(%ebp),%edx
   11e2c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e2f:	89 50 24             	mov    %edx,0x24(%eax)
    task->state=TASK_SLEEP;
   11e32:	8b 45 08             	mov    0x8(%ebp),%eax
   11e35:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list,&task->run_node);
   11e3b:	8b 45 08             	mov    0x8(%ebp),%eax
   11e3e:	05 9c 00 00 00       	add    $0x9c,%eax
   11e43:	83 ec 08             	sub    $0x8,%esp
   11e46:	50                   	push   %eax
   11e47:	68 bc 33 01 00       	push   $0x133bc
   11e4c:	e8 22 fa ff ff       	call   11873 <list_insert_last>
   11e51:	83 c4 10             	add    $0x10,%esp
   11e54:	eb 01                	jmp    11e57 <task_set_sleep+0x3a>
    return list_node_parent(task_node,task_t,run_node);
}

void task_set_sleep(task_t*task,uint32_t sleep_tick){
    if(sleep_tick<=0){
        return ;
   11e56:	90                   	nop
    }
    task->sleep_ticks=sleep_tick;
    task->state=TASK_SLEEP;
    list_insert_last(&task_manager.sleep_list,&task->run_node);
}
   11e57:	c9                   	leave  
   11e58:	c3                   	ret    

00011e59 <task_set_wakeup>:

void task_set_wakeup(task_t*task){
   11e59:	55                   	push   %ebp
   11e5a:	89 e5                	mov    %esp,%ebp
   11e5c:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list,&task->run_node);
   11e5f:	8b 45 08             	mov    0x8(%ebp),%eax
   11e62:	05 9c 00 00 00       	add    $0x9c,%eax
   11e67:	83 ec 08             	sub    $0x8,%esp
   11e6a:	50                   	push   %eax
   11e6b:	68 bc 33 01 00       	push   $0x133bc
   11e70:	e8 eb fa ff ff       	call   11960 <list_remove>
   11e75:	83 c4 10             	add    $0x10,%esp
}
   11e78:	90                   	nop
   11e79:	c9                   	leave  
   11e7a:	c3                   	ret    

00011e7b <task_current>:
task_t*task_current(void){
   11e7b:	55                   	push   %ebp
   11e7c:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11e7e:	a1 a0 33 01 00       	mov    0x133a0,%eax
}
   11e83:	5d                   	pop    %ebp
   11e84:	c3                   	ret    

00011e85 <sys_yield>:
int sys_yield(void){
   11e85:	55                   	push   %ebp
   11e86:	89 e5                	mov    %esp,%ebp
   11e88:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state=irq_enter_protection();
   11e8b:	e8 1a f0 ff ff       	call   10eaa <irq_enter_protection>
   11e90:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(list_count(&task_manager.ready_list)>1){
   11e93:	83 ec 0c             	sub    $0xc,%esp
   11e96:	68 a4 33 01 00       	push   $0x133a4
   11e9b:	e8 e9 fb ff ff       	call   11a89 <list_count>
   11ea0:	83 c4 10             	add    $0x10,%esp
   11ea3:	83 f8 01             	cmp    $0x1,%eax
   11ea6:	7e 29                	jle    11ed1 <sys_yield+0x4c>
        task_t*task_cur=task_current();
   11ea8:	e8 ce ff ff ff       	call   11e7b <task_current>
   11ead:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(task_cur);
   11eb0:	83 ec 0c             	sub    $0xc,%esp
   11eb3:	ff 75 f0             	pushl  -0x10(%ebp)
   11eb6:	e8 50 fe ff ff       	call   11d0b <task_set_block>
   11ebb:	83 c4 10             	add    $0x10,%esp
        task_set_ready(task_cur);
   11ebe:	83 ec 0c             	sub    $0xc,%esp
   11ec1:	ff 75 f0             	pushl  -0x10(%ebp)
   11ec4:	e8 da fe ff ff       	call   11da3 <task_set_ready>
   11ec9:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11ecc:	e8 07 00 00 00       	call   11ed8 <task_dispatch>
    }
    return 0;
   11ed1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11ed6:	c9                   	leave  
   11ed7:	c3                   	ret    

00011ed8 <task_dispatch>:
void task_dispatch(void){
   11ed8:	55                   	push   %ebp
   11ed9:	89 e5                	mov    %esp,%ebp
   11edb:	83 ec 18             	sub    $0x18,%esp
    task_t*curr_task=task_current();
   11ede:	e8 98 ff ff ff       	call   11e7b <task_current>
   11ee3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t*next_task=task_next_run();
   11ee6:	e8 ec fe ff ff       	call   11dd7 <task_next_run>
   11eeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(curr_task!=next_task){
   11eee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ef1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   11ef4:	74 22                	je     11f18 <task_dispatch+0x40>
        task_manager.curr_task=next_task;
   11ef6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ef9:	a3 a0 33 01 00       	mov    %eax,0x133a0
        next_task->state=TASK_RUNNING;
   11efe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f01:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(curr_task,next_task);
   11f07:	83 ec 08             	sub    $0x8,%esp
   11f0a:	ff 75 f0             	pushl  -0x10(%ebp)
   11f0d:	ff 75 f4             	pushl  -0xc(%ebp)
   11f10:	e8 8b fd ff ff       	call   11ca0 <task_switch_from_to>
   11f15:	83 c4 10             	add    $0x10,%esp
    }
}
   11f18:	90                   	nop
   11f19:	c9                   	leave  
   11f1a:	c3                   	ret    

00011f1b <task_time_tick>:
void task_time_tick(void){
   11f1b:	55                   	push   %ebp
   11f1c:	89 e5                	mov    %esp,%ebp
   11f1e:	83 ec 18             	sub    $0x18,%esp
    task_t*curr_task=task_current();
   11f21:	e8 55 ff ff ff       	call   11e7b <task_current>
   11f26:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_state_t state=irq_enter_protection();
   11f29:	e8 7c ef ff ff       	call   10eaa <irq_enter_protection>
   11f2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(--curr_task->slice_ticks<=0){
   11f31:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f34:	8b 40 2c             	mov    0x2c(%eax),%eax
   11f37:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f3d:	89 50 2c             	mov    %edx,0x2c(%eax)
   11f40:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f43:	8b 40 2c             	mov    0x2c(%eax),%eax
   11f46:	85 c0                	test   %eax,%eax
   11f48:	7f 28                	jg     11f72 <task_time_tick+0x57>
        curr_task->slice_ticks=curr_task->time_slice;
   11f4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f4d:	8b 50 28             	mov    0x28(%eax),%edx
   11f50:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f53:	89 50 2c             	mov    %edx,0x2c(%eax)
        task_set_block(curr_task);
   11f56:	83 ec 0c             	sub    $0xc,%esp
   11f59:	ff 75 f0             	pushl  -0x10(%ebp)
   11f5c:	e8 aa fd ff ff       	call   11d0b <task_set_block>
   11f61:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   11f64:	83 ec 0c             	sub    $0xc,%esp
   11f67:	ff 75 f0             	pushl  -0x10(%ebp)
   11f6a:	e8 34 fe ff ff       	call   11da3 <task_set_ready>
   11f6f:	83 c4 10             	add    $0x10,%esp
    }
    list_node_t*curr=list_first(&task_manager.sleep_list);
   11f72:	83 ec 0c             	sub    $0xc,%esp
   11f75:	68 bc 33 01 00       	push   $0x133bc
   11f7a:	e8 15 fb ff ff       	call   11a94 <list_first>
   11f7f:	83 c4 10             	add    $0x10,%esp
   11f82:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr){
   11f85:	eb 5e                	jmp    11fe5 <task_time_tick+0xca>
        task_t*task=list_node_parent(curr,task_t,run_node);
   11f87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11f8b:	74 0a                	je     11f97 <task_time_tick+0x7c>
   11f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f90:	2d 9c 00 00 00       	sub    $0x9c,%eax
   11f95:	eb 05                	jmp    11f9c <task_time_tick+0x81>
   11f97:	b8 00 00 00 00       	mov    $0x0,%eax
   11f9c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if(--task->slice_ticks<=0){
   11f9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11fa2:	8b 40 2c             	mov    0x2c(%eax),%eax
   11fa5:	8d 50 ff             	lea    -0x1(%eax),%edx
   11fa8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11fab:	89 50 2c             	mov    %edx,0x2c(%eax)
   11fae:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11fb1:	8b 40 2c             	mov    0x2c(%eax),%eax
   11fb4:	85 c0                	test   %eax,%eax
   11fb6:	7f 1c                	jg     11fd4 <task_time_tick+0xb9>
            task_set_wakeup(task);
   11fb8:	83 ec 0c             	sub    $0xc,%esp
   11fbb:	ff 75 e8             	pushl  -0x18(%ebp)
   11fbe:	e8 96 fe ff ff       	call   11e59 <task_set_wakeup>
   11fc3:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   11fc6:	83 ec 0c             	sub    $0xc,%esp
   11fc9:	ff 75 e8             	pushl  -0x18(%ebp)
   11fcc:	e8 d2 fd ff ff       	call   11da3 <task_set_ready>
   11fd1:	83 c4 10             	add    $0x10,%esp
        }
        curr=list_node_next(curr);
   11fd4:	83 ec 0c             	sub    $0xc,%esp
   11fd7:	ff 75 f4             	pushl  -0xc(%ebp)
   11fda:	e8 9f fa ff ff       	call   11a7e <list_node_next>
   11fdf:	83 c4 10             	add    $0x10,%esp
   11fe2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        curr_task->slice_ticks=curr_task->time_slice;
        task_set_block(curr_task);
        task_set_ready(curr_task);
    }
    list_node_t*curr=list_first(&task_manager.sleep_list);
    while(curr){
   11fe5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11fe9:	75 9c                	jne    11f87 <task_time_tick+0x6c>
            task_set_wakeup(task);
            task_set_ready(task);
        }
        curr=list_node_next(curr);
    }
    task_dispatch();
   11feb:	e8 e8 fe ff ff       	call   11ed8 <task_dispatch>
    irq_leave_protection(state);
   11ff0:	83 ec 0c             	sub    $0xc,%esp
   11ff3:	ff 75 ec             	pushl  -0x14(%ebp)
   11ff6:	e8 c7 ee ff ff       	call   10ec2 <irq_leave_protection>
   11ffb:	83 c4 10             	add    $0x10,%esp
}
   11ffe:	90                   	nop
   11fff:	c9                   	leave  
   12000:	c3                   	ret    

00012001 <sys_msleep>:
void sys_msleep(uint32_t ms){
   12001:	55                   	push   %ebp
   12002:	89 e5                	mov    %esp,%ebp
   12004:	83 ec 18             	sub    $0x18,%esp
    if(ms<OS_TICK_MS){
   12007:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
   1200b:	77 07                	ja     12014 <sys_msleep+0x13>
        ms=OS_TICK_MS;
   1200d:	c7 45 08 0a 00 00 00 	movl   $0xa,0x8(%ebp)
    }
    irq_state_t state=irq_enter_protection();
   12014:	e8 91 ee ff ff       	call   10eaa <irq_enter_protection>
   12019:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_block(task_manager.curr_task);
   1201c:	a1 a0 33 01 00       	mov    0x133a0,%eax
   12021:	83 ec 0c             	sub    $0xc,%esp
   12024:	50                   	push   %eax
   12025:	e8 e1 fc ff ff       	call   11d0b <task_set_block>
   1202a:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task,(ms+(OS_TICK_MS-1))/OS_TICK_MS);
   1202d:	8b 45 08             	mov    0x8(%ebp),%eax
   12030:	83 c0 09             	add    $0x9,%eax
   12033:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   12038:	f7 e2                	mul    %edx
   1203a:	c1 ea 03             	shr    $0x3,%edx
   1203d:	a1 a0 33 01 00       	mov    0x133a0,%eax
   12042:	83 ec 08             	sub    $0x8,%esp
   12045:	52                   	push   %edx
   12046:	50                   	push   %eax
   12047:	e8 d1 fd ff ff       	call   11e1d <task_set_sleep>
   1204c:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   1204f:	e8 84 fe ff ff       	call   11ed8 <task_dispatch>
    irq_leave_protection(state);
   12054:	83 ec 0c             	sub    $0xc,%esp
   12057:	ff 75 f4             	pushl  -0xc(%ebp)
   1205a:	e8 63 ee ff ff       	call   10ec2 <irq_leave_protection>
   1205f:	83 c4 10             	add    $0x10,%esp
   12062:	90                   	nop
   12063:	c9                   	leave  
   12064:	c3                   	ret    
